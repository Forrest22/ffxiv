{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Section from '../Section';\nimport Grid from '@material-ui/core/Grid';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport RouteCardContainer from './RouteCardContainer';\nimport RouteCard from './RouteCard';\nimport FishPanel from './FishPanel';\nimport BaitList from './BaitList';\nimport calculateVoyages from './calculate-voyages';\nimport { fishingSpots, fishes } from './gists/data/ocean-fish-data.json';\nimport * as maps from './maps';\nimport { timeUntil, getStops, getBlueFish, getBaitGroup, translate } from './utils';\nconst useStyles = makeStyles(theme => ({\n  headerSub: {\n    marginLeft: theme.spacing(2),\n    [theme.breakpoints.down('md')]: {\n      marginLeft: 0,\n      display: 'block'\n    }\n  },\n  headerTime: {\n    position: 'relative',\n    top: '-0.2em',\n    marginLeft: '0.25em'\n  },\n  showAllFishCheckbox: {\n    padding: 0,\n    margin: theme.spacing(0, 1)\n  }\n}));\n\nconst RouteInformation = ({\n  now,\n  selectedRoute,\n  checklist,\n  setChecklist\n}) => {\n  if (!now || !selectedRoute) return null;\n  const classes = useStyles();\n  const router = useRouter();\n  const {\n    0: showAllFish,\n    1: setShowAllFish\n  } = useState(false);\n  const {\n    0: tab,\n    1: setTab\n  } = useState(0);\n  const locale = router.locale;\n  const stops = getStops(selectedRoute);\n  const next = calculateVoyages(now, 1, [selectedRoute])[0].time;\n\n  const handleToggleShowAllFish = () => {\n    setShowAllFish(!showAllFish);\n  };\n\n  const handleChangeTab = (_, value) => {\n    setTab(value);\n  };\n\n  return /*#__PURE__*/_jsx(Section, {\n    title: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        lg: 8,\n        children: [translate(fishingSpots[maps.STOP_MAP[selectedRoute[0]]], 'name', locale), /*#__PURE__*/_jsx(\"span\", {\n          className: classes.headerTime,\n          children: maps.TIME_MAP[selectedRoute[1]]\n        }), /*#__PURE__*/_jsx(Typography, {\n          display: \"inline\",\n          className: classes.headerSub,\n          children: timeUntil(now, next, true)\n        })]\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        lg: 4,\n        align: \"right\",\n        children: /*#__PURE__*/_jsx(FormControlLabel, {\n          control: /*#__PURE__*/_jsx(Checkbox, {\n            className: classes.showAllFishCheckbox,\n            checked: showAllFish,\n            onChange: handleToggleShowAllFish,\n            color: \"primary\"\n          }),\n          label: \"Show all fish\"\n        })\n      })]\n    }),\n    children: (() => {\n      if (showAllFish) {\n        return /*#__PURE__*/_jsxs(Card, {\n          variant: \"outlined\",\n          children: [/*#__PURE__*/_jsx(Tabs, {\n            variant: \"fullWidth\",\n            value: tab,\n            onChange: handleChangeTab,\n            children: stops.map((stop, index) => /*#__PURE__*/_jsx(Tab, {\n              label: /*#__PURE__*/_jsxs(_Fragment, {\n                children: [index + 1, \". \", translate(fishingSpots[maps.STOP_MAP[stop[0]]], 'name', locale), \" \", maps.TIME_MAP[stop[1]]]\n              })\n            }, stop))\n          }), stops.map((stop, index) => /*#__PURE__*/_jsx(FishPanel, {\n            tab: tab,\n            index: index,\n            stop: stop,\n            checklist: checklist,\n            setChecklist: setChecklist\n          }, stop))]\n        });\n      } else {\n        return /*#__PURE__*/_jsx(RouteCardContainer, {\n          children: stops.map((stop, index) => /*#__PURE__*/_jsx(RouteCard, {\n            index: index,\n            stop: stop,\n            children: /*#__PURE__*/_jsx(CardContent, {\n              children: /*#__PURE__*/_jsx(BaitList, {\n                baitGroups: [maps.SPECTRAL_FISH_MAP[stop[0]], maps.GREEN_FISH_MAP[stop[0]], getBlueFish(selectedRoute)[index]].filter(x => x).map(fishId => ({\n                  header: translate(fishes[fishId], 'name', locale),\n                  baitGroupProps: getBaitGroup(fishId)\n                }))\n              })\n            })\n          }, stop))\n        });\n      }\n    })()\n  });\n};\n\nexport default RouteInformation;","map":null,"metadata":{},"sourceType":"module"}