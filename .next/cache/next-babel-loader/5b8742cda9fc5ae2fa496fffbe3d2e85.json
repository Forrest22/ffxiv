{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useRouter } from 'next/router';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport cn from 'classnames';\nimport * as REGIONS from './regions';\nimport getEorzeanTime from './get-eorzean-time';\nimport calculateWeathers from './calculate-weathers';\nimport { paddedZero } from '../utils';\nimport Typography from '@material-ui/core/Typography';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport WeatherIcon from './WeatherIcon';\nvar REGIONS_LIST = REGIONS.REGIONS_LIST;\nvar ZONES_LIST = REGIONS_LIST.map(function (region) {\n  return region.zones;\n}).flat();\nvar WEATHER_CELL_WIDTH = 75;\nvar useStyles = makeStyles(function (theme) {\n  return {\n    selectRegion: {\n      marginBottom: theme.spacing(2)\n    },\n    weatherTable: {\n      ':not(:last-child) > &': {\n        marginBottom: theme.spacing(4)\n      }\n    },\n    weatherTime: {\n      textAlign: 'center',\n      paddingLeft: theme.spacing(0.5),\n      paddingRight: theme.spacing(0.5),\n      '&:last-child': {\n        paddingRight: theme.spacing(1),\n        width: WEATHER_CELL_WIDTH + theme.spacing(1.5)\n      }\n    },\n    regionCell: {\n      minWidth: 200\n    },\n    weatherCell: {\n      width: WEATHER_CELL_WIDTH + theme.spacing(1),\n      paddingLeft: theme.spacing(0.5),\n      paddingRight: theme.spacing(0.5),\n      textAlign: 'center',\n      verticalAlign: 'top',\n      lineHeight: 1,\n      '& span': {\n        display: 'inline-block',\n        width: WEATHER_CELL_WIDTH,\n        lineHeight: 1.1\n      },\n      '&:last-child': {\n        paddingRight: theme.spacing(1),\n        width: WEATHER_CELL_WIDTH + theme.spacing(1.5)\n      }\n    },\n    current: {\n      backgroundColor: theme.palette.action.hover,\n      'th&': {\n        fontWeight: 'bold'\n      }\n    }\n  };\n});\nexport default function WeatherTable(props) {\n  var now = props.now;\n\n  var _useState = useState(null),\n      filter = _useState[0],\n      setFilter = _useState[1];\n\n  var classes = useStyles();\n  var router = useRouter();\n  var firstRender = useRef(false);\n  var theme = useTheme();\n  var sm = useMediaQuery(theme.breakpoints.up('sm'));\n  var md = useMediaQuery(theme.breakpoints.up('md'));\n  var lg = useMediaQuery(theme.breakpoints.up('lg'));\n  useEffect(function () {\n    var queryFilter = REGIONS_LIST.find(function (region) {\n      return region.query === router.query.filter;\n    }) ? router.query.filter : 'none';\n\n    if (!firstRender.current && now || filter !== queryFilter) {\n      firstRender.current = true;\n      setFilter(queryFilter);\n    }\n  });\n\n  var handleSelectFilter = function handleSelectFilter(event) {\n    var filter = event.target.value;\n    router.push({\n      pathname: router.pathname,\n      query: filter === 'none' ? null : {\n        filter: filter\n      }\n    });\n  };\n\n  if (now) {\n    var weathersCount = lg ? 9 : md ? 7 : sm ? 6 : 3;\n    var weathers = calculateWeathers(ZONES_LIST, weathersCount, now);\n    var eorzeanTime = getEorzeanTime(now);\n    var timeChunk = Math.floor(eorzeanTime.getUTCHours() / 8) * 8;\n    var filteredRegion = filter && filter !== 'none' && REGIONS_LIST.find(function (region) {\n      return region.query === filter;\n    });\n    return __jsx(\"section\", null, __jsx(Typography, {\n      variant: \"h5\",\n      gutterBottom: true\n    }, \"Upcoming Weather\"), __jsx(FormControl, {\n      variant: \"filled\",\n      fullWidth: true,\n      margin: \"dense\",\n      className: classes.selectRegion\n    }, __jsx(InputLabel, null, \"Select a region\"), __jsx(Select, {\n      onChange: handleSelectFilter,\n      value: filter || 'none'\n    }, __jsx(MenuItem, {\n      value: \"none\"\n    }, \"Show all regions\"), REGIONS_LIST.map(function (region) {\n      return __jsx(MenuItem, {\n        key: region.query,\n        value: region.query\n      }, region.name);\n    }))), __jsx(NoSsr, null, (filteredRegion ? [filteredRegion] : REGIONS_LIST).map(function (region) {\n      return __jsx(React.Fragment, {\n        key: region.name\n      }, __jsx(Typography, {\n        variant: \"h6\",\n        gutterBottom: true\n      }, region.name), __jsx(TableContainer, null, __jsx(Table, {\n        size: \"small\",\n        className: classes.weatherTable\n      }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null), Array(weathersCount + 1).fill().map(function (_, index) {\n        return __jsx(TableCell, {\n          key: index,\n          className: cn(classes.weatherTime, index === 1 && classes.current)\n        }, paddedZero((24 + timeChunk + 8 * (index - 1)) % 24) + ':00');\n      }))), __jsx(TableBody, null, region.zones.map(function (zone) {\n        return __jsx(TableRow, {\n          key: zone,\n          hover: true\n        }, __jsx(TableCell, {\n          component: \"th\",\n          scope: \"row\",\n          className: classes.regionCell\n        }, weathers[zone].zoneName), weathers[zone].zoneWeathers.map(function (weather, index) {\n          return __jsx(TableCell, {\n            key: index,\n            className: cn(classes.weatherCell, index === 1 && classes.current)\n          }, __jsx(WeatherIcon, {\n            name: weather\n          }));\n        }));\n      })))));\n    })));\n  } else {\n    return __jsx(\"section\", null, __jsx(FormControl, {\n      variant: \"filled\",\n      fullWidth: true\n    }, __jsx(InputLabel, null, \"Select a region\"), __jsx(Select, {\n      onChange: handleSelectFilter,\n      value: filter || 'none'\n    }, __jsx(MenuItem, {\n      value: \"none\"\n    }, \"Show all regions\"), REGIONS_LIST.map(function (region) {\n      return __jsx(MenuItem, {\n        key: region.query,\n        value: region.query\n      }, region.name);\n    }))), __jsx(NoSsr, null));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}