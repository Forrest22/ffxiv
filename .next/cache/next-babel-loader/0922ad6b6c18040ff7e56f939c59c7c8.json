{"ast":null,"code":"import { timeUntil as genericTimeUntil } from '../utils';\nimport { fishes, baits } from './gists/data/ocean-fish-data.json';\nimport spreadsheet from './gists/data/spreadsheet-data.json';\nimport biteTimes from './gists/data/ocean-fish-bite-times.json';\nimport * as maps from './maps';\n\nfunction memoize(func) {\n  const cache = {};\n  return arg => {\n    const key = String(arg);\n    return cache[key] !== undefined ? cache[key] : cache[key] = func(arg);\n  };\n}\n\nexport function timeUntil(now, then, full) {\n  const diff = then.getTime() - now.getTime();\n\n  if (diff < -900000) {\n    return 'en route';\n  } else if (diff < 0) {\n    return 'boarding now';\n  } else {\n    return genericTimeUntil(now, then, full);\n  }\n}\nexport function getStops(destinationCode) {\n  const stops = maps.STOPS_SEQUENCE[destinationCode[0]];\n  const times = maps.TIMES_SEQUENCE[destinationCode[1]];\n  return [stops[0] + times[0], stops[1] + times[1], stops[2] + times[2]];\n}\nexport function getBlueFish(destinationCode) {\n  const stopTimes = getStops(destinationCode);\n  return stopTimes.map(destinationStopTime => maps.BLUE_FISH_MAP[destinationStopTime[0]]).map((fishId, index) => {\n    const time = stopTimes[index][1];\n    const fishInfo = getFishInfo(fishes[fishId].name_en);\n    return fishInfo.time && fishInfo.time.indexOf(time) > -1 ? fishId : null;\n  });\n}\nexport const getFishInfo = memoize(fishName => {\n  // @ts-ignore\n  const fishInfo = Object.values(spreadsheet).flat().find(fishInfo => fishInfo.name === fishName);\n  if (!fishInfo) return null;\n  const biteTime = biteTimes[getFish(fishName).id];\n\n  if (biteTimes) {\n    fishInfo.timer = biteTime;\n  }\n\n  return fishInfo;\n});\nexport const getFish = memoize(fishName => Object.values(fishes).find(fish => fish.name_en === fishName) || null);\nexport const getBait = memoize(baitName => Object.values(baits).find(bait => bait.name_en === baitName) || null);\nexport const getBaitChain = memoize(function _getBaitChain(fishId) {\n  const fishInfo = getFishInfo(fishes[fishId].name_en);\n  return fishInfo.bait ? [getBait(fishInfo.bait), {\n    id: fishId,\n    tug: fishInfo.tug,\n    doubleHook: fishInfo.doubleHook\n  }] : [..._getBaitChain(getFish(fishInfo.mooch).id), {\n    id: fishId,\n    tug: fishInfo.tug,\n    doubleHook: fishInfo.doubleHook\n  }];\n});\nexport const getBaitGroup = memoize(fishId => {\n  const fishInfo = getFishInfo(fishes[fishId].name_en);\n  return {\n    bait: getBaitChain(fishId),\n    intuitionFishes: fishInfo.intuition && fishInfo.intuition.map(intuitionFish => ({\n      bait: getBaitChain(getFish(intuitionFish.name).id),\n      count: intuitionFish.count\n    }))\n  };\n});\nexport function translate(obj, attr, locale = 'en') {\n  return obj[`${attr}_${locale}`] || obj[attr] || `{${obj.name || obj.id}.${attr}}`;\n}","map":null,"metadata":{},"sourceType":"module"}