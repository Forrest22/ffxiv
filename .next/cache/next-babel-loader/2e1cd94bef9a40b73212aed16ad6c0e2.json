{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Section from '../Section';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Button from '@material-ui/core/Button';\nimport CalculatorCell from './CalculatorCell';\nimport calculateProbabilities from './calculate-probabilities';\nvar PROB_1_LINES = 6688 / 11440;\nvar PROB_2_LINES = 1208 / 11440;\nvar PROB_3_LINES = 24 / 11440;\nvar useStyles = makeStyles(function (theme) {\n  return {\n    gridShrink: _defineProperty({\n      textAlign: 'center'\n    }, theme.breakpoints.up('md'), {\n      flex: '0 0 auto'\n    }),\n    gridGrow: _defineProperty({}, theme.breakpoints.up('md'), {\n      flex: '1 1 0px'\n    }),\n    cellsContainer: {\n      display: 'inline-block',\n      borderCollapse: 'collapse',\n      borderSpacing: 0,\n      border: theme.palette.type === 'dark' ? '1px solid gray' : '1px solid black',\n      '& td': {\n        padding: 0,\n        lineHeight: 0\n      }\n    },\n    probabilities: {\n      marginBottom: theme.spacing(2),\n      '& table': {\n        width: 'initial',\n        '& thead, & tbody': {\n          background: 'none'\n        },\n        '& th': {\n          padding: theme.spacing(1, 2)\n        },\n        '& td': {\n          padding: theme.spacing(1, 2),\n          border: 0\n        }\n      }\n    }\n  };\n});\n\nfunction toPercent(val) {\n  return __jsx(Typography, null, (val * 100).toFixed(1) + '%');\n}\n\nfunction toDeviationPercent(val) {\n  var string = (val >= 0 ? '+' : '') + (val * 100).toFixed(1) + '%';\n  var color = val > 0 ? 'green' : val < 0 ? 'red' : undefined;\n  return __jsx(Typography, {\n    style: {\n      color: color\n    }\n  }, string);\n}\n\nvar Calculator = function Calculator() {\n  var _useState = useState(Array(16).fill(false)),\n      board = _useState[0],\n      setBoard = _useState[1];\n\n  var classes = useStyles();\n\n  var _calculateProbabiliti = calculateProbabilities(board),\n      lines1 = _calculateProbabiliti.lines1,\n      lines2 = _calculateProbabiliti.lines2,\n      lines3 = _calculateProbabiliti.lines3,\n      total = _calculateProbabiliti.total;\n\n  var filledCells = board.filter(function (x) {\n    return x;\n  }).length;\n\n  var toggleCell = function toggleCell(index) {\n    var newBoard = board.slice();\n    newBoard[index] = !board[index];\n    setBoard(newBoard);\n  };\n\n  var handleClickReset = function handleClickReset(event) {\n    setBoard(Array(16).fill(false));\n  };\n\n  return __jsx(Section, null, __jsx(Grid, {\n    container: true,\n    spacing: 4\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.gridShrink\n  }, __jsx(TableContainer, null, __jsx(\"table\", {\n    className: classes.cellsContainer\n  }, __jsx(\"tbody\", null, [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]].map(function (row, rowIndex) {\n    return __jsx(\"tr\", {\n      key: rowIndex\n    }, row.map(function (cellIndex) {\n      return __jsx(\"td\", {\n        key: cellIndex\n      }, __jsx(CalculatorCell, {\n        selected: board[cellIndex],\n        onSelect: toggleCell.bind(null, cellIndex)\n      }));\n    }));\n  }))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.gridGrow\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    paragraph: true\n  }, filledCells, \" / 9\"), filledCells <= 9 ? __jsx(Typography, {\n    paragraph: true\n  }, \"Select up to 9 stickers.\") : __jsx(Typography, {\n    paragraph: true\n  }, \"Too many cells have been filled!\"), __jsx(TableContainer, {\n    className: classes.probabilities\n  }, __jsx(Table, null, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null, \"Lines\"), __jsx(TableCell, null, \"Chance\"), __jsx(TableCell, null, \"Deviation\"))), __jsx(TableBody, null, __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, __jsx(Typography, null, \"1+\")), __jsx(TableCell, {\n    align: \"right\"\n  }, toPercent(lines1 / total)), __jsx(TableCell, {\n    align: \"right\"\n  }, toDeviationPercent(lines1 / total - PROB_1_LINES))), __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, __jsx(Typography, null, \"2+\")), __jsx(TableCell, {\n    align: \"right\"\n  }, toPercent(lines2 / total)), __jsx(TableCell, {\n    align: \"right\"\n  }, toDeviationPercent(lines2 / total - PROB_2_LINES))), __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, __jsx(Typography, null, \"3\")), __jsx(TableCell, {\n    align: \"right\"\n  }, toPercent(lines3 / total)), __jsx(TableCell, {\n    align: \"right\"\n  }, toDeviationPercent(lines3 / total - PROB_3_LINES)))))), __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: handleClickReset\n  }, \"Reset\"))));\n};\n\nexport default Calculator;","map":null,"metadata":{},"sourceType":"module"}