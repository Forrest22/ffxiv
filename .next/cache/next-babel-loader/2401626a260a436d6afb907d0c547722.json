{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport cn from 'classnames';\nconst useStyles = makeStyles(theme => ({\n  tug: {\n    display: 'inline-block',\n    width: '1.2em',\n    height: '1.2em',\n    borderRadius: '0.2em',\n    fontWeight: 'bold',\n    lineHeight: '1.2em',\n    textAlign: 'center'\n  },\n  sup: {\n    position: 'absolute',\n    left: '2.75em',\n    top: '-0.25em',\n    fontSize: '0.9em'\n  },\n  light: {\n    backgroundColor: theme.palette.type === 'dark' ? '#078203' : '#aaffaa'\n  },\n  medium: {\n    backgroundColor: theme.palette.type === 'dark' ? '#195ecf' : '#aaaaff'\n  },\n  heavy: {\n    backgroundColor: theme.palette.type === 'dark' ? '#9e0000' : '#ffaaaa'\n  }\n}));\n\nconst Tug = (_ref) => {\n  let {\n    sup,\n    strength,\n    className\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"sup\", \"strength\", \"className\"]);\n\n  const classes = useStyles();\n\n  switch (strength) {\n    case 1:\n      return /*#__PURE__*/_jsx(\"span\", _objectSpread(_objectSpread({\n        className: cn(classes.tug, sup && classes.sup, classes.light, className),\n        title: \"Light tug\"\n      }, props), {}, {\n        children: \"!\"\n      }));\n\n    case 2:\n      return /*#__PURE__*/_jsx(\"span\", _objectSpread(_objectSpread({\n        className: cn(classes.tug, sup && classes.sup, classes.medium, className),\n        title: \"Medium tug\"\n      }, props), {}, {\n        children: \"!!\"\n      }));\n\n    case 3:\n      return /*#__PURE__*/_jsx(\"span\", _objectSpread(_objectSpread({\n        className: cn(classes.tug, sup && classes.sup, classes.heavy, className),\n        title: \"Heavy tug\"\n      }, props), {}, {\n        children: \"!!!\"\n      }));\n\n    default:\n      return null;\n  }\n};\n\nTug.Light = () => /*#__PURE__*/_jsx(Tug, {\n  strength: 1\n});\n\nTug.Medium = () => /*#__PURE__*/_jsx(Tug, {\n  strength: 2\n});\n\nTug.Heavy = () => /*#__PURE__*/_jsx(Tug, {\n  strength: 3\n});\n\nexport default Tug;","map":null,"metadata":{},"sourceType":"module"}