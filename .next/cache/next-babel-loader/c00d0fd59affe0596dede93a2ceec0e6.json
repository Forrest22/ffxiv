{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { useRouter } from 'next/router';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { getSeed, getNextWeathers, getZoneWeather, translate } from './weather';\nimport { paddedZero, formatTime } from '../utils';\nimport Section from '../Section';\nimport Typography from '@material-ui/core/Typography';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport WeatherIcon from './WeatherIcon';\nimport { Region } from './weather/consts';\nimport PARTITION from './weather/regions-partition';\nimport i18n from '../i18n';\nvar REGIONS = [Region.LaNoscea, Region.TheBlackShroud, Region.Thanalan, Region.IshgardAndSurroundingAreas, Region.GyrAbania, Region.TheFarEast, Region.Norvrandt, Region.Others];\nvar WEATHER_CELL_WIDTH = 75;\nvar useStyles = makeStyles(function (theme) {\n  return {\n    options: {\n      marginBottom: theme.spacing(2)\n    },\n    weatherTable: {\n      overflow: 'hidden',\n      '& thead th': {\n        fontWeight: 'normal',\n        '&$current': {\n          fontWeight: 'bold'\n        }\n      },\n      ':not(:last-child) > &': {\n        marginBottom: theme.spacing(4)\n      }\n    },\n    weatherTime: {\n      textAlign: 'center',\n      paddingLeft: theme.spacing(0.5),\n      paddingRight: theme.spacing(0.5),\n      '&:last-child': {\n        paddingRight: theme.spacing(1),\n        width: WEATHER_CELL_WIDTH + theme.spacing(1.5)\n      }\n    },\n    regionCell: {\n      minWidth: 200\n    },\n    weatherCell: {\n      width: WEATHER_CELL_WIDTH + theme.spacing(1),\n      paddingLeft: theme.spacing(0.5),\n      paddingRight: theme.spacing(0.5),\n      textAlign: 'center',\n      verticalAlign: 'top',\n      lineHeight: 1,\n      '& span': {\n        display: 'inline-block',\n        width: WEATHER_CELL_WIDTH,\n        lineHeight: 1.1\n      },\n      '&:last-child': {\n        paddingRight: theme.spacing(1),\n        width: WEATHER_CELL_WIDTH + theme.spacing(1.5)\n      }\n    },\n    current: {\n      position: 'relative',\n      backgroundColor: theme.palette.action.hover\n    }\n  };\n});\n\nvar UpcomingWeather = function UpcomingWeather(_ref) {\n  var now = _ref.now,\n      i18n = _ref.i18n;\n  var classes = useStyles();\n  var router = useRouter();\n\n  var _useState = useState(null),\n      filter = _useState[0],\n      setFilter = _useState[1];\n\n  var _useState2 = useState(true),\n      showLabels = _useState2[0],\n      setShowLabels = _useState2[1];\n\n  var _useState3 = useState(false),\n      showLocalTime = _useState3[0],\n      setShowLocalTime = _useState3[1];\n\n  var _useState4 = useState(false),\n      showWeatherChance = _useState4[0],\n      setShowWeatherChance = _useState4[1];\n\n  var locale = i18n.language;\n  useEffect(function () {\n    var queryFilter = String(router.query.filter);\n    setFilter(Object.values(Region).includes(queryFilter) ? queryFilter : null);\n  }, [router.query.filter]);\n\n  var handleSelectFilter = function handleSelectFilter(event) {\n    var filter = event.target.value === 'none' ? null : event.target.value;\n    router.push({\n      pathname: router.pathname,\n      query: filter && {\n        filter: filter\n      }\n    });\n  };\n\n  var handleToggleLabels = function handleToggleLabels() {\n    setShowLabels(!showLabels);\n  };\n\n  var handleToggleLocalTime = function handleToggleLocalTime() {\n    setShowLocalTime(!showLocalTime);\n  };\n\n  var handleToggleWeatherChance = function handleToggleWeatherChance() {\n    setShowWeatherChance(!showWeatherChance);\n  };\n\n  return /*#__PURE__*/_jsxs(Section, {\n    title: \"Upcoming Weather\",\n    children: [/*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 1,\n      className: classes.options,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxs(FormControl, {\n          variant: \"filled\",\n          fullWidth: true,\n          margin: \"dense\",\n          children: [/*#__PURE__*/_jsx(InputLabel, {\n            children: \"Select a region\"\n          }), /*#__PURE__*/_jsxs(Select, {\n            onChange: handleSelectFilter,\n            value: filter || 'none',\n            children: [/*#__PURE__*/_jsx(MenuItem, {\n              value: \"none\",\n              children: \"Show all regions\"\n            }), Object.values(Region).map(function (region) {\n              return /*#__PURE__*/_jsx(MenuItem, {\n                value: region,\n                children: translate('region', region, locale)\n              }, region);\n            })]\n          })]\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 4,\n        children: /*#__PURE__*/_jsx(FormControlLabel, {\n          control: /*#__PURE__*/_jsx(Checkbox, {\n            checked: showLabels,\n            onChange: handleToggleLabels,\n            color: \"primary\"\n          }),\n          label: \"Show Labels\"\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 4,\n        children: /*#__PURE__*/_jsx(FormControlLabel, {\n          control: /*#__PURE__*/_jsx(Checkbox, {\n            checked: showLocalTime,\n            onChange: handleToggleLocalTime,\n            color: \"primary\"\n          }),\n          label: \"Show local times\"\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 4,\n        children: /*#__PURE__*/_jsx(FormControlLabel, {\n          control: /*#__PURE__*/_jsx(Checkbox, {\n            checked: showWeatherChance,\n            onChange: handleToggleWeatherChance,\n            color: \"primary\"\n          }),\n          label: /*#__PURE__*/_jsxs(_Fragment, {\n            children: [\"Show \", /*#__PURE__*/_jsx(\"code\", {\n              children: \"weatherChance\"\n            })]\n          })\n        })\n      })]\n    }), /*#__PURE__*/_jsx(NoSsr, {\n      children: function () {\n        if (!now) return null;\n        var currentSeed = getSeed();\n        var hashes = getNextWeathers(currentSeed - 1, 10);\n        var sections = (filter ? [filter] : REGIONS).map(function (region) {\n          return {\n            region: region,\n            zones: PARTITION[region]\n          };\n        });\n        return sections.map(function (_ref2) {\n          var region = _ref2.region,\n              zones = _ref2.zones;\n          return /*#__PURE__*/_jsxs(Section, {\n            children: [/*#__PURE__*/_jsx(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: translate('region', region, locale)\n            }), /*#__PURE__*/_jsx(TableContainer, {\n              children: /*#__PURE__*/_jsxs(Table, {\n                size: \"small\",\n                className: classes.weatherTable,\n                children: [/*#__PURE__*/_jsx(TableHead, {\n                  children: /*#__PURE__*/_jsxs(TableRow, {\n                    children: [/*#__PURE__*/_jsx(TableCell, {}), hashes.map(function (hash, index) {\n                      var eorzeanTime = new Date((currentSeed - 1 + index) * 28800000);\n                      var localTime = new Date(eorzeanTime.getTime() / (1440 / 70));\n                      return /*#__PURE__*/_jsxs(TableCell, {\n                        className: clsx(classes.weatherTime, index === 1 && classes.current),\n                        children: [showLocalTime ? index === 1 ? /*#__PURE__*/_jsxs(_Fragment, {\n                          children: [formatTime(new Date(now.getTime() * (1440 / 70))), \" ET\", /*#__PURE__*/_jsx(\"br\", {}), formatTime(now), \" LT\"]\n                        }) : /*#__PURE__*/_jsxs(_Fragment, {\n                          children: [formatTime(eorzeanTime), \" ET\", /*#__PURE__*/_jsx(\"br\", {}), formatTime(localTime), \" LT\"]\n                        }) : index === 1 ? formatTime(new Date(now.getTime() * (1440 / 70))) : formatTime(eorzeanTime), showWeatherChance && /*#__PURE__*/_jsxs(_Fragment, {\n                          children: [/*#__PURE__*/_jsx(\"br\", {}), paddedZero(hash)]\n                        })]\n                      }, index);\n                    })]\n                  })\n                }), /*#__PURE__*/_jsx(TableBody, {\n                  children: zones.map(function (zone) {\n                    return /*#__PURE__*/_jsxs(TableRow, {\n                      hover: true,\n                      children: [/*#__PURE__*/_jsx(TableCell, {\n                        component: \"th\",\n                        scope: \"row\",\n                        className: classes.regionCell,\n                        children: /*#__PURE__*/_jsx(Typography, {\n                          children: translate('zone', zone, locale)\n                        })\n                      }), hashes.map(function (hash, index) {\n                        return /*#__PURE__*/_jsx(TableCell, {\n                          className: clsx(classes.weatherCell, index === 1 && classes.current),\n                          children: /*#__PURE__*/_jsx(WeatherIcon, {\n                            weather: getZoneWeather(zone, hash),\n                            showLabel: showLabels\n                          })\n                        }, index);\n                      })]\n                    }, zone);\n                  })\n                })]\n              })\n            })]\n          }, region);\n        });\n      }()\n    })]\n  });\n};\n\nexport default i18n.withTranslation('skywatcher')(UpcomingWeather);","map":null,"metadata":{},"sourceType":"module"}