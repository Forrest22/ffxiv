{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport moment from 'moment';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EorzeaWeather from 'eorzea-weather';\nimport getPossibleWeathers from './get-possible-weathers';\nimport forecastWeather from './forecast-weather';\nimport { REGIONS_LIST } from './regions';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport WeatherIcon from './WeatherIcon';\nconst ZONES = [];\n\nfor (const region of REGIONS_LIST) {\n  for (const zone of region.zones) {\n    ZONES.push({\n      zoneId: zone,\n      region: region.name\n    });\n  }\n}\n\nconst WEATHER_CELL_WIDTH = 75;\nconst translateZone = EorzeaWeather.prototype.translate.bind({\n  locale: 'en'\n});\n\nfunction displayBell(bell) {\n  return bell > 9 ? bell + ':00' : '0' + bell + ':00';\n}\n\nconst useStyles = makeStyles(theme => ({\n  transitionWeather: {\n    [theme.breakpoints.down('sm')]: {\n      marginBottom: theme.spacing(2)\n    }\n  },\n  transitionArrow: {\n    display: 'block',\n    margin: `${theme.spacing(0.5)}px auto`,\n    fontSize: '2em',\n    [theme.breakpoints.down('sm')]: {\n      display: 'none'\n    }\n  },\n  forecastCell: {\n    whiteSpace: 'nowrap'\n  },\n  bellCell: {\n    width: 50,\n    paddingLeft: theme.spacing(0.5),\n    paddingRight: theme.spacing(0.5),\n    textAlign: 'right'\n  },\n  weatherCell: {\n    width: WEATHER_CELL_WIDTH + theme.spacing(1),\n    paddingLeft: theme.spacing(0.5),\n    paddingRight: theme.spacing(0.5),\n    textAlign: 'center',\n    verticalAlign: 'top',\n    lineHeight: 1,\n    '& span': {\n      display: 'inline-block',\n      width: WEATHER_CELL_WIDTH,\n      lineHeight: 1.1\n    },\n    '&:last-child': {\n      paddingRight: theme.spacing(1),\n      width: WEATHER_CELL_WIDTH + theme.spacing(1.5)\n    }\n  },\n  transitionCell: {\n    width: 50,\n    textAlign: 'center'\n  }\n}));\nexport default function WeatherForecaster(props) {\n  const {\n    0: zone,\n    1: setZone\n  } = useState(null);\n  const {\n    0: transitionWeather,\n    1: setTransitionWeather\n  } = useState('none');\n  const {\n    0: targetWeather,\n    1: setTargetWeather\n  } = useState('none');\n  const {\n    0: times,\n    1: setTimes\n  } = useState({\n    0: true,\n    8: true,\n    16: true\n  });\n  const classes = useStyles();\n  const possibleWeathers = zone && getPossibleWeathers(zone.zoneId);\n  const forecast = zone && (times[0] || times[8] || times[16]) && forecastWeather(zone.zoneId, new Date(), transitionWeather, targetWeather, times);\n\n  const handleSelectZone = (event, newZone) => {\n    setZone(newZone);\n    setTransitionWeather('none');\n    setTargetWeather('none');\n  };\n\n  const handleSelectTimes = timeSlot => {\n    setTimes(_objectSpread(_objectSpread({}, times), {}, {\n      [timeSlot]: !times[timeSlot]\n    }));\n  };\n\n  return __jsx(\"section\", null, __jsx(Typography, {\n    variant: \"h5\",\n    gutterBottom: true\n  }, \"Forecaster\"), __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 4\n  }, __jsx(Autocomplete, {\n    options: ZONES,\n    groupBy: option => option.region,\n    getOptionLabel: option => translateZone('zones.' + option.zoneId),\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: \"Select a zone\"\n    })),\n    value: zone,\n    getOptionSelected: (opt1, opt2) => opt1.zoneId === opt2.zoneId,\n    onChange: handleSelectZone\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 4\n  }, __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.transitionWeather\n  }, __jsx(InputLabel, null, \"Transition from\"), __jsx(Select, {\n    value: transitionWeather,\n    disabled: !zone,\n    onChange: event => {\n      setTransitionWeather(event.target.value);\n    }\n  }, __jsx(MenuItem, {\n    value: \"none\"\n  }, possibleWeathers ? 'Any weather' : 'Select a zone first'), possibleWeathers && possibleWeathers.map(weather => __jsx(MenuItem, {\n    key: weather,\n    value: weather\n  }, weather)))), __jsx(ArrowDownwardIcon, {\n    className: classes.transitionArrow\n  }), __jsx(FormControl, {\n    fullWidth: true\n  }, __jsx(InputLabel, null, \"Target weather\"), __jsx(Select, {\n    value: targetWeather,\n    disabled: !zone,\n    onChange: event => {\n      setTargetWeather(event.target.value);\n    }\n  }, __jsx(MenuItem, {\n    value: \"none\"\n  }, possibleWeathers ? 'Any weather' : 'Select a zone first'), possibleWeathers && possibleWeathers.map(weather => __jsx(MenuItem, {\n    key: weather,\n    value: weather\n  }, weather))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 4\n  }, __jsx(FormControl, {\n    component: \"fieldset\"\n  }, __jsx(FormLabel, {\n    component: \"legend\"\n  }, \"Select times\"), __jsx(FormGroup, null, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: times[0],\n      onChange: handleSelectTimes.bind(null, 0)\n    }),\n    label: \"00:00\"\n  }), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: times[8],\n      onChange: handleSelectTimes.bind(null, 8)\n    }),\n    label: \"08:00\"\n  }), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: times[16],\n      onChange: handleSelectTimes.bind(null, 16)\n    }),\n    label: \"16:00\"\n  })))), forecast && __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    gutterBottom: true\n  }, \"Next 10 matches\"), __jsx(TableContainer, null, __jsx(Table, {\n    size: \"small\",\n    className: classes.weatherTable\n  }, __jsx(TableBody, null, forecast.map(({\n    date,\n    bell,\n    previousWeather,\n    currentWeather\n  }, index) => __jsx(TableRow, {\n    key: index,\n    hover: true\n  }, __jsx(TableCell, {\n    className: classes.forecastCell\n  }, moment(date).format('MM/DD'), \" at \", moment(date).format('HH:mm'), \" -  \", moment.duration(moment(date).diff()).humanize(true)), __jsx(TableCell, {\n    className: classes.bellCell\n  }, displayBell((bell + 16) % 24)), __jsx(TableCell, {\n    className: classes.weatherCell\n  }, __jsx(WeatherIcon, {\n    name: previousWeather\n  })), __jsx(TableCell, {\n    className: classes.transitionCell\n  }, __jsx(ArrowForwardIcon, null)), __jsx(TableCell, {\n    className: classes.bellCell\n  }, displayBell(bell)), __jsx(TableCell, {\n    className: classes.weatherCell\n  }, __jsx(WeatherIcon, {\n    name: currentWeather\n  }))))))))));\n}","map":null,"metadata":{},"sourceType":"module"}