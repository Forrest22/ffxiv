{"ast":null,"code":"import { timeUntil as genericTimeUntil } from '../utils';\nimport { fishingSpots, fishes } from './gists/data';\nimport * as maps from './maps';\n\nfunction memoize(func) {\n  const cache = {};\n  return arg => {\n    const key = String(arg);\n    return cache[key] !== undefined ? cache[key] : cache[key] = func(arg);\n  };\n}\n\nexport function timeUntil(now, then, options) {\n  const diff = then.getTime() - now.getTime();\n\n  if (diff < -900000) {\n    return options.t('en-route');\n  } else if (diff < 0) {\n    return options.t('boarding-now');\n  } else {\n    return genericTimeUntil(now, then, {\n      full: options.full,\n      locale: options.locale\n    });\n  }\n}\nexport function getStops(destinationCode) {\n  const stops = maps.STOPS_SEQUENCE[destinationCode[0]];\n  const times = maps.TIMES_SEQUENCE[destinationCode[1]];\n  return [stops[0] + times[0], stops[1] + times[1], stops[2] + times[2]];\n}\nexport function getTimeSensitiveFish(destinationCode) {\n  const stopTimes = getStops(destinationCode);\n  return stopTimes.map((destinationStopTime, index) => {\n    const fishingSpotId = maps.STOP_MAP[destinationStopTime[0]];\n    const time = stopTimes[index][1];\n    return fishingSpots[fishingSpotId + 1].fishes.filter(fishId => {\n      const fishInfo = fishes[fishId].spreadsheet_data;\n      return fishInfo.time && fishInfo.time !== 'DSN' && fishInfo.time.indexOf(time) > -1;\n    });\n  });\n}\nexport function getPointsFish(destinationCode) {\n  const stopTimes = getStops(destinationCode);\n  return stopTimes.map((destinationStopTime, index) => {\n    const fishingSpotId = maps.STOP_MAP[destinationStopTime[0]];\n    const time = stopTimes[index][1];\n    let highestPointsFish = [];\n    const pointsFish = fishingSpots[fishingSpotId + 1].fishes.filter(fishId => {\n      const fishInfo = fishes[fishId].spreadsheet_data;\n\n      if (fishInfo.time && fishInfo.time.indexOf(time) === -1) {\n        return false;\n      } else if (fishInfo.intuition) {\n        return false;\n      } else if (!fishInfo.points || !fishInfo.double_hook) {\n        return false;\n      } else {\n        const points = (Array.isArray(fishInfo.double_hook) ? fishInfo.double_hook[1] : fishInfo.double_hook) * fishInfo.points;\n\n        if (highestPointsFish.length === 0) {\n          highestPointsFish.push({\n            fishId,\n            points\n          });\n        } else if (points === highestPointsFish[0].points) {\n          highestPointsFish.push({\n            fishId,\n            points\n          });\n        } else if (points > highestPointsFish[0].points) {\n          highestPointsFish = [{\n            fishId,\n            points\n          }];\n        }\n\n        return points >= 400;\n      }\n    });\n    return pointsFish.length > 0 ? pointsFish : highestPointsFish.map(({\n      fishId\n    }) => fishId);\n  });\n}\nexport function getBlueFish(destinationCode) {\n  const stopTimes = getStops(destinationCode);\n  return stopTimes.map(destinationStopTime => maps.BLUE_FISH_MAP[destinationStopTime[0]]).map((fishId, index) => {\n    const time = stopTimes[index][1];\n    const fishInfo = fishes[fishId].spreadsheet_data;\n    return fishInfo.time && fishInfo.time.indexOf(time) > -1 ? fishId : null;\n  });\n}\nexport const getBaitChain = memoize(function _getBaitChain(fishId) {\n  const fishInfo = fishes[fishId].spreadsheet_data;\n  return fishInfo.bait ? [{\n    id: fishInfo.bait\n  }, {\n    id: fishId,\n    tug: fishInfo.tug\n  }] : [..._getBaitChain(fishInfo.mooch), {\n    id: fishId,\n    tug: fishInfo.tug\n  }];\n});\nexport const getBaitGroup = memoize(fishId => {\n  const fishInfo = fishes[fishId].spreadsheet_data;\n  return {\n    baits: getBaitChain(fishId),\n    intuitionFishes: fishInfo.intuition && fishInfo.intuition.map(({\n      id,\n      count\n    }) => ({\n      baits: getBaitChain(id),\n      count\n    }))\n  };\n});\nexport function subtextDH(fishId) {\n  const doubleHook = fishes[fishId].spreadsheet_data.double_hook;\n  return doubleHook ? `DH: ${Array.isArray(doubleHook) ? doubleHook.join('-') : doubleHook}` : 'DH: ?';\n}\nexport function subtextBiteTime(fishId) {\n  const biteTime = fishes[fishId].spreadsheet_data.bite_time;\n  return biteTime ? `${biteTime.all[0] === biteTime.all[1] ? biteTime.all[0] : biteTime.all.join('-')} s` : '? s';\n}\nexport function translate(locale = 'en', obj, ...keys) {\n  for (let i = keys.length; i > 0; --i) {\n    const key = `${keys.slice(0, i).join('_')}_${locale}`;\n    if (obj[key]) return obj[key];\n  }\n\n  return `{${obj.name || obj.id}.${keys.join('_')}}`;\n}\nexport function upperFirst(str) {\n  return str[0].toUpperCase() + str.slice(1);\n}\nexport function getBlindDHRanges(fishId, baitId, time) {\n  const fishInfo = fishes[fishId].spreadsheet_data;\n  if (time && fishInfo.time && fishInfo.time.indexOf(time) === -1) return null;\n  if (!fishInfo.bite_time[baitId]) return null;\n  const blindDHRanges = [fishInfo.bite_time[baitId]];\n\n  for (const otherFishId of fishingSpots[fishes[fishId].fishing_spot].fishes) {\n    if (otherFishId === fishId) continue;\n    const otherFishInfo = fishes[otherFishId].spreadsheet_data;\n    if (otherFishInfo.tug !== fishInfo.tug) continue;\n    if (time && otherFishInfo.time && otherFishInfo.time.indexOf(time) === -1) continue;\n    if (!otherFishInfo.bite_time[baitId]) continue;\n    const otherRange = otherFishInfo.bite_time[baitId];\n\n    for (let i = 0; i < blindDHRanges.length;) {\n      const currentRange = blindDHRanges[i];\n\n      if (otherRange[1] < currentRange[0] || otherRange[0] > currentRange[1]) {\n        // No overlap\n        ++i;\n      } else if (otherRange[0] <= currentRange[0] && otherRange[1] >= currentRange[1]) {\n        // Full overlap\n        blindDHRanges.splice(i, 1);\n      } else if (otherRange[0] > currentRange[0] && otherRange[1] < currentRange[1]) {\n        // Splits currentRange into 2\n        blindDHRanges.splice(i, 1, [currentRange[0], otherRange[0] - 1], [otherRange[1] + 1, currentRange[1]]);\n        i += 2;\n      } else {\n        // Partial overlap\n        if (otherRange[0] <= currentRange[0]) {\n          blindDHRanges.splice(i++, 1, [otherRange[0] + 1, currentRange[1]]);\n        } else if (otherRange[1] >= currentRange[1]) {\n          blindDHRanges.splice(i++, 1, [currentRange[0], otherRange[1] - 1]);\n        } else {\n          console.error('This should never happen');\n          i++;\n        }\n      }\n    }\n  }\n\n  return blindDHRanges;\n}","map":null,"metadata":{},"sourceType":"module"}