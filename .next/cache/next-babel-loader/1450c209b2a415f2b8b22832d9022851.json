{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport MuiLink from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Section from '../Section';\nimport { $ } from '../MathJax';\nimport MiniGrid from './MiniGrid';\nimport { PAYOUTS } from './calculate-mini-cactpot';\nimport i18n from '../i18n';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    payoutsContainer: {\n      marginBottom: theme.spacing(2)\n    },\n    payouts: {\n      width: 'auto',\n      margin: '0 auto',\n      '& thead, & tbody': {\n        background: 'none'\n      },\n      '& th': {\n        padding: theme.spacing(1, 2),\n        '&:nth-child(2)': {\n          paddingRight: theme.spacing(8)\n        }\n      },\n      '& td': {\n        padding: theme.spacing(1, 2),\n        border: 0,\n        '&:nth-child(2)': {\n          paddingRight: theme.spacing(8)\n        }\n      }\n    }\n  };\n});\n\nvar About = function About(_ref) {\n  var t = _ref.t,\n      i18n = _ref.i18n;\n  var classes = useStyles();\n  return /*#__PURE__*/_jsxs(Section, {\n    title: t('about'),\n    children: [/*#__PURE__*/_jsxs(Typography, {\n      paragraph: true,\n      children: [/*#__PURE__*/_jsx(MuiLink, {\n        href: \"https://na.finalfantasyxiv.com/lodestone/playguide/contentsguide/goldsaucer/cactpot/\",\n        children: \"Mini Cactpot\"\n      }), \" is a scratchcard lottery where each of the numbers \", $('1'), \" through \", $('9'), \" are hidden in a \", $('3 \\\\times 3'), \" grid. One cell is initially revealed, and after selecting 3 more to uncover one at a time, you may select any row, column, or diagonal. The sum of your selected line determines how much MGP you win.\"]\n    }), /*#__PURE__*/_jsx(TableContainer, {\n      className: classes.payoutsContainer,\n      children: /*#__PURE__*/_jsxs(Table, {\n        className: classes.payouts,\n        children: [/*#__PURE__*/_jsx(TableHead, {\n          children: /*#__PURE__*/_jsxs(TableRow, {\n            children: [/*#__PURE__*/_jsx(TableCell, {\n              align: \"center\",\n              children: \"Sum\"\n            }), /*#__PURE__*/_jsx(TableCell, {\n              align: \"center\",\n              children: \"MGP\"\n            }), /*#__PURE__*/_jsx(TableCell, {\n              align: \"center\",\n              children: \"Sum\"\n            }), /*#__PURE__*/_jsx(TableCell, {\n              align: \"center\",\n              children: \"MGP\"\n            })]\n          })\n        }), /*#__PURE__*/_jsx(TableBody, {\n          children: [[6, 16], [7, 17], [8, 18], [9, 19], [10, 20], [11, 21], [12, 22], [13, 23], [14, 24], [15]].map(function (row, index) {\n            return /*#__PURE__*/_jsx(TableRow, {\n              children: row.map(function (col, index) {\n                return /*#__PURE__*/_jsxs(_Fragment, {\n                  children: [/*#__PURE__*/_jsx(TableCell, {\n                    align: \"center\",\n                    children: col.toLocaleString(i18n.language)\n                  }, index), /*#__PURE__*/_jsx(TableCell, {\n                    align: \"right\",\n                    children: PAYOUTS[col].toLocaleString(i18n.language)\n                  }, index)]\n                });\n              })\n            }, index);\n          })\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Typography, {\n      paragraph: true,\n      children: \"This calculator works by computing the expected value of selecting any line or cell. A strategy that doesn\\u2019t involve heavy computation is to first reveal a \\u201CY\\u201D shape on the board.\"\n    }), /*#__PURE__*/_jsxs(Box, {\n      textAlign: \"center\",\n      children: [/*#__PURE__*/_jsx(MiniGrid, {\n        state: \"X-X-X--X-\"\n      }), /*#__PURE__*/_jsx(MiniGrid, {\n        state: \"X---XXX--\"\n      }), /*#__PURE__*/_jsx(MiniGrid, {\n        state: \"-X--X-X-X\"\n      }), /*#__PURE__*/_jsx(MiniGrid, {\n        state: \"--XXX---X\"\n      })]\n    }), /*#__PURE__*/_jsx(Typography, {\n      paragraph: true,\n      children: \"Next, select a line as follows:\"\n    }), /*#__PURE__*/_jsxs(\"ol\", {\n      children: [/*#__PURE__*/_jsx(Typography, {\n        component: \"li\",\n        children: \"If a line can be the 123 line, select it; otherwise\"\n      }), /*#__PURE__*/_jsx(Typography, {\n        component: \"li\",\n        children: \"if a line can be the 789 line, select it; otherwise\"\n      }), /*#__PURE__*/_jsx(Typography, {\n        component: \"li\",\n        children: \"select whatever line can have the biggest sum (not payout).\"\n      })]\n    }), /*#__PURE__*/_jsx(Typography, {\n      paragraph: true,\n      children: \"This strategy gives an expected value of 1259, whereas perfect play gives 1484. Note that in steps 1 and 2, if a 123 or 789 line exists, you will always select it without ambiguity. In step 3, you may have to guess which lines may have a large sum.\"\n    })]\n  });\n};\n\nexport default i18n.withTranslation('mini-cactpot')(About);","map":null,"metadata":{},"sourceType":"module"}