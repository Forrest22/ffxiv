{"ast":null,"code":"import { timeUntil as genericTimeUntil } from '../utils';\nimport { fishingSpots, fishes, baits } from './gists/data/ocean-fish-data.json';\nimport spreadsheet from './gists/data/spreadsheet-data.json';\nimport biteTimes from './gists/data/ocean-fish-bite-times.json';\nimport * as maps from './maps';\n\nfunction memoize(func) {\n  const cache = {};\n  return arg => {\n    const key = String(arg);\n    return cache[key] !== undefined ? cache[key] : cache[key] = func(arg);\n  };\n}\n\nexport function timeUntil(now, then, full) {\n  const diff = then.getTime() - now.getTime();\n\n  if (diff < -900000) {\n    return 'en route';\n  } else if (diff < 0) {\n    return 'boarding now';\n  } else {\n    return genericTimeUntil(now, then, full);\n  }\n}\nexport function getStops(destinationCode) {\n  const stops = maps.STOPS_SEQUENCE[destinationCode[0]];\n  const times = maps.TIMES_SEQUENCE[destinationCode[1]];\n  return [stops[0] + times[0], stops[1] + times[1], stops[2] + times[2]];\n}\nexport function getTimeSensitiveFish(destinationCode) {\n  const stopTimes = getStops(destinationCode);\n  return stopTimes.map((destinationStopTime, index) => {\n    const fishingSpotId = maps.STOP_MAP[destinationStopTime[0]];\n    const time = stopTimes[index][1];\n    return fishingSpots[fishingSpotId + 1].fishes.filter(fishId => {\n      const fishInfo = getFishInfo(fishes[fishId].name_en);\n      return fishInfo.time && fishInfo.time !== 'DSN' && fishInfo.time.indexOf(time) > -1;\n    });\n  });\n}\nexport function getPointsFish(destinationCode) {\n  const stopTimes = getStops(destinationCode);\n  return stopTimes.map((destinationStopTime, index) => {\n    const fishingSpotId = maps.STOP_MAP[destinationStopTime[0]];\n    const time = stopTimes[index][1];\n    let highestPointsFish = [];\n    const pointsFish = fishingSpots[fishingSpotId + 1].fishes.filter(fishId => {\n      const fishInfo = getFishInfo(fishes[fishId].name_en);\n\n      if (fishInfo.time && fishInfo.time.indexOf(time) === -1) {\n        return false;\n      } else if (!fishInfo.points || !fishInfo.doubleHook) {\n        return false;\n      } else {\n        const points = (Array.isArray(fishInfo.doubleHook) ? fishInfo.doubleHook[1] : fishInfo.doubleHook) * fishInfo.points;\n\n        if (highestPointsFish.length === 0) {\n          highestPointsFish.push({\n            fishId,\n            points\n          });\n        } else if (points === highestPointsFish[0].points) {\n          highestPointsFish.push({\n            fishId,\n            points\n          });\n        } else if (points > highestPointsFish[0].points) {\n          highestPointsFish = [{\n            fishId,\n            points\n          }];\n        }\n\n        return points >= 500;\n      }\n    });\n    return pointsFish.length > 0 ? pointsFish : highestPointsFish.map(({\n      fishId\n    }) => fishId);\n  });\n}\nexport function getBlueFish(destinationCode) {\n  const stopTimes = getStops(destinationCode);\n  return stopTimes.map(destinationStopTime => maps.BLUE_FISH_MAP[destinationStopTime[0]]).map((fishId, index) => {\n    const time = stopTimes[index][1];\n    const fishInfo = getFishInfo(fishes[fishId].name_en);\n    return fishInfo.time && fishInfo.time.indexOf(time) > -1 ? fishId : null;\n  });\n}\nexport const getFishInfo = memoize(fishName => {\n  const fishInfo = Object.values(spreadsheet).flat().find(fishInfo => fishInfo.name === fishName);\n  if (!fishInfo) return null;\n  const biteTime = biteTimes[getFish(fishName).id];\n\n  if (biteTimes) {\n    fishInfo.biteTime = biteTime;\n  }\n\n  return fishInfo;\n});\nexport const getFish = memoize(fishName => Object.values(fishes).find(fish => fish.name_en === fishName) || null);\nexport const getBait = memoize(baitName => Object.values(baits).find(bait => bait.name_en === baitName) || null);\nexport const getBaitChain = memoize(function _getBaitChain(fishId) {\n  const fishInfo = getFishInfo(fishes[fishId].name_en);\n  return fishInfo.bait ? [getBait(fishInfo.bait), {\n    id: fishId,\n    tug: fishInfo.tug\n  }] : [..._getBaitChain(getFish(fishInfo.mooch).id), {\n    id: fishId,\n    tug: fishInfo.tug\n  }];\n});\nexport const getBaitGroup = memoize(fishId => {\n  const fishInfo = getFishInfo(fishes[fishId].name_en);\n  return {\n    baits: getBaitChain(fishId),\n    intuitionFishes: fishInfo.intuition && fishInfo.intuition.map(intuitionFish => ({\n      baits: getBaitChain(getFish(intuitionFish.name).id),\n      count: intuitionFish.count\n    }))\n  };\n});\nexport function subtextDH(fishId) {\n  const dh = getFishInfo(fishes[fishId].name_en).doubleHook;\n  return dh ? `DH: ${Array.isArray(dh) ? dh.join('-') : dh}` : 'DH: ?';\n}\nexport function subtextBiteTime(fishId) {\n  const biteTime = getFishInfo(fishes[fishId].name_en).biteTime;\n  return biteTime ? `${biteTime[0] === biteTime[1] ? biteTime[0] : biteTime.join('-')} s` : '? s';\n}\nexport function translate(locale = 'en', obj, ...keys) {\n  for (let i = keys.length; i > 0; --i) {\n    const key = `${keys.slice(0, i).join('_')}_${locale}`;\n    if (obj[key]) return obj[key];\n  }\n\n  return `{${obj.name || obj.id}.${keys.join('_')}}`;\n}\nexport function upperFirst(str) {\n  return str[0].toUpperCase() + str.slice(1);\n}","map":null,"metadata":{},"sourceType":"module"}