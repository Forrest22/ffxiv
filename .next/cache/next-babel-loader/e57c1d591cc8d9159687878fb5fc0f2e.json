{"ast":null,"code":"const _9HR = 32400000;\nconst _45MIN = 2700000; // Cycle repeats every 12 days starting at this epoch\n\nconst LULU_EPOCH = 1593270000000 + _9HR;\nconst DEST_CYCLE = 'BTNR';\nconst TIME_CYCLE = 'SSSSNNNNDDDD';\n\nfunction fromEpoch(day, hour) {\n  return new Date(LULU_EPOCH + day * 86400000 + hour * 3600000 - _9HR);\n}\n\nfunction calculateVoyages(date, count, filter) {\n  const adjustedDate = new Date(date.getTime() + _9HR - _45MIN); // Subtract 45 minutes to catch ongoing voyages\n\n  let day = Math.floor((adjustedDate.getTime() - LULU_EPOCH) / 86400000);\n  let hour = adjustedDate.getUTCHours();\n  hour += hour & 1 ? 2 : 1;\n\n  if (hour > 23) {\n    day += 1;\n    hour -= 24;\n  } // Find the current voyage\n\n\n  const voyageNumber = hour >> 1;\n  let destIndex = (day + voyageNumber) % 4;\n  let timeIndex = (day + voyageNumber) % 12; // Loop until however many voyages are found\n\n  const upcomingVoyages = [];\n\n  while (upcomingVoyages.length < count) {\n    const destinationCode = DEST_CYCLE[destIndex] + TIME_CYCLE[timeIndex];\n\n    if (!filter || filter.includes(destinationCode)) {\n      upcomingVoyages.push({\n        time: fromEpoch(day, hour),\n        destinationCode\n      });\n    }\n\n    if (hour === 23) {\n      day += 1;\n      hour = 1;\n      destIndex = (destIndex + 2) % 4;\n      timeIndex = (timeIndex + 2) % 12;\n    } else {\n      hour += 2;\n      destIndex = (destIndex + 1) % 4;\n      timeIndex = (timeIndex + 1) % 12;\n    }\n  }\n\n  return upcomingVoyages;\n}\n\nexport default calculateVoyages;","map":null,"metadata":{},"sourceType":"module"}