{"ast":null,"code":"var __jsx = React.createElement;\n\n/* global MathJax */\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport AirbnbPropTypes from 'airbnb-prop-types';\nimport Highlight from './Highlight';\nconst setImmediatePolyfill = typeof setImmediate !== 'undefined' ? setImmediate : action => setTimeout(action, 1);\nlet calledRender = false;\n\nfunction queueRenderMath() {\n  if (typeof MathJax !== 'undefined' && !calledRender) {\n    MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\n    calledRender = true;\n    setImmediatePolyfill(() => {\n      calledRender = false;\n    });\n  }\n}\n\nconst useStyles = makeStyles(theme => ({\n  noMathJaxBlock: {\n    marginBottom: theme.spacing(2)\n  },\n  noMathJaxInline: {\n    fontFamily: 'monospace',\n    whiteSpace: 'normal',\n    wordWrap: 'break-word'\n  },\n  mathJaxBlock: {\n    fontSize: '1.125em'\n  },\n  mathJaxInline: {}\n})); // TODO: SSR still not happy\n\nexport default function MathJaxComponent(props) {\n  const {\n    $,\n    $$\n  } = props;\n  const {\n    0: isMounted,\n    1: setIsMounted\n  } = useState(false);\n  const classes = useStyles();\n  useEffect(() => {\n    isMounted && queueRenderMath();\n  }, [isMounted, $, $$]);\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n  return !isMounted || typeof MathJax === 'undefined' ? $$ ? __jsx(Highlight, {\n    language: \"latex\",\n    className: classes.noMathJaxBlock\n  }, `\\\\[${$$}\\\\]`) : __jsx(\"span\", {\n    className: classes.noMathJaxInline\n  }, `\\\\(${$}\\\\)`) : $$ ? __jsx(\"div\", {\n    className: classes.mathJaxBlock\n  }, `\\\\[${$$}\\\\]`) : __jsx(\"span\", {\n    className: classes.mathJaxInline\n  }, `\\\\(${$}\\\\)`);\n}\nconst exclusivePropTypes = {\n  $: PropTypes.string,\n  $$: PropTypes.string\n};\nconst exclusiveProps = Object.keys(exclusivePropTypes);","map":null,"metadata":{},"sourceType":"module"}