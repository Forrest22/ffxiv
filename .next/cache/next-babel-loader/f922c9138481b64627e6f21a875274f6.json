{"ast":null,"code":"import _toConsumableArray from \"/root/ffxiv/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar LINES = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15], [0, 4, 8, 12], [1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [0, 5, 10, 15], [3, 6, 9, 12]];\n\nfunction countLines(board) {\n  var count = 0;\n\n  var _iterator = _createForOfIteratorHelper(LINES),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var line = _step.value;\n\n      if (board[line[0]] && board[line[1]] && board[line[2]] && board[line[3]]) {\n        ++count;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return count;\n}\n\nfunction choose(set, count) {\n  if (count >= set.length) {\n    return [set.slice()];\n  } else if (count === 0) {\n    return [[]];\n  } else {\n    return [].concat(_toConsumableArray(choose(set.slice(1), count - 1).map(function (x) {\n      return [set[0]].concat(_toConsumableArray(x));\n    })), _toConsumableArray(choose(set.slice(1), count)));\n  }\n}\n\nfunction calculateProbabilities(board) {\n  var emptyIndices = Array(16).fill(undefined).map(function (_, index) {\n    return index;\n  }).filter(function (index) {\n    return !board[index];\n  });\n  var possibleBoards = choose(emptyIndices, Math.max(emptyIndices.length - 7, 0)).map(function (empties) {\n    var newBoard = board.slice();\n\n    var _iterator2 = _createForOfIteratorHelper(empties),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var index = _step2.value;\n        newBoard[index] = true;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    return newBoard;\n  });\n  var buckets = [0, 0, 0, 0];\n\n  var _iterator3 = _createForOfIteratorHelper(possibleBoards),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var possibleBoard = _step3.value;\n      ++buckets[Math.min(countLines(possibleBoard), 3)];\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return {\n    lines1: buckets[1] + buckets[2] + buckets[3],\n    lines2: buckets[2] + buckets[3],\n    lines3: buckets[3],\n    total: possibleBoards.length\n  };\n}\n\nexport default calculateProbabilities;","map":null,"metadata":{},"sourceType":"module"}