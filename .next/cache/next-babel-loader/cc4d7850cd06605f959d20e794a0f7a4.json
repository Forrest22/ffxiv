{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport moment from 'moment';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EorzeaWeather, { chances } from '@pillowfication/eorzea-weather';\nimport forecastWeather from './forecast-weather';\nimport REGIONS from './regions';\nimport getEorzeanTime from './get-eorzean-time';\nimport Section from '../Section';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport WeatherIcon from './WeatherIcon';\nvar ZONES = [];\n\nvar _iterator = _createForOfIteratorHelper(REGIONS),\n    _step;\n\ntry {\n  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n    var _step$value = _step.value,\n        regionId = _step$value.regionId,\n        zones = _step$value.zones;\n\n    var _iterator2 = _createForOfIteratorHelper(zones),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var zoneId = _step2.value;\n        ZONES.push({\n          regionId: regionId,\n          zoneId: zoneId\n        });\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n} catch (err) {\n  _iterator.e(err);\n} finally {\n  _iterator.f();\n}\n\nvar WEATHER_CELL_WIDTH = 75;\nvar eorzeaWeather = new EorzeaWeather({\n  locale: 'en'\n});\n\nfunction displayBell(bell) {\n  return bell > 9 ? bell + ':00' : '0' + bell + ':00';\n}\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    transitionWeather: _defineProperty({}, theme.breakpoints.down('sm'), {\n      marginBottom: theme.spacing(2)\n    }),\n    transitionArrow: _defineProperty({\n      display: 'block',\n      margin: \"\".concat(theme.spacing(0.5), \"px auto\"),\n      fontSize: '2em'\n    }, theme.breakpoints.down('sm'), {\n      display: 'none'\n    }),\n    dateCell: {\n      width: '100px',\n      textAlign: 'right'\n    },\n    forecastCell: {\n      whiteSpace: 'nowrap'\n    },\n    bellCell: {\n      width: 50,\n      paddingLeft: theme.spacing(0.5),\n      paddingRight: theme.spacing(0.5),\n      textAlign: 'right'\n    },\n    weatherCell: {\n      width: WEATHER_CELL_WIDTH + theme.spacing(1),\n      paddingLeft: theme.spacing(0.5),\n      paddingRight: theme.spacing(0.5),\n      textAlign: 'center',\n      verticalAlign: 'top',\n      lineHeight: 1,\n      '& span': {\n        display: 'inline-block',\n        width: WEATHER_CELL_WIDTH,\n        lineHeight: 1.1\n      },\n      '&:last-child': {\n        paddingRight: theme.spacing(5),\n        width: WEATHER_CELL_WIDTH + theme.spacing(5.5)\n      }\n    },\n    transitionCell: {\n      width: 50,\n      padding: theme.spacing(1),\n      textAlign: 'center'\n    }\n  };\n});\nexport default function Forecaster(props) {\n  var now = props.now;\n\n  var _useState = useState(null),\n      zone = _useState[0],\n      setZone = _useState[1];\n\n  var _useState2 = useState('none'),\n      transitionWeather = _useState2[0],\n      setTransitionWeather = _useState2[1];\n\n  var _useState3 = useState('none'),\n      targetWeather = _useState3[0],\n      setTargetWeather = _useState3[1];\n\n  var _useState4 = useState({\n    0: true,\n    8: true,\n    16: true\n  }),\n      times = _useState4[0],\n      setTimes = _useState4[1];\n\n  var classes = useStyles();\n  var cachedForecast = useRef(null);\n  useEffect(function () {\n    if (!now || getEorzeanTime(now).getUTCMinutes() === 0) {\n      cachedForecast.current = null;\n    }\n  });\n  var possibleWeathers = zone && chances[zone.zoneId].map(function (_ref) {\n    var weatherId = _ref.w;\n    return weatherId;\n  });\n  var hasTime = times[0] || times[8] || times[16];\n  var forecast = zone && hasTime && (cachedForecast.current || (cachedForecast.current = forecastWeather(zone.zoneId, now, transitionWeather === 'none' ? null : transitionWeather, targetWeather === 'none' ? null : targetWeather, times)));\n\n  var handleSelectZone = function handleSelectZone(event, newZone) {\n    cachedForecast.current = null;\n    setZone(newZone);\n    setTransitionWeather('none');\n    setTargetWeather('none');\n  };\n\n  var handleSelectTransitionWeather = function handleSelectTransitionWeather(event) {\n    cachedForecast.current = null;\n    setTransitionWeather(event.target.value);\n  };\n\n  var handleSelectTargetWeather = function handleSelectTargetWeather(event) {\n    cachedForecast.current = null;\n    setTransitionWeather(event.target.value);\n  };\n\n  var handleSelectTimes = function handleSelectTimes(timeSlot) {\n    cachedForecast.current = null;\n    setTimes(_objectSpread(_objectSpread({}, times), {}, _defineProperty({}, timeSlot, !times[timeSlot])));\n  };\n\n  return __jsx(Section, {\n    title: \"Forecaster\"\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 4\n  }, __jsx(Autocomplete, {\n    options: ZONES,\n    groupBy: function groupBy(zone) {\n      return eorzeaWeather.translateRegion(zone.regionId);\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return eorzeaWeather.translateZone(option.zoneId);\n    },\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        label: \"Select a zone\"\n      }));\n    },\n    value: zone,\n    getOptionSelected: function getOptionSelected(opt1, opt2) {\n      return opt1.zoneId === opt2.zoneId;\n    },\n    onChange: handleSelectZone\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 4\n  }, __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.transitionWeather\n  }, __jsx(InputLabel, null, \"Transition from\"), __jsx(Select, {\n    value: transitionWeather,\n    disabled: !zone,\n    onChange: handleSelectTransitionWeather\n  }, __jsx(MenuItem, {\n    value: \"none\"\n  }, possibleWeathers ? 'Any weather' : 'Select a zone first'), possibleWeathers && possibleWeathers.map(function (weather) {\n    return __jsx(MenuItem, {\n      key: weather,\n      value: weather\n    }, eorzeaWeather.translateWeather(weather));\n  }))), __jsx(ArrowDownwardIcon, {\n    className: classes.transitionArrow\n  }), __jsx(FormControl, {\n    fullWidth: true\n  }, __jsx(InputLabel, null, \"Target weather\"), __jsx(Select, {\n    value: targetWeather,\n    disabled: !zone,\n    onChange: handleSelectTargetWeather\n  }, __jsx(MenuItem, {\n    value: \"none\"\n  }, possibleWeathers ? 'Any weather' : 'Select a zone first'), possibleWeathers && possibleWeathers.map(function (weather) {\n    return __jsx(MenuItem, {\n      key: weather,\n      value: weather\n    }, eorzeaWeather.translateWeather(weather));\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 4\n  }, __jsx(FormControl, {\n    component: \"fieldset\"\n  }, __jsx(FormLabel, {\n    component: \"legend\"\n  }, \"Select times\"), __jsx(FormGroup, null, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: times[0],\n      onChange: handleSelectTimes.bind(null, 0)\n    }),\n    label: \"00:00\"\n  }), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: times[8],\n      onChange: handleSelectTimes.bind(null, 8)\n    }),\n    label: \"08:00\"\n  }), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: times[16],\n      onChange: handleSelectTimes.bind(null, 16)\n    }),\n    label: \"16:00\"\n  })))), zone && !hasTime && __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Typography, null, __jsx(\"strong\", null, \"Error:\"), \" At least one time must be selected.\")), forecast && __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    gutterBottom: true\n  }, \"Next 10 matches\"), __jsx(TableContainer, null, __jsx(Table, {\n    size: \"small\",\n    className: classes.weatherTable\n  }, __jsx(TableBody, null, function () {\n    var previousDate = '';\n    return forecast.map(function (_ref2, index) {\n      var date = _ref2.date,\n          timeChunk = _ref2.timeChunk,\n          previousWeather = _ref2.previousWeather,\n          currentWeather = _ref2.currentWeather;\n      var momentDate = moment(date);\n      var currentDate = momentDate.format('MM/DD');\n      return __jsx(TableRow, {\n        key: index,\n        hover: true\n      }, __jsx(TableCell, {\n        className: classes.dateCell\n      }, __jsx(Typography, null, previousDate !== (previousDate = currentDate) ? currentDate : null)), __jsx(TableCell, {\n        className: classes.dateCell\n      }, __jsx(Typography, null, momentDate.format('HH:mm'))), __jsx(TableCell, {\n        className: classes.forecastCell\n      }, __jsx(Typography, null, moment.duration(momentDate.diff(now)).humanize(true))), __jsx(TableCell, {\n        className: classes.bellCell\n      }, __jsx(Typography, null, displayBell((timeChunk + 16) % 24))), __jsx(TableCell, {\n        className: classes.weatherCell\n      }, __jsx(WeatherIcon, {\n        weatherId: previousWeather\n      })), __jsx(TableCell, {\n        className: classes.transitionCell\n      }, __jsx(ArrowForwardIcon, null)), __jsx(TableCell, {\n        className: classes.bellCell\n      }, __jsx(Typography, null, displayBell(timeChunk))), __jsx(TableCell, {\n        className: classes.weatherCell\n      }, __jsx(WeatherIcon, {\n        weatherId: currentWeather\n      })));\n    });\n  }()))))));\n}","map":null,"metadata":{},"sourceType":"module"}