{"ast":null,"code":"import CHANCES from './chances';\nimport en from './locales/en.json';\nimport de from './locales/de.json';\nimport fr from './locales/fr.json';\nimport ja from './locales/ja.json';\nimport softHyphens from './locales/soft-hyphens';\nconst LOCALES = {\n  en,\n  de,\n  fr,\n  ja\n};\nexport function getSeed(date = new Date()) {\n  return Math.floor(date.getTime() / 1400000);\n}\nexport function getDate(seed = getSeed()) {\n  return new Date(seed * 1400000);\n}\nexport function hashSeed(seed = getSeed()) {\n  const base = Math.floor(seed / 3) * 100 + (seed + 1) % 3 * 8;\n  const step1 = (base << 11 ^ base) >>> 0;\n  const step2 = (step1 >>> 8 ^ step1) >>> 0;\n  return step2 % 100;\n}\nexport function getNextWeathers(seed = getSeed(), count = 10) {\n  const weathers = [];\n\n  for (let index = 0; index < count; ++index) {\n    weathers.push(hashSeed(seed + index));\n  }\n\n  return weathers;\n}\nexport function getZoneWeather(zone, hash) {\n  for (const [chance, weather] of CHANCES[zone]) {\n    if (chance > hash) {\n      return weather;\n    }\n  }\n}\nexport function getPossibleWeathers(zone) {\n  return CHANCES[zone].map(([, weather]) => weather);\n}\nexport function forecastWeathers(zone, filter, seed = getSeed(), count = 10) {\n  const results = [];\n  let prevHash = hashSeed(seed - 1);\n  let prevWeather = getZoneWeather(zone, prevHash);\n\n  while (results.length < count) {\n    const currHash = hashSeed(seed);\n    const currWeather = getZoneWeather(zone, currHash);\n\n    if (!filter || filter(prevWeather, currWeather, seed)) {\n      results.push({\n        prevWeather,\n        currWeather,\n        seed,\n        date: getDate(seed)\n      });\n    }\n\n    prevHash = currHash;\n    prevWeather = currWeather;\n    ++seed;\n  }\n\n  return results;\n}\nexport function translate(type, id, locale = 'en') {\n  const translation = LOCALES[locale] && LOCALES[locale][type][id] || id;\n  return softHyphens[translation] || translation;\n}","map":null,"metadata":{},"sourceType":"module"}