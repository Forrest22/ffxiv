{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Section from '../Section';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport HighOrLowCard from './HighOrLowCard';\nimport calculateHighOrLow from './calculate-high-or-low';\n\nfunction toPercent(p, q) {\n  return (p / q * 100 | 0) + '%';\n}\n\nconst useStyles = makeStyles(theme => ({\n  cardsContainer: {\n    textAlign: 'center',\n    whiteSpace: 'nowrap',\n    overflowX: 'auto'\n  }\n}));\nexport default function HighOrLowCalculator(props) {\n  const {\n    0: tb1,\n    1: setTb1\n  } = useState(null);\n  const {\n    0: tb2,\n    1: setTb2\n  } = useState(null);\n  const {\n    0: me,\n    1: setMe\n  } = useState(null);\n  const classes = useStyles();\n  const {\n    err,\n    tb1Err,\n    tb2Err,\n    meErr,\n    high,\n    low,\n    both\n  } = calculateHighOrLow(tb1, tb2, me);\n\n  const handleClickReset = event => {\n    setTb1(null);\n    setTb2(null);\n    setMe(null);\n  };\n\n  return __jsx(Section, null, __jsx(\"div\", {\n    className: classes.cardsContainer\n  }, __jsx(HighOrLowCard, {\n    value: tb1,\n    error: tb1Err,\n    onInputDigit: setTb1\n  }), __jsx(HighOrLowCard, {\n    value: tb2,\n    error: tb2Err,\n    onInputDigit: setTb2\n  }), __jsx(HighOrLowCard, {\n    disabled: true\n  }), __jsx(\"br\", null), __jsx(HighOrLowCard, {\n    value: me,\n    error: meErr,\n    onInputDigit: setMe\n  }), __jsx(HighOrLowCard, {\n    disabled: true\n  }), __jsx(HighOrLowCard, {\n    disabled: true\n  }), __jsx(\"br\", null), (() => {\n    switch (err) {\n      case 'INCOMPLETE':\n        return __jsx(Typography, {\n          paragraph: true\n        }, \"Input cards above\");\n\n      case 'DUPLICATE':\n        return __jsx(Typography, {\n          paragraph: true\n        }, \"Cannot have duplicate cards\");\n\n      default:\n        {\n          const sum = high + low + both;\n\n          if (high > low) {\n            return __jsx(Typography, {\n              paragraph: true\n            }, \"You are \", __jsx(\"b\", null, \"High\"), \" (\", toPercent(high, sum), \")\");\n          } else if (high < low) {\n            return __jsx(Typography, {\n              paragraph: true\n            }, \"You are \", __jsx(\"b\", null, \"Low\"), \" (\", toPercent(low, sum), \")\");\n          } else {\n            return __jsx(Typography, {\n              paragraph: true\n            }, \"You are \", __jsx(\"b\", null, \"High\"), \" or \", __jsx(\"b\", null, \"Low\"), \" (50%)\");\n          }\n        }\n    }\n  })(), __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: handleClickReset\n  }, \"Reset\")));\n}","map":null,"metadata":{},"sourceType":"module"}