{"ast":null,"code":"import { timeUntil as genericTimeUntil } from '../utils';\nimport { ROUTE_MAP } from './maps';\nimport FISH from './gists/fish.json';\nconst FISH_MAP = {};\n\nfor (const key in FISH) {\n  for (const fish of FISH[key]) {\n    FISH_MAP[fish.name] = fish;\n  }\n}\n\nexport function timeUntil(now, then, full) {\n  const diff = then.getTime() - now.getTime();\n\n  if (diff < -900000) {\n    return 'en route';\n  } else if (diff < 0) {\n    return 'boarding now';\n  } else {\n    return genericTimeUntil(now, then, full);\n  }\n}\nexport function getStops(destinationCode) {\n  const stops = ROUTE_MAP[destinationCode[0]];\n  const timeIndex = 'DSN'.indexOf(destinationCode[1]);\n  return stops.map((stop, index) => stop + 'DSN'.charAt((index + timeIndex + 1) % 3));\n}\nexport function getBaitChain(fishName) {\n  const fish = FISH_MAP[fishName];\n  let currBait = fish;\n  const bait = [currBait];\n\n  while (currBait) {\n    if (currBait.bait) {\n      bait.unshift({\n        name: currBait.bait\n      });\n      currBait = null;\n    } else if (currBait.mooch) {\n      currBait = FISH_MAP[currBait.mooch];\n      bait.unshift(currBait);\n    } else {\n      console.error(`Incomplete chain for ${fishName}`);\n      currBait = null;\n    }\n  }\n\n  const intuitionFishes = fish.intuition && fish.intuition.map(intuitionFish => ({\n    count: intuitionFish.count,\n    bait: getBaitChain(intuitionFish.name).bait\n  }));\n  return {\n    bait,\n    intuitionFishes\n  };\n}","map":null,"metadata":{},"sourceType":"module"}