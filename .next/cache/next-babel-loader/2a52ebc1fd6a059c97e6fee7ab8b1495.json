{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar CACHE = require('./gists/cache.json');\n\nvar PAYOUTS = {\n  6: 10000,\n  7: 36,\n  8: 720,\n  9: 360,\n  10: 80,\n  11: 252,\n  12: 108,\n  13: 72,\n  14: 54,\n  15: 180,\n  16: 72,\n  17: 180,\n  18: 119,\n  19: 36,\n  20: 306,\n  21: 1080,\n  22: 144,\n  23: 1800,\n  24: 3600\n};\nvar LINES = [[6, 7, 8], [3, 4, 5], [0, 1, 2], [0, 4, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [2, 4, 6]];\n\nfunction memoize(func, createKey) {\n  var cache = {};\n  return function () {\n    var key = createKey.apply(null, arguments);\n\n    if (cache[key]) {\n      return cache[key];\n    } else {\n      return cache[key] = func.apply(null, arguments);\n    }\n  };\n}\n\nvar calcHiddenSums = memoize(function (hidden, count) {\n  if (count === 0) {\n    return [0];\n  } else if (count === 1) {\n    return hidden;\n  } else if (count === hidden.length) {\n    var sum = 0;\n\n    var _iterator = _createForOfIteratorHelper(hidden),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var digit = _step.value;\n        sum += digit;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return [sum];\n  } else {\n    var lastIndex = hidden.length - 1;\n    var lastDigit = hidden[lastIndex];\n    return calcHiddenSums(hidden.slice(0, lastIndex), count - 1).map(function (x) {\n      return x + lastDigit;\n    }).concat(calcHiddenSums(hidden.slice(0, lastIndex), count));\n  }\n}, function (hidden, count) {\n  return hidden + '|' + count;\n});\nvar calcLineEV = memoize(function (grid, lineIndex, hidden) {\n  var revealed = 0;\n  var revealedSum = 0;\n\n  var _iterator2 = _createForOfIteratorHelper(LINES[lineIndex]),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var i = _step2.value;\n\n      if (grid[i]) {\n        ++revealed;\n        revealedSum += grid[i];\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var hiddenSums = calcHiddenSums(hidden, 3 - revealed);\n  return hiddenSums.reduce(function (ev, hiddenSum) {\n    return ev + PAYOUTS[revealedSum + hiddenSum];\n  }, 0) / hiddenSums.length;\n}, function (grid, lineIndex, hidden) {\n  return grid + '|' + lineIndex + '|' + hidden;\n});\nvar calcCellEV = memoize(function (grid, cell, hidden) {\n  var ev = 0;\n\n  for (var i = 0; i < hidden.length; ++i) {\n    var digit = hidden[i];\n    var copyGrid = grid.slice();\n    var copyHidden = hidden.slice();\n    copyGrid[cell] = digit;\n    copyHidden.splice(i, 1);\n    ev += calcGridEV(copyGrid, copyHidden);\n  }\n\n  return ev / hidden.length;\n}, function (grid, cell, hidden) {\n  return grid + '|' + cell + '|' + hidden;\n});\nvar calcGridEV = memoize(function (grid, hidden) {\n  var revealed = 0;\n\n  var _iterator3 = _createForOfIteratorHelper(grid),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var cell = _step3.value;\n\n      if (cell) {\n        ++revealed;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  if (revealed < 4) {\n    var maxCellEV = Number.MIN_SAFE_INTEGER;\n\n    for (var i = 0; i < 9; ++i) {\n      if (!grid[i]) {\n        maxCellEV = Math.max(maxCellEV, calcCellEV(grid, i, hidden));\n      }\n    }\n\n    return maxCellEV;\n  } else {\n    var maxLineEV = Number.MIN_SAFE_INTEGER;\n\n    for (var _i = 0; _i < LINES.length; ++_i) {\n      maxLineEV = Math.max(maxLineEV, calcLineEV(grid, _i, hidden));\n    }\n\n    return maxLineEV;\n  }\n}, function (grid, hidden) {\n  return grid + '|' + hidden;\n});\n\nfunction validateGrid(grid) {\n  var enteredCount = 0;\n  var seenValues = {};\n  var duplicateCells = [];\n\n  for (var i = 0; i < 9; ++i) {\n    var value = grid[i];\n\n    if (value !== null) {\n      ++enteredCount;\n      var seenAt = seenValues[value];\n\n      if (seenAt != null) {\n        duplicateCells.push(seenAt);\n        duplicateCells.push(i);\n        seenValues[value] = true;\n      } else if (seenAt !== undefined) {\n        duplicateCells.push(i);\n      } else {\n        seenValues[value] = i;\n      }\n    }\n  }\n\n  if (enteredCount === 0) {\n    return {\n      type: 'EMPTY'\n    };\n  }\n\n  if (enteredCount > 4) {\n    var enteredCells = [];\n\n    for (var cellIndex in grid) {\n      if (grid[cellIndex]) {\n        enteredCells.push(cellIndex);\n      }\n    }\n\n    return {\n      type: 'TOO MANY',\n      cells: enteredCells\n    };\n  }\n\n  if (duplicateCells.length > 0) {\n    return {\n      type: 'DUPLICATES',\n      cells: duplicateCells\n    };\n  }\n\n  return null;\n}\n\nfunction getSuggestion(grid, _disableCache) {\n  var hidden = [];\n\n  for (var i = 1; i <= 9; ++i) {\n    if (grid.indexOf(i) === -1) {\n      hidden.push(i);\n    }\n  }\n\n  var revealed = 9 - hidden.length;\n\n  if (revealed === 1 && !_disableCache) {\n    var index = grid.findIndex(function (digit) {\n      return digit !== null;\n    });\n    var cached = CACHE[index * 9 + grid[index] - 1];\n    return {\n      type: 'CELL',\n      maxCellEV: cached.v,\n      maxCellLocations: Array.isArray(cached.c) ? cached.c : [cached.c]\n    };\n  }\n\n  if (revealed < 4) {\n    var maxCellEV = Number.MIN_SAFE_INTEGER;\n    var maxCellLocations;\n\n    for (var _i2 = 0; _i2 < 9; ++_i2) {\n      if (!grid[_i2]) {\n        var cellEV = calcCellEV(grid, _i2, hidden);\n\n        if (cellEV > maxCellEV) {\n          maxCellEV = cellEV;\n          maxCellLocations = [_i2];\n        } else if (cellEV === maxCellEV) {\n          maxCellLocations.push(_i2);\n        }\n      }\n    }\n\n    return {\n      type: 'CELL',\n      maxCellEV: maxCellEV,\n      maxCellLocations: maxCellLocations\n    };\n  } else {\n    var maxLineEV = Number.MIN_SAFE_INTEGER;\n    var maxLineIds;\n\n    for (var _i3 = 0; _i3 < LINES.length; ++_i3) {\n      var lineEV = calcLineEV(grid, _i3, hidden);\n\n      if (lineEV > maxLineEV) {\n        maxLineEV = lineEV;\n        maxLineIds = [_i3];\n      } else if (lineEV === maxLineEV) {\n        maxLineIds.push(_i3);\n      }\n    }\n\n    return {\n      type: 'LINE',\n      maxLineEV: maxLineEV,\n      maxLineIds: maxLineIds\n    };\n  }\n}\n\nmodule.exports = {\n  PAYOUTS: PAYOUTS,\n  LINES: LINES,\n  validateGrid: validateGrid,\n  getSuggestion: getSuggestion\n};","map":null,"metadata":{},"sourceType":"script"}