{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport MuiLink from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Section from '../Section';\nimport MathJax from '../MathJax';\nimport MiniGrid from './MiniGrid';\nconst useStyles = makeStyles(theme => ({\n  payoutsContainer: {\n    marginBottom: theme.spacing(2)\n  },\n  payouts: {\n    width: 'auto',\n    margin: '0 auto',\n    '& thead, & tbody': {\n      background: 'none'\n    },\n    '& th': {\n      padding: theme.spacing(1, 2),\n      '&:nth-child(2)': {\n        paddingRight: theme.spacing(8)\n      }\n    },\n    '& td': {\n      padding: theme.spacing(1, 2),\n      border: 0,\n      '&:nth-child(2)': {\n        paddingRight: theme.spacing(8)\n      }\n    }\n  }\n}));\n\nconst About = () => {\n  const classes = useStyles();\n  return __jsx(Section, {\n    title: \"About\"\n  }, __jsx(Typography, {\n    paragraph: true\n  }, __jsx(MuiLink, {\n    href: \"https://na.finalfantasyxiv.com/lodestone/playguide/contentsguide/goldsaucer/cactpot/\"\n  }, \"Mini Cactpot\"), \" is a scratchcard lottery where each of the numbers \", __jsx(MathJax, {\n    $: \"1\"\n  }), \" through \", __jsx(MathJax, {\n    $: \"9\"\n  }), \" are hidden in a \", __jsx(MathJax, {\n    $: \"3 \\\\times 3\"\n  }), \" grid. One cell is initially revealed, and after selecting 3 more to uncover one at a time, you may select any row, column, or diagonal. The sum of your selected line determines how much MGP you win.\"), __jsx(TableContainer, {\n    className: classes.payoutsContainer\n  }, __jsx(Table, {\n    className: classes.payouts\n  }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, \"Sum\"), __jsx(TableCell, {\n    align: \"center\"\n  }, \"MGP\"), __jsx(TableCell, {\n    align: \"center\"\n  }, \"Sum\"), __jsx(TableCell, {\n    align: \"center\"\n  }, \"MGP\"))), __jsx(TableBody, null, __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, \"6\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"10,000\"), __jsx(TableCell, {\n    align: \"center\"\n  }, \"16\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"72\")), __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, \"7\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"36\"), __jsx(TableCell, {\n    align: \"center\"\n  }, \"17\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"180\")), __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, \"8\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"720\"), __jsx(TableCell, {\n    align: \"center\"\n  }, \"18\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"119\")), __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, \"9\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"360\"), __jsx(TableCell, {\n    align: \"center\"\n  }, \"19\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"36\")), __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, \"10\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"80\"), __jsx(TableCell, {\n    align: \"center\"\n  }, \"20\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"306\")), __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, \"11\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"252\"), __jsx(TableCell, {\n    align: \"center\"\n  }, \"21\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"1,080\")), __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, \"12\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"108\"), __jsx(TableCell, {\n    align: \"center\"\n  }, \"22\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"144\")), __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, \"13\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"72\"), __jsx(TableCell, {\n    align: \"center\"\n  }, \"23\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"1,800\")), __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, \"14\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"54\"), __jsx(TableCell, {\n    align: \"center\"\n  }, \"24\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"3,600\")), __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, \"15\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"180\"))))), __jsx(Typography, {\n    paragraph: true\n  }, \"This calculator works by computing the expected value of selecting any line or cell. A strategy that doesn\\u2019t involve heavy computation is to first reveal a \\u201CY\\u201D shape on the board.\"), __jsx(Box, {\n    textAlign: \"center\"\n  }, __jsx(MiniGrid, {\n    state: \"X-X-X--X-\"\n  }), __jsx(MiniGrid, {\n    state: \"X---XXX--\"\n  }), __jsx(MiniGrid, {\n    state: \"-X--X-X-X\"\n  }), __jsx(MiniGrid, {\n    state: \"--XXX---X\"\n  })), __jsx(Typography, {\n    paragraph: true\n  }, \"Next, select a line as follows:\"), __jsx(\"ol\", null, __jsx(Typography, {\n    component: \"li\"\n  }, \"If a line can be the 123 line, select it; otherwise\"), __jsx(Typography, {\n    component: \"li\"\n  }, \"if a line can be the 789 line, select it; otherwise\"), __jsx(Typography, {\n    component: \"li\"\n  }, \"select whatever line can have the biggest sum (not payout).\")), __jsx(Typography, {\n    paragraph: true\n  }, \"This strategy gives an expected value of 1259, whereas perfect play gives 1484. Note that in steps 1 and 2, if a 123 or 789 line exists, you will always select it. In step 3, you may have to guess which lines may have a large sum.\"));\n};\n\nexport default About;","map":null,"metadata":{},"sourceType":"module"}