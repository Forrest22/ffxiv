{"ast":null,"code":"import _toConsumableArray from \"/root/ffxiv/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { timeUntil as genericTimeUntil } from '../utils';\nimport { fishes, baits } from './gists/data/ocean-fish-data.json';\nimport spreadsheet from './gists/data/spreadsheet-data.json';\nimport biteTimes from './gists/data/ocean-fish-bite-times.json';\nimport * as maps from './maps';\n\nfunction memoize(func) {\n  var cache = {};\n  return function (arg) {\n    var key = String(arg);\n    return cache[key] !== undefined ? cache[key] : cache[key] = func(arg);\n  };\n}\n\nexport function timeUntil(now, then, full) {\n  var diff = then.getTime() - now.getTime();\n\n  if (diff < -900000) {\n    return 'en route';\n  } else if (diff < 0) {\n    return 'boarding now';\n  } else {\n    return genericTimeUntil(now, then, full);\n  }\n}\nexport function getStops(destinationCode) {\n  var stops = maps.STOPS_SEQUENCE[destinationCode[0]];\n  var times = maps.TIMES_SEQUENCE[destinationCode[1]];\n  return [stops[0] + times[0], stops[1] + times[1], stops[2] + times[2]];\n}\nexport function getBlueFish(destinationCode) {\n  var stopTimes = getStops(destinationCode);\n  return stopTimes.map(function (destinationStopTime) {\n    return maps.BLUE_FISH_MAP[destinationStopTime[0]];\n  }).map(function (fishId, index) {\n    var time = stopTimes[index][1];\n    var fishInfo = getFishInfo(fishes[fishId].name_en);\n    return fishInfo.time && fishInfo.time.indexOf(time) > -1 ? fishId : null;\n  });\n}\nexport var getFishInfo = memoize(function (fishName) {\n  var fishInfo = Object.values(spreadsheet).flat().find(function (fishInfo) {\n    return fishInfo.name === fishName;\n  });\n  if (!fishInfo) return null;\n  var biteTime = biteTimes[getFish(fishName).id];\n\n  if (biteTimes) {\n    fishInfo.timer = biteTime;\n  }\n\n  return fishInfo;\n});\nexport var getFish = memoize(function (fishName) {\n  return Object.values(fishes).find(function (fish) {\n    return fish.name_en === fishName;\n  }) || null;\n});\nexport var getBait = memoize(function (baitName) {\n  return Object.values(baits).find(function (bait) {\n    return bait.name_en === baitName;\n  }) || null;\n});\nexport var getBaitChain = memoize(function _getBaitChain(fishId) {\n  var fishInfo = getFishInfo(fishes[fishId].name_en);\n  return fishInfo.bait ? [getBait(fishInfo.bait), {\n    id: fishId,\n    tug: fishInfo.tug\n  }] : [].concat(_toConsumableArray(_getBaitChain(getFish(fishInfo.mooch).id)), [{\n    id: fishId,\n    tug: fishInfo.tug\n  }]);\n});\nexport var getBaitGroup = memoize(function (fishId) {\n  var fishInfo = getFishInfo(fishes[fishId].name_en);\n  return {\n    baits: getBaitChain(fishId),\n    intuitionFishes: fishInfo.intuition && fishInfo.intuition.map(function (intuitionFish) {\n      return {\n        baits: getBaitChain(getFish(intuitionFish.name).id),\n        count: intuitionFish.count\n      };\n    })\n  };\n});\nexport function subtextDH(fishId) {\n  var dh = getFishInfo(fishes[fishId].name_en).doubleHook;\n  return dh ? \"DH: \".concat(Array.isArray(dh) ? dh.join('-') : dh) : 'DH: ?';\n}\nexport function subtextBiteTime(fishId) {\n  var timer = getFishInfo(fishes[fishId].name_en).timer;\n  return timer ? \"\".concat(timer[0] === timer[1] ? timer[0] : timer.join('-'), \" s\") : '? s';\n}\nexport function translate() {\n  var locale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'en';\n  var obj = arguments.length > 1 ? arguments[1] : undefined;\n\n  for (var _len = arguments.length, keys = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    keys[_key - 2] = arguments[_key];\n  }\n\n  for (var i = keys.length; i > 0; --i) {\n    var _key2 = \"\".concat(keys.slice(0, i).join('_'), \"_\").concat(locale);\n\n    if (obj[_key2]) return obj[_key2];\n  }\n\n  return \"{\".concat(obj.name || obj.id, \".\").concat(keys.join('_'), \"}\");\n}\nexport function upperFirst(str) {\n  return str[0].toUpperCase() + str.slice(1);\n}","map":null,"metadata":{},"sourceType":"module"}