{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Section from '../Section';\nimport HighOrLowCard from './HighOrLowCard';\nimport calculateHighOrLow from './calculate-high-or-low';\nimport i18n from '../i18n';\nvar CalculatorState;\n\n(function (CalculatorState) {\n  CalculatorState[CalculatorState[\"Incomplete\"] = 0] = \"Incomplete\";\n  CalculatorState[CalculatorState[\"Duplicate\"] = 1] = \"Duplicate\";\n  CalculatorState[CalculatorState[\"Complete\"] = 2] = \"Complete\";\n})(CalculatorState || (CalculatorState = {}));\n\nfunction toPercent(p, q) {\n  return Math.floor(p / q * 100);\n}\n\nvar useStyles = makeStyles(function () {\n  return {\n    cardsContainer: {\n      textAlign: 'center',\n      whiteSpace: 'nowrap',\n      overflowX: 'auto'\n    }\n  };\n});\n\nvar Calculator = function Calculator(_ref) {\n  var t = _ref.t;\n\n  var _useState = useState(null),\n      tb1 = _useState[0],\n      setTb1 = _useState[1];\n\n  var _useState2 = useState(null),\n      tb2 = _useState2[0],\n      setTb2 = _useState2[1];\n\n  var _useState3 = useState(null),\n      me = _useState3[0],\n      setMe = _useState3[1];\n\n  var classes = useStyles();\n  var state;\n  var tb1Error = tb1 && (tb1 === tb2 || tb1 === me);\n  var tb2Error = tb2 && (tb2 === tb1 || tb2 === me);\n  var meError = me && (me === tb1 || me === tb2);\n  var high;\n  var low;\n  var both;\n\n  if (tb1Error || tb2Error || meError) {\n    state = CalculatorState.Duplicate;\n  } else if (tb1 === null || tb2 === null || me === null) {\n    state = CalculatorState.Incomplete;\n  } else {\n    state = CalculatorState.Complete;\n\n    var _calculateHighOrLow = calculateHighOrLow(tb1, tb2, me);\n\n    high = _calculateHighOrLow.high;\n    low = _calculateHighOrLow.low;\n    both = _calculateHighOrLow.both;\n  }\n\n  var handleClickReset = function handleClickReset() {\n    setTb1(null);\n    setTb2(null);\n    setMe(null);\n  };\n\n  return /*#__PURE__*/_jsx(Section, {\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: classes.cardsContainer,\n      children: [/*#__PURE__*/_jsx(HighOrLowCard, {\n        value: tb1,\n        error: tb1Error,\n        onInputDigit: setTb1\n      }), /*#__PURE__*/_jsx(HighOrLowCard, {\n        value: tb2,\n        error: tb2Error,\n        onInputDigit: setTb2\n      }), /*#__PURE__*/_jsx(HighOrLowCard, {\n        disabled: true\n      }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(HighOrLowCard, {\n        value: me,\n        error: meError,\n        onInputDigit: setMe\n      }), /*#__PURE__*/_jsx(HighOrLowCard, {\n        disabled: true\n      }), /*#__PURE__*/_jsx(HighOrLowCard, {\n        disabled: true\n      }), /*#__PURE__*/_jsx(\"br\", {}), function () {\n        switch (state) {\n          case CalculatorState.Incomplete:\n            return /*#__PURE__*/_jsx(Typography, {\n              paragraph: true,\n              children: t('state.inputCards')\n            });\n\n          case CalculatorState.Duplicate:\n            return /*#__PURE__*/_jsx(Typography, {\n              paragraph: true,\n              children: t('state.duplicateCards')\n            });\n\n          case CalculatorState.Complete:\n            {\n              var sum = high + low + both;\n\n              if (high > low) {\n                return /*#__PURE__*/_jsx(Typography, {\n                  paragraph: true,\n                  children: t('state.high', {\n                    chance: toPercent(high, sum)\n                  })\n                });\n              } else if (high < low) {\n                return /*#__PURE__*/_jsx(Typography, {\n                  paragraph: true,\n                  children: t('state.low', {\n                    chance: toPercent(low, sum)\n                  })\n                });\n              } else {\n                return /*#__PURE__*/_jsx(Typography, {\n                  paragraph: true,\n                  children: t('state.both', {\n                    chance: toPercent(low, sum)\n                  })\n                });\n              }\n            }\n        }\n      }(), /*#__PURE__*/_jsx(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: handleClickReset,\n        children: t('reset')\n      })]\n    })\n  });\n};\n\nexport default i18n.withTranslation('high-or-low')(Calculator);","map":null,"metadata":{},"sourceType":"module"}