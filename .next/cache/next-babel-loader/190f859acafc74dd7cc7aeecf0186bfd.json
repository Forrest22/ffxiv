{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useRouter } from 'next/router';\nimport moment from 'moment';\nimport cn from 'classnames';\nimport calculateVoyages, { LULU_EPOCH } from './calculate-voyages';\nimport { DEST_MAP, TIME_MAP, OBJECTIVES_MAP, FILTER_MAP } from './maps';\nimport { makeStyles } from '@material-ui/core/styles';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport Paper from '@material-ui/core/Paper';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Section from '../Section';\nimport OceanFishIcon from './OceanFishIcon';\nconst useStyles = makeStyles(theme => ({\n  form: {\n    marginBottom: theme.spacing(2)\n  },\n  schedule: {\n    '& td': {\n      paddingTop: theme.spacing(0.25),\n      paddingBottom: theme.spacing(0.25),\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1),\n      whiteSpace: 'nowrap'\n    },\n    '& tbody tr:hover': {\n      cursor: 'pointer'\n    }\n  },\n  hoverRow: {\n    backgroundColor: theme.palette.action.hover\n  },\n  dateCell: {\n    'td&': {\n      paddingLeft: theme.spacing(2)\n    }\n  },\n  timeCell: {\n    '& svg': {\n      top: '0',\n      verticalAlign: 'middle'\n    }\n  },\n  objectivesCell: {\n    '& div': {\n      verticalAlign: 'middle'\n    }\n  }\n}));\nexport default function OceanFishingTable(props) {\n  const {\n    now,\n    onSelectRoute\n  } = props;\n  const {\n    0: numRows,\n    1: setNumRows\n  } = useState(10);\n  const {\n    0: filter,\n    1: setFilter\n  } = useState('none');\n  const {\n    0: hover,\n    1: setHover\n  } = useState(null);\n  const classes = useStyles();\n  const router = useRouter();\n  const firstRender = useRef(false);\n  const voyagesCache = useRef(null);\n  useEffect(() => {\n    const queryFilter = FILTER_MAP[router.query.filter] ? router.query.filter : 'none';\n\n    if (!firstRender.current && now || filter !== queryFilter) {\n      voyagesCache.current = null;\n      firstRender.current = true;\n      setFilter(queryFilter);\n      onSelectRoute(calculateVoyages(now, 1, FILTER_MAP[queryFilter] || null)[0].destinationCode);\n    }\n  });\n\n  const handleInputNumRows = event => {\n    voyagesCache.current = null;\n    setNumRows(event.target.value);\n  };\n\n  const handleBlurNumRows = event => {\n    const numRows = Number(event.target.value);\n\n    if (!numRows) {\n      setNumRows(10);\n    } else {\n      setNumRows(Math.min(Math.max(Number(numRows) || 10, 1), 50));\n    }\n  };\n\n  const handleSelectFilter = event => {\n    voyagesCache.current = null;\n    const filter = event.target.value;\n    router.push({\n      pathname: router.pathname,\n      query: filter === 'none' ? null : {\n        filter\n      }\n    });\n  };\n\n  const handleHoverRow = {\n    none: setHover.bind(null, null),\n    ND: setHover.bind(null, 'ND'),\n    NS: setHover.bind(null, 'NS'),\n    NN: setHover.bind(null, 'NN'),\n    RD: setHover.bind(null, 'RD'),\n    RS: setHover.bind(null, 'RS'),\n    RN: setHover.bind(null, 'RN')\n  };\n  const handleSelectRow = {\n    ND: onSelectRoute.bind(null, 'ND'),\n    NS: onSelectRoute.bind(null, 'NS'),\n    NN: onSelectRoute.bind(null, 'NN'),\n    RD: onSelectRoute.bind(null, 'RD'),\n    RS: onSelectRoute.bind(null, 'RS'),\n    RN: onSelectRoute.bind(null, 'RN')\n  };\n  const upcomingVoyages = now && (voyagesCache.current || (voyagesCache.current = calculateVoyages(now, Math.min(Math.max(Number(numRows) || 10, 1), 50), FILTER_MAP[filter] || null)));\n  let previousDate;\n  return __jsx(Section, {\n    title: \"Schedule\"\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    className: classes.form\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(FormControl, {\n    fullWidth: true\n  }, __jsx(TextField, {\n    variant: \"filled\",\n    label: \"Number of rows\",\n    type: \"number\",\n    value: numRows,\n    onChange: handleInputNumRows,\n    onBlur: handleBlurNumRows\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(FormControl, {\n    fullWidth: true,\n    variant: \"filled\"\n  }, __jsx(InputLabel, null, \"Filter Route\"), __jsx(Select, {\n    native: true,\n    value: filter,\n    onChange: handleSelectFilter\n  }, __jsx(\"option\", {\n    value: \"none\"\n  }, \"No filter\"), __jsx(\"optgroup\", {\n    label: \"Route\"\n  }, __jsx(\"option\", {\n    value: \"ND\"\n  }, \"Northern Strait - Day\"), __jsx(\"option\", {\n    value: \"NS\"\n  }, \"Northern Strait - Sunset\"), __jsx(\"option\", {\n    value: \"NN\"\n  }, \"Northern Strait - Night\"), __jsx(\"option\", {\n    value: \"RD\"\n  }, \"Rhotano Sea - Day\"), __jsx(\"option\", {\n    value: \"RS\"\n  }, \"Rhotano Sea - Sunset\"), __jsx(\"option\", {\n    value: \"RN\"\n  }, \"Rhotano Sea - Night\")), __jsx(\"optgroup\", {\n    label: \"Blue Fish\"\n  }, __jsx(\"option\", {\n    value: \"sothis\"\n  }, \"Sothis\"), __jsx(\"option\", {\n    value: \"coral_manta\"\n  }, \"Coral Manta\"), __jsx(\"option\", {\n    value: \"elasmosaurus\"\n  }, \"Elasmosaurus\"), __jsx(\"option\", {\n    value: \"stonescale\"\n  }, \"Stonescale\")), __jsx(\"optgroup\", {\n    label: \"Achievements\"\n  }, __jsx(\"option\", {\n    value: \"jellyfish\"\n  }, \"Jellyfish\"), __jsx(\"option\", {\n    value: \"seadragons\"\n  }, \"Seadragons\"), __jsx(\"option\", {\n    value: \"sharks\"\n  }, \"Sharks\"), __jsx(\"option\", {\n    value: \"octopodes\"\n  }, \"Octopodes\")))))), __jsx(NoSsr, null, now && __jsx(TableContainer, {\n    component: Paper\n  }, __jsx(Table, {\n    size: \"small\",\n    className: classes.schedule\n  }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, {\n    colSpan: 2\n  }, __jsx(Typography, {\n    align: \"center\"\n  }, \"Time\")), __jsx(TableCell, {\n    colSpan: 2\n  }, __jsx(Typography, {\n    align: \"center\"\n  }, \"Route\")), __jsx(TableCell, null, __jsx(Typography, {\n    align: \"center\"\n  }, \"Objectives\")))), __jsx(TableBody, {\n    onMouseOut: handleHoverRow.none\n  }, upcomingVoyages.map(({\n    day,\n    hour,\n    destinationCode\n  }) => {\n    const time = LULU_EPOCH.clone().add(day, 'days').add(hour, 'hours').utcOffset(moment().utcOffset());\n    const date = time.format('M/D');\n    return __jsx(TableRow, {\n      key: `${day}:${hour}`,\n      hover: filter === 'none',\n      className: cn(filter === 'none' && hover === destinationCode && classes.hoverRow),\n      onMouseOver: handleHoverRow[destinationCode],\n      onClick: handleSelectRow[destinationCode]\n    }, __jsx(TableCell, {\n      className: classes.dateCell\n    }, previousDate !== (previousDate = date) && __jsx(Typography, {\n      align: \"right\"\n    }, date)), __jsx(TableCell, null, __jsx(Typography, null, time.format('HH:mm'))), __jsx(TableCell, null, __jsx(Typography, {\n      align: \"right\"\n    }, DEST_MAP[destinationCode[0]])), __jsx(TableCell, {\n      className: classes.timeCell\n    }, TIME_MAP[destinationCode[1]]), __jsx(TableCell, {\n      className: classes.objectivesCell\n    }, OBJECTIVES_MAP[destinationCode].map((name, index) => __jsx(OceanFishIcon, {\n      key: index,\n      name: name\n    }))));\n  }))))));\n}","map":null,"metadata":{},"sourceType":"module"}