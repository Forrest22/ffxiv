{"ast":null,"code":"export function paddedZero(n) {\n  return n > 9 ? String(n) : '0' + n;\n}\nexport function formatTime(date) {\n  return `${paddedZero(date.getUTCHours())}:${paddedZero(date.getUTCMinutes())}`;\n}\nexport function toTimeString(now, padded) {\n  const hours = now.getHours();\n  const minutes = now.getMinutes();\n  const displayHours = hours % 12 === 0 ? 12 : hours % 12;\n  return `${padded && displayHours < 10 ? 'â€‡' + displayHours : displayHours}:${paddedZero(minutes)} ${hours < 12 ? 'AM' : 'PM'}`;\n}\n\nfunction getTimeUntil(now, then) {\n  const diff = then.getTime() - now.getTime();\n  let days = diff / 86400000;\n\n  if (days >= 1) {\n    days = Math.round(days);\n    return `${days} ${days > 1 ? 'days' : 'day'}`;\n  }\n\n  let hours = diff / 3600000;\n\n  if (hours >= 1) {\n    hours = Math.round(hours);\n    return `${hours} ${hours > 1 ? 'hours' : 'hour'}`;\n  }\n\n  const minutes = Math.round(diff / 60000);\n  return `${minutes} ${minutes > 1 ? 'minutes' : 'minute'}`;\n}\n\nexport function timeUntil(now, then, full) {\n  const diff = then.getTime() - now.getTime();\n\n  if (Math.abs(diff) < 60000) {\n    return 'now';\n  }\n\n  if (diff < 0) {\n    const timeString = getTimeUntil(then, now);\n    return full ? `last was ${timeString} ago at ${toTimeString(then)}` : `${timeString} ago`;\n  } else {\n    const timeString = getTimeUntil(now, then);\n    return full ? `next is in ${timeString} at ${toTimeString(then)}` : `in ${timeString}`;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}