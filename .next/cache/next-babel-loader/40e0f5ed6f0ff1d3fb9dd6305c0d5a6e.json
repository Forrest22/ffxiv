{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { DEST_MAP, TIME_MAP, ACHIEVEMENTS_MAP } from './maps';\nimport BAIT_GROUPS from './bait-groups';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Section from '../Section';\nimport Typography from '@material-ui/core/Typography';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Highlight from '../Highlight';\nimport RouteCardContainer from './RouteCardContainer';\nimport RouteCard from './RouteCard';\nimport BaitList from './BaitList';\nimport OceanFishIcon from './OceanFishIcon';\nimport Tug from './Tug';\nimport jellyfishMacro from './macros/jellyfish.ffmacro';\nimport seadragonsMacro from './macros/seadragons.ffmacro';\nimport octopodesMacro from './macros/octopodes.ffmacro';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    achievementInfo: {\n      marginBottom: theme.spacing(2)\n    },\n    achievementIcon: {\n      marginTop: 0,\n      marginBottom: 0,\n      fontSize: '0.65em',\n      verticalAlign: 'sub'\n    }\n  };\n});\n\nvar AchievementsInformation = function AchievementsInformation(_ref) {\n  var selectedRoute = _ref.selectedRoute;\n  if (!selectedRoute) return null;\n  var classes = useStyles();\n  var achievement = selectedRoute && ACHIEVEMENTS_MAP[selectedRoute];\n\n  switch (achievement) {\n    case 'What Did Jellyfish Do to You?':\n      return __jsx(Section, {\n        title: __jsx(React.Fragment, null, \"Jellyfish Route\", __jsx(OceanFishIcon, {\n          name: achievement,\n          className: classes.achievementIcon\n        }))\n      }, __jsx(RouteCardContainer, {\n        className: classes.achievementInfo\n      }, __jsx(RouteCard, null, __jsx(CardHeader, {\n        title: __jsx(Typography, {\n          variant: \"h6\"\n        }, \"1. \", DEST_MAP.G, \" \", TIME_MAP.D),\n        disableTypography: true\n      }), __jsx(CardContent, null, __jsx(Typography, {\n        paragraph: true\n      }, \"No jellyfish here.\"))), __jsx(RouteCard, null, __jsx(CardHeader, {\n        title: __jsx(Typography, {\n          variant: \"h6\"\n        }, \"2. \", DEST_MAP.S, \" \", TIME_MAP.S),\n        disableTypography: true\n      }), __jsx(CardContent, null, __jsx(BaitList, {\n        baitGroups: [{\n          header: 'DH at <5s',\n          baitGroup: BAIT_GROUPS['La Noscean Jelly']\n        }, {\n          header: 'IC–DH',\n          baitGroup: BAIT_GROUPS['Sea Nettle']\n        }]\n      })), __jsx(CardContent, null, __jsx(Typography, {\n        variant: \"overline\"\n      }, \"Non-spectral\"), __jsx(Typography, {\n        paragraph: true\n      }, \"Blind DH all \", __jsx(Tug.Light, null), \" before 5s, and recast after 5s. IC is not necessary.\"), __jsx(Typography, {\n        variant: \"overline\"\n      }, \"Spectral\"), __jsx(Typography, {\n        paragraph: true\n      }, \"While spectral is not recommended, it won\\u2019t kill your run.\"))), __jsx(RouteCard, null, __jsx(CardHeader, {\n        title: __jsx(Typography, {\n          variant: \"h6\"\n        }, \"3. \", DEST_MAP.R, \" \", TIME_MAP.N),\n        disableTypography: true\n      }), __jsx(CardContent, null, __jsx(BaitList, {\n        baitGroups: [{\n          header: 'IC–DH',\n          baitGroup: BAIT_GROUPS['Floating Saucer']\n        }]\n      })), __jsx(CardContent, null, __jsx(Typography, {\n        variant: \"overline\"\n      }, \"Spectral\"), __jsx(Typography, {\n        paragraph: true\n      }, \"Nothing to say about this.\")))), __jsx(Typography, {\n        paragraph: true\n      }, \"Sample jellyfish macro\"), __jsx(Highlight, {\n        language: \"plaintext\"\n      }, jellyfishMacro));\n\n    case 'What Did Seadragons Do to You?':\n      return __jsx(Section, {\n        title: __jsx(React.Fragment, null, \"Seadragons Route\", __jsx(OceanFishIcon, {\n          name: achievement,\n          className: classes.achievementIcon\n        }))\n      }, __jsx(RouteCardContainer, {\n        className: classes.achievementInfo\n      }, __jsx(RouteCard, null, __jsx(CardHeader, {\n        title: __jsx(Typography, {\n          variant: \"h6\"\n        }, \"1. \", DEST_MAP.S, \" \", TIME_MAP.N),\n        disableTypography: true\n      }), __jsx(CardContent, null, __jsx(BaitList, {\n        baitGroups: [{\n          header: 'IC–DH at 10-18s',\n          baitGroup: BAIT_GROUPS['Shaggy Seadragon']\n        }, {\n          header: 'No buffs',\n          baitGroup: BAIT_GROUPS['Aetheric Seadragon']\n        }]\n      })), __jsx(CardContent, null, __jsx(Typography, {\n        variant: \"overline\"\n      }, \"Non-spectral\"), __jsx(Typography, {\n        paragraph: true\n      }, \"There\\u2019s possibly a blind DH at 14-17s.\"), __jsx(Typography, {\n        variant: \"overline\"\n      }, \"Spectral\"), __jsx(Typography, {\n        paragraph: true\n      }, \"Spectral is bad. Sit on IC if you have it going into spectral, instead of catching Aetheric Seadragons.\"))), __jsx(RouteCard, null, __jsx(CardHeader, {\n        title: __jsx(Typography, {\n          variant: \"h6\"\n        }, \"2. \", DEST_MAP.G, \" \", TIME_MAP.D),\n        disableTypography: true\n      }), __jsx(CardContent, null, __jsx(Typography, {\n        paragraph: true\n      }, \"No seadragons here.\"))), __jsx(RouteCard, null, __jsx(CardHeader, {\n        title: __jsx(Typography, {\n          variant: \"h6\"\n        }, \"3. \", DEST_MAP.N, \" \", TIME_MAP.S),\n        disableTypography: true\n      }), __jsx(CardContent, null, __jsx(BaitList, {\n        baitGroups: [{\n          header: 'IC–DH',\n          baitGroup: BAIT_GROUPS['Coral Seadragon']\n        }]\n      })), __jsx(CardContent, null, __jsx(Typography, {\n        variant: \"overline\"\n      }, \"Spectral\"), __jsx(Typography, {\n        paragraph: true\n      }, \"Nothing to say about this.\")))), __jsx(Typography, {\n        paragraph: true\n      }, \"Sample seadragons macro\"), __jsx(Highlight, {\n        language: \"plaintext\"\n      }, seadragonsMacro));\n\n    case 'What Did Sharks Do to You?':\n      return __jsx(Section, {\n        title: __jsx(React.Fragment, null, \"Sharks Route\", __jsx(OceanFishIcon, {\n          name: achievement,\n          className: classes.achievementIcon\n        }))\n      }, __jsx(RouteCardContainer, {\n        className: classes.achievementInfo\n      }, __jsx(RouteCard, null, __jsx(CardHeader, {\n        title: __jsx(Typography, {\n          variant: \"h6\"\n        }, \"1. \", DEST_MAP.G, \" \", TIME_MAP.S),\n        disableTypography: true\n      }), __jsx(CardContent, null, __jsx(BaitList, {\n        baitGroups: [{\n          header: 'IC; DH–IC–DH post-spectral',\n          baitGroup: BAIT_GROUPS['Tarnished Shark']\n        }, {\n          header: 'IC–DH',\n          baitGroup: BAIT_GROUPS['Ghost Shark']\n        }, {\n          header: 'No buffs',\n          baitGroup: BAIT_GROUPS['Quicksilver Blade']\n        }, {\n          header: 'DH–IC–DH',\n          baitGroup: BAIT_GROUPS['Funnel Shark']\n        }]\n      })), __jsx(CardContent, null, __jsx(Typography, {\n        variant: \"overline\"\n      }, \"Pre-spectral\"), __jsx(Typography, {\n        paragraph: true\n      }, \"Save GP when possible; IC if capped.\"), __jsx(Typography, {\n        variant: \"overline\"\n      }, \"Spectral\"), __jsx(Typography, {\n        paragraph: true\n      }, \"Hook any \", __jsx(Tug.Medium, null), \" and \", __jsx(Tug.Heavy, null), \". IC\\u2013DH if you catch a Ghost Shark; \", __jsx(Tug.Heavy, null), \" is a blind DH\\u2013IC\\u2013DH.\"), __jsx(Typography, {\n        variant: \"overline\"\n      }, \"Post-spectral\"), __jsx(Typography, {\n        paragraph: true\n      }, \"Spend all remaining GP with blind DH\\u2013IC\\u2013DH Tarnished Sharks.\"))), __jsx(RouteCard, null, __jsx(CardHeader, {\n        title: __jsx(Typography, {\n          variant: \"h6\"\n        }, \"2. \", DEST_MAP.S, \" \", TIME_MAP.N),\n        disableTypography: true\n      }), __jsx(CardContent, null, __jsx(Typography, {\n        paragraph: true\n      }, \"No sharks here.\"), __jsx(Typography, {\n        paragraph: true\n      }, \"Try for Coral Manta?\", __jsx(\"br\", null), \"(but save GP)\"))), __jsx(RouteCard, null, __jsx(CardHeader, {\n        title: __jsx(Typography, {\n          variant: \"h6\"\n        }, \"3. \", DEST_MAP.R, \" \", TIME_MAP.D),\n        disableTypography: true\n      }), __jsx(CardContent, null, __jsx(BaitList, {\n        baitGroups: [{\n          header: 'IC–DH; DH–IC–DH post-spectral',\n          baitGroup: BAIT_GROUPS['Chrome Hammerhead']\n        }, {\n          header: 'No buffs',\n          baitGroup: BAIT_GROUPS.Sweeper\n        }, {\n          header: 'DH–IC–DH',\n          baitGroup: BAIT_GROUPS.Executioner\n        }]\n      })), __jsx(CardContent, null, __jsx(Typography, {\n        variant: \"overline\"\n      }, \"Pre-spectral\"), __jsx(Typography, {\n        paragraph: true\n      }, \"Can\\u2019t blind DH Chrome Hammerheads.\"), __jsx(Typography, {\n        variant: \"overline\"\n      }, \"Spectral\"), __jsx(Typography, {\n        paragraph: true\n      }, \"Hook \", __jsx(Tug.Medium, null), \" and \", __jsx(Tug.Heavy, null), \". If you catch a Sweeper, can use IC if high on GP. \", __jsx(Tug.Heavy, null), \" is a blind DH.\"), __jsx(Typography, {\n        variant: \"overline\"\n      }, \"Post-spectral\"), __jsx(Typography, {\n        paragraph: true\n      }, \"Can blind DH Chrome Hammerheads.\")))));\n\n    case 'What Did Octopodes Do to You?':\n      return __jsx(Section, {\n        title: __jsx(React.Fragment, null, \"Octopodes Route\", __jsx(OceanFishIcon, {\n          name: achievement,\n          className: classes.achievementIcon\n        }))\n      }, __jsx(RouteCardContainer, {\n        className: classes.achievementInfo\n      }, __jsx(RouteCard, null, __jsx(CardHeader, {\n        title: __jsx(Typography, {\n          variant: \"h6\"\n        }, \"1. \", DEST_MAP.S, \" \", TIME_MAP.D),\n        disableTypography: true\n      }), __jsx(CardContent, null, __jsx(Typography, {\n        paragraph: true\n      }, \"No octopodes here.\"))), __jsx(RouteCard, null, __jsx(CardHeader, {\n        title: __jsx(Typography, {\n          variant: \"h6\"\n        }, \"2. \", DEST_MAP.G, \" \", TIME_MAP.S),\n        disableTypography: true\n      }), __jsx(CardContent, null, __jsx(BaitList, {\n        baitGroups: [{\n          header: 'IC–DH at 16-28s',\n          baitGroup: BAIT_GROUPS['Cyan Octopus']\n        }, {\n          header: 'DH–IC–DH at <3s',\n          baitGroup: BAIT_GROUPS['Merman’s Mane']\n        }]\n      })), __jsx(CardContent, null, __jsx(Typography, {\n        variant: \"overline\"\n      }, \"Non-spectral\"), __jsx(Typography, {\n        paragraph: true\n      }, \"Can blind DH the Cyan Octopodes at 25s, or at 19s with a SS\\u2019d Jasperhead.\"), __jsx(Typography, {\n        variant: \"overline\"\n      }, \"Spectral\"), __jsx(Typography, {\n        paragraph: true\n      }, \"Only the instant \", __jsx(Tug.Medium, null), \" is Merman\\u2019s Mane; any later is not.\"))), __jsx(RouteCard, null, __jsx(CardHeader, {\n        title: __jsx(Typography, {\n          variant: \"h6\"\n        }, \"3. \", DEST_MAP.R, \" \", TIME_MAP.D),\n        disableTypography: true\n      }), __jsx(CardContent, null, __jsx(BaitList, {\n        baitGroups: [{\n          header: 'DH–IC–DH at 4s',\n          baitGroup: BAIT_GROUPS.Mopbeard\n        }]\n      })), __jsx(CardContent, null, __jsx(Typography, {\n        variant: \"overline\"\n      }, \"Spectral\"), __jsx(Typography, {\n        paragraph: true\n      }, \"The earlier \", __jsx(Tug.Medium, null), \" is Coccosteus.\")))), __jsx(Typography, {\n        paragraph: true\n      }, \"Sample octopodes macro\"), __jsx(Highlight, {\n        language: \"plaintext\"\n      }, octopodesMacro));\n\n    default:\n      return null;\n  }\n};\n\nexport default AchievementsInformation;","map":null,"metadata":{},"sourceType":"module"}