{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState } from 'react';\nimport { useQueryState } from 'next-usequerystate';\nimport { makeStyles } from '@material-ui/core/styles';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Section from '../Section';\nimport UpcomingWeatherTable from './UpcomingWeatherTable';\nimport { getRegions, getPlaces, getWeatherRates, getPossibleWeathers, translatePlace } from './weather';\nimport { useTranslation } from '../i18n';\nvar REGIONS = getRegions();\nvar useStyles = makeStyles(function (theme) {\n  return {\n    options: {\n      marginBottom: theme.spacing(2)\n    }\n  };\n});\n\nvar UpcomingWeather = function UpcomingWeather(_ref) {\n  var now = _ref.now;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation('skywatcher'),\n      t = _useTranslation.t,\n      i18n = _useTranslation.i18n;\n\n  var _useQueryState = useQueryState('filter', {\n    parse: function parse(query) {\n      return query && REGIONS.includes(Number(query)) ? Number(query) : null;\n    }\n  }),\n      _useQueryState2 = _slicedToArray(_useQueryState, 2),\n      filter = _useQueryState2[0],\n      setFilter = _useQueryState2[1];\n\n  var _useState = useState(true),\n      showLabels = _useState[0],\n      setShowLabels = _useState[1];\n\n  var _useState2 = useState(false),\n      showLocalTime = _useState2[0],\n      setShowLocalTime = _useState2[1];\n\n  var _useState3 = useState(false),\n      showAllPlaces = _useState3[0],\n      setShowAllPlaces = _useState3[1];\n\n  var _useState4 = useState(false),\n      showWeatherChance = _useState4[0],\n      setShowWeatherChance = _useState4[1];\n\n  var locale = i18n.language;\n\n  var handleSelectFilter = function handleSelectFilter(event) {\n    var filter = event.target.value === 'none' ? null : +event.target.value;\n    setFilter(filter);\n  };\n\n  var handleToggleLabels = function handleToggleLabels() {\n    setShowLabels(!showLabels);\n  };\n\n  var handleToggleLocalTime = function handleToggleLocalTime() {\n    setShowLocalTime(!showLocalTime);\n  };\n\n  var handleToggleShowAllPlaces = function handleToggleShowAllPlaces() {\n    setShowAllPlaces(!showAllPlaces);\n  };\n\n  var handleToggleWeatherChance = function handleToggleWeatherChance() {\n    setShowWeatherChance(!showWeatherChance);\n  };\n\n  return /*#__PURE__*/_jsxs(Section, {\n    title: t('upcomingWeather'),\n    children: [/*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 1,\n      className: classes.options,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxs(FormControl, {\n          variant: \"filled\",\n          fullWidth: true,\n          margin: \"dense\",\n          children: [/*#__PURE__*/_jsx(InputLabel, {\n            children: t('selectRegion')\n          }), /*#__PURE__*/_jsx(NoSsr, {\n            children: /*#__PURE__*/_jsxs(Select, {\n              onChange: handleSelectFilter,\n              value: filter || 'none',\n              children: [/*#__PURE__*/_jsx(MenuItem, {\n                value: \"none\",\n                children: t('showAllRegions')\n              }), REGIONS.map(function (region) {\n                return /*#__PURE__*/_jsx(MenuItem, {\n                  value: region,\n                  children: translatePlace(region, locale)\n                }, region);\n              })]\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsx(FormControlLabel, {\n          control: /*#__PURE__*/_jsx(Checkbox, {\n            checked: showLabels,\n            onChange: handleToggleLabels,\n            color: \"primary\"\n          }),\n          label: t('showLabels')\n        }), /*#__PURE__*/_jsx(FormControlLabel, {\n          control: /*#__PURE__*/_jsx(Checkbox, {\n            checked: showLocalTime,\n            onChange: handleToggleLocalTime,\n            color: \"primary\"\n          }),\n          label: t('showLocalTimes')\n        }), /*#__PURE__*/_jsx(FormControlLabel, {\n          control: /*#__PURE__*/_jsx(Checkbox, {\n            checked: showAllPlaces,\n            onChange: handleToggleShowAllPlaces,\n            color: \"primary\"\n          }),\n          label: t('showAllPlaces')\n        }), /*#__PURE__*/_jsx(FormControlLabel, {\n          control: /*#__PURE__*/_jsx(Checkbox, {\n            checked: showWeatherChance,\n            onChange: handleToggleWeatherChance,\n            color: \"primary\"\n          }),\n          label: /*#__PURE__*/_jsxs(_Fragment, {\n            children: [\"Show \", /*#__PURE__*/_jsx(\"code\", {\n              children: \"weatherChance\"\n            })]\n          })\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(NoSsr, {\n      children: (filter ? [filter] : REGIONS).map(function (region) {\n        var places = getPlaces(region).flatMap(function (place) {\n          return getWeatherRates(place).map(function (_, index) {\n            return {\n              place: place,\n              weatherRateIndex: index\n            };\n          });\n        });\n        return /*#__PURE__*/_jsxs(Section, {\n          children: [/*#__PURE__*/_jsx(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: translatePlace(region, locale)\n          }), /*#__PURE__*/_jsx(UpcomingWeatherTable, {\n            now: now,\n            places: showAllPlaces ? places : places.filter(function (_ref2) {\n              var place = _ref2.place,\n                  weatherRateIndex = _ref2.weatherRateIndex;\n              return getPossibleWeathers(place, weatherRateIndex).length > 1;\n            }),\n            showLabels: showLabels,\n            showLocalTime: showLocalTime,\n            showWeatherChance: showWeatherChance\n          })]\n        }, region);\n      })\n    })]\n  });\n};\n\nexport default UpcomingWeather;","map":null,"metadata":{},"sourceType":"module"}