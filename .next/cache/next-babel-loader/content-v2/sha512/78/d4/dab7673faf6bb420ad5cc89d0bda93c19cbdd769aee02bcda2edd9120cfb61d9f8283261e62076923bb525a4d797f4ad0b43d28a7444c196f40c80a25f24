{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport WeatherIcon from './WeatherIcon';\nimport renderFfxiv from './render-ffxiv';\nimport { getSeed, getHashes, getWeather, translatePlace } from './ffxiv-skywatcher';\nimport { formatTime, formatTimeUtc } from '../utils';\nimport { useTranslation } from '../i18n';\nvar WEATHER_CELL_WIDTH = 75;\nvar useStyles = makeStyles(function (theme) {\n  return {\n    weatherTable: {\n      overflow: 'hidden',\n      '& thead th': {\n        fontWeight: 'normal',\n        '&$current': {\n          fontWeight: 'bold'\n        }\n      },\n      ':not(:last-child) > &': {\n        marginBottom: theme.spacing(4)\n      }\n    },\n    weatherTime: {\n      textAlign: 'center',\n      paddingLeft: theme.spacing(0.5),\n      paddingRight: theme.spacing(0.5),\n      '&:last-child': {\n        paddingRight: theme.spacing(1),\n        width: WEATHER_CELL_WIDTH + theme.spacing(1.5)\n      }\n    },\n    regionCell: {\n      minWidth: 200\n    },\n    weatherCell: {\n      width: WEATHER_CELL_WIDTH + theme.spacing(1),\n      paddingLeft: theme.spacing(0.5),\n      paddingRight: theme.spacing(0.5),\n      textAlign: 'center',\n      verticalAlign: 'top',\n      lineHeight: 1,\n      '& span': {\n        display: 'inline-block',\n        width: WEATHER_CELL_WIDTH,\n        lineHeight: 1.1\n      },\n      '&:last-child': {\n        paddingRight: theme.spacing(1),\n        width: WEATHER_CELL_WIDTH + theme.spacing(1.5)\n      }\n    },\n    current: {\n      position: 'relative',\n      backgroundColor: theme.palette.action.hover\n    }\n  };\n});\n\nvar UpcomingWeatherTable = function UpcomingWeatherTable(_ref) {\n  var now = _ref.now,\n      places = _ref.places,\n      _ref$showLabels = _ref.showLabels,\n      showLabels = _ref$showLabels === void 0 ? false : _ref$showLabels,\n      _ref$showLocalTime = _ref.showLocalTime,\n      showLocalTime = _ref$showLocalTime === void 0 ? false : _ref$showLocalTime,\n      _ref$count = _ref.count,\n      count = _ref$count === void 0 ? 10 : _ref$count,\n      _ref$hidePlaceName = _ref.hidePlaceName,\n      hidePlaceName = _ref$hidePlaceName === void 0 ? false : _ref$hidePlaceName;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      i18n = _useTranslation.i18n;\n\n  var currentSeed = getSeed(now);\n  var hashes = getHashes(currentSeed - 1, count);\n  var locale = i18n.language;\n  return /*#__PURE__*/_jsx(TableContainer, {\n    children: /*#__PURE__*/_jsxs(Table, {\n      size: \"small\",\n      className: classes.weatherTable,\n      children: [/*#__PURE__*/_jsx(TableHead, {\n        children: /*#__PURE__*/_jsxs(TableRow, {\n          children: [!hidePlaceName && /*#__PURE__*/_jsx(TableCell, {}), hashes.map(function (_, index) {\n            var eorzeanTime = new Date((currentSeed - 1 + index) * 28800000);\n            var localTime = new Date(eorzeanTime.getTime() / (1440 / 70));\n            return /*#__PURE__*/_jsx(TableCell, {\n              className: clsx(classes.weatherTime, index === 1 && classes.current),\n              children: showLocalTime ? index === 1 ? /*#__PURE__*/_jsxs(_Fragment, {\n                children: [formatTimeUtc(new Date(now.getTime() * (1440 / 70))), \" ET\", /*#__PURE__*/_jsx(\"br\", {}), formatTime(now), \" LT\"]\n              }) : /*#__PURE__*/_jsxs(_Fragment, {\n                children: [formatTimeUtc(eorzeanTime), \" ET\", /*#__PURE__*/_jsx(\"br\", {}), formatTime(localTime), \" LT\"]\n              }) : index === 1 ? formatTimeUtc(new Date(now.getTime() * (1440 / 70))) : formatTimeUtc(eorzeanTime)\n            }, index);\n          })]\n        })\n      }), /*#__PURE__*/_jsx(TableBody, {\n        children: places.map(function (_ref2) {\n          var place = _ref2.place,\n              weatherRateIndex = _ref2.weatherRateIndex;\n          return /*#__PURE__*/_jsxs(TableRow, {\n            hover: true,\n            children: [!hidePlaceName && /*#__PURE__*/_jsx(TableCell, {\n              component: \"th\",\n              scope: \"row\",\n              className: classes.regionCell,\n              children: /*#__PURE__*/_jsxs(Typography, {\n                children: [renderFfxiv(translatePlace(place, locale)), weatherRateIndex > 0 && \" (alt. \".concat(weatherRateIndex, \")\")]\n              })\n            }), hashes.map(function (hash, index) {\n              return /*#__PURE__*/_jsx(TableCell, {\n                className: clsx(classes.weatherCell, index === 1 && classes.current),\n                children: /*#__PURE__*/_jsx(WeatherIcon, {\n                  weather: getWeather(place, weatherRateIndex, hash),\n                  showLabel: showLabels\n                })\n              }, index);\n            })]\n          }, \"\".concat(place, \"-\").concat(weatherRateIndex));\n        })\n      })]\n    })\n  });\n};\n\nexport default UpcomingWeatherTable;","map":null,"metadata":{},"sourceType":"module"}