{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useRef, useState } from 'react';\nvar CHOCOBO_BOUNDS = {\n  x: 11,\n  y: 3,\n  width: 135,\n  height: 173\n};\nvar SADDLE_BOUNDS = {\n  x: 148,\n  y: 0,\n  width: 88,\n  height: 121\n};\nvar FEET_BOUNDS = {\n  x: 151,\n  y: 128,\n  width: 81,\n  height: 74\n};\n\nfunction addImageData(source, imageData, x, y) {\n  for (var i = 0; i < imageData.width; ++i) {\n    for (var j = 0; j < imageData.height; ++j) {\n      var u = x + i;\n      var v = y + j;\n      var sD = source.data;\n      var nD = imageData.data;\n      var sI = (v * source.width + u) * 4;\n      var nI = (j * imageData.width + i) * 4;\n      var sR = sD[sI + 0] / 255,\n          sG = sD[sI + 1] / 255,\n          sB = sD[sI + 2] / 255,\n          sA = sD[sI + 3] / 255;\n      var nR = nD[nI + 0] / 255,\n          nG = nD[nI + 1] / 255,\n          nB = nD[nI + 2] / 255,\n          nA = nD[nI + 3] / 255;\n      var a = 1 - (1 - nA) * (1 - sA);\n      sD[sI + 0] = (nR * nA / a + sR * sA * (1 - nA) / a) * 255;\n      sD[sI + 1] = (nG * nA / a + sG * sA * (1 - nA) / a) * 255;\n      sD[sI + 2] = (nB * nA / a + sB * sA * (1 - nA) / a) * 255;\n      sD[sI + 3] = a * 255;\n    }\n  }\n}\n\nfunction drawChocobo(ctx, imageData, color) {\n  var chocoboImageData = ctx.createImageData(136, 219);\n  var stainedChocoboImageData = ctx.createImageData(imageData.chocobo);\n\n  for (var i = 0; i < stainedChocoboImageData.data.length; i += 4) {\n    stainedChocoboImageData.data[i + 0] = imageData.chocobo.data[i + 0] / 255 * color.R;\n    stainedChocoboImageData.data[i + 1] = imageData.chocobo.data[i + 1] / 255 * color.G;\n    stainedChocoboImageData.data[i + 2] = imageData.chocobo.data[i + 2] / 255 * color.B;\n    stainedChocoboImageData.data[i + 3] = imageData.chocobo.data[i + 3];\n  }\n\n  addImageData(chocoboImageData, stainedChocoboImageData, 1, 0);\n  addImageData(chocoboImageData, imageData.saddle, 0, 3);\n  addImageData(chocoboImageData, imageData.feet, 17, 145);\n  return chocoboImageData;\n}\n\nvar ChocoboCompanionPreview = function ChocoboCompanionPreview(_ref) {\n  var color = _ref.color;\n  var canvasRef = useRef(null);\n\n  var _useState = useState(null),\n      imageData = _useState[0],\n      setImageData = _useState[1];\n\n  useEffect(function () {\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n\n    if (ctx !== null) {\n      var image = new Image();\n      image.addEventListener('load', function () {\n        canvas.width = image.width;\n        canvas.height = image.height;\n        ctx.drawImage(image, 0, 0, image.width, image.height);\n        setImageData({\n          chocobo: ctx.getImageData(CHOCOBO_BOUNDS.x, CHOCOBO_BOUNDS.y, CHOCOBO_BOUNDS.width, CHOCOBO_BOUNDS.height),\n          saddle: ctx.getImageData(SADDLE_BOUNDS.x, SADDLE_BOUNDS.y, SADDLE_BOUNDS.width, SADDLE_BOUNDS.height),\n          feet: ctx.getImageData(FEET_BOUNDS.x, FEET_BOUNDS.y, FEET_BOUNDS.width, FEET_BOUNDS.height)\n        });\n      }, false);\n      image.src = '/images/chocobo-color/chocobo-companion.png';\n    } else {\n      console.error('Something is very wrong!');\n    }\n  }, []);\n  useEffect(function () {\n    if (imageData !== null) {\n      var _canvasRef$current;\n\n      var ctx = canvasRef === null || canvasRef === void 0 ? void 0 : (_canvasRef$current = canvasRef.current) === null || _canvasRef$current === void 0 ? void 0 : _canvasRef$current.getContext('2d');\n\n      if (ctx != null) {\n        ctx.putImageData(drawChocobo(ctx, imageData, color), 0, 0);\n      } else {\n        console.error('Something is very wrong!');\n      }\n    }\n  }, [imageData, color]);\n\n  if (imageData !== null) {\n    return /*#__PURE__*/_jsx(\"canvas\", {\n      ref: canvasRef,\n      width: 136,\n      height: 219\n    });\n  } else {\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: \"Loading...\"\n    });\n  }\n};\n\nexport default ChocoboCompanionPreview;","map":null,"metadata":{},"sourceType":"module"}