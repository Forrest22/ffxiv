{"ast":null,"code":"import { timeUntil as genericTimeUntil } from '../utils';\nimport { fishingSpots, baits, fishes } from './ffxiv-ocean-fishing/data';\nimport { getStopTimes } from './ffxiv-ocean-fishing';\nimport * as maps from './maps';\n\nfunction memoize(func, getKey) {\n  const cache = {};\n\n  const _func = arg => {\n    const key = getKey(arg);\n    const cache = _func.cache;\n    return cache[key] !== undefined ? cache[key] : cache[key] = func(arg);\n  };\n\n  _func.cache = cache;\n  return _func;\n}\n\nexport function timeUntil(now, then, options) {\n  const diff = then.getTime() - now.getTime();\n\n  if (diff < -900000) {\n    return options.t('routeInfo.enRoute');\n  } else if (diff < 0) {\n    return options.t('routeInfo.boardingNow');\n  } else {\n    return genericTimeUntil(now, then, options);\n  }\n}\nexport function getBlueFish(stopTime) {\n  const blueFish = maps.BLUE_FISH_MAP[stopTime[0]];\n  const spreadsheetData = blueFish.spreadsheetData;\n\n  if (spreadsheetData.time !== null) {\n    if (spreadsheetData.time.includes(stopTime[1])) {\n      return blueFish;\n    }\n  }\n\n  return null;\n}\nexport function isBaitRequired(fish, bait) {\n  for (const otherBaitId of Object.keys(fish.biteTimes)) {\n    if (otherBaitId === 'all' || +otherBaitId === bait.id || +otherBaitId === 29717) {\n      continue;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport const getBaitChain = memoize(function _getBaitChain(fish) {\n  const {\n    bestBait: bait,\n    mooch,\n    tug\n  } = fish.spreadsheetData;\n\n  if (bait === null && mooch === null) {\n    return [{\n      bait: baits[29717]\n    }, {\n      fish,\n      tug\n    }]; // Versatile Lure as fallback\n  } else {\n    return bait !== null ? [{\n      bait\n    }, {\n      fish,\n      tug\n    }] : [..._getBaitChain(mooch), {\n      fish,\n      tug\n    }];\n  }\n}, fish => String(fish.id));\nexport const getBaitGroup = memoize(fish => {\n  const {\n    intuition\n  } = fish.spreadsheetData;\n  const baitChain = getBaitChain(fish);\n  return {\n    baits: baitChain,\n    baitIsRequired: isBaitRequired(fish, baitChain[0].bait),\n    intuitionFishes: intuition !== null ? intuition.map(({\n      fish,\n      count\n    }) => {\n      const baitChain = getBaitChain(fish);\n      return {\n        baits: baitChain,\n        baitIsRequired: isBaitRequired(fish, baitChain[0].bait),\n        count\n      };\n    }) : undefined\n  };\n}, fish => String(fish.id)); // See https://discord.com/channels/327124808217395200/679407580430467092/864238268514041917\n\ngetBaitGroup.cache = {\n  // Stonescale\n  29790: {\n    baits: getBaitChain(fishes[29790]),\n    baitIsRequired: true,\n    intuitionFishes: [{\n      baits: [{\n        bait: baits[2591]\n      }, {\n        fish: fishes[29769],\n        tug: 2\n      }],\n      baitIsRequired: false,\n      count: 1\n    }, {\n      baits: [{\n        bait: baits[29714]\n      }, {\n        fish: fishes[29768],\n        tug: 1\n      }],\n      baitIsRequired: false,\n      count: 1\n    }]\n  },\n  // Hafgufa\n  32074: {\n    baits: getBaitChain(fishes[32074]),\n    baitIsRequired: true,\n    intuitionFishes: [{\n      baits: [{\n        bait: baits[29716]\n      }, {\n        fish: fishes[32070],\n        tug: 3\n      }],\n      baitIsRequired: false,\n      count: 2\n    }, {\n      baits: [{\n        bait: baits[27590]\n      }, {\n        fish: fishes[32067],\n        tug: 2\n      }],\n      baitIsRequired: false,\n      count: 1\n    }]\n  },\n  // Seafaring Toad\n  32094: {\n    baits: getBaitChain(fishes[32094]),\n    baitIsRequired: true,\n    intuitionFishes: [{\n      baits: [{\n        bait: baits[2587]\n      }, {\n        fish: fishes[32089],\n        tug: 2\n      }],\n      baitIsRequired: false,\n      count: 3\n    }]\n  }\n};\n\nif (false) {\n  Object.assign(window, {\n    BaitCache1: getBaitChain.cache,\n    BaitCache2: getBaitGroup.cache\n  });\n}\n\nexport function subtextDH(fish) {\n  const doubleHook = fish.spreadsheetData.doubleHook;\n  return doubleHook !== null ? `DH: ${Array.isArray(doubleHook) ? doubleHook.join('-') : doubleHook}` : 'DH: ?';\n}\nexport function subtextBiteTime(fish) {\n  const biteTimeAll = fish.biteTimes.all;\n  return biteTimeAll !== null ? `${biteTimeAll[0] === biteTimeAll[1] ? biteTimeAll[0] : biteTimeAll.join('-')}s` : '?s';\n}\nexport function upperFirst(str) {\n  return str.length === 0 ? '' : str[0].toUpperCase() + str.slice(1);\n}\nexport function cleanObjective(objective) {\n  return objective.replace(/<[^<>]*?\\/>/g, '');\n}\nexport function cleanRequirement(requirement) {\n  return upperFirst(requirement.replace(/^(Requirement:|Bedingung:|Condition :|達成条件：|达成条件：|달성 조건: )/, '').trim());\n}\nexport function isUncaughtRoute(destTime, checklist) {\n  for (const stopTime of getStopTimes(destTime)) {\n    const nonSpectralFishingSpot = maps.STOP_MAP[stopTime[0]];\n\n    for (const fish of nonSpectralFishingSpot.fishes) {\n      if (!checklist.includes(fish.id)) {\n        return true;\n      }\n    }\n\n    const spectralFishingSpot = fishingSpots[nonSpectralFishingSpot.id + 1];\n\n    for (const fish of spectralFishingSpot.fishes) {\n      if (fish.spreadsheetData.time !== null && !fish.spreadsheetData.time.includes(stopTime[1])) {\n        continue;\n      }\n\n      if (!checklist.includes(fish.id)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"module"}