{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Weather } from './src/types/weather';\nimport { Place } from './src/types/place';\nimport partition from './data/partition.json';\nimport weatherRates from './data/weather-rates.json';\nexport { Weather };\nexport { Place };\nexport { default as translateWeather } from './src/translate-weather';\nexport { default as translatePlace } from './src/translate-place'; // Having these two functions is so ugly\n\nexport function getRegions() {\n  return Object.keys(partition.partition).map(function (key) {\n    return Number(key);\n  }).sort(function (a, b) {\n    return a - b;\n  });\n}\nexport function getPlaces(region) {\n  return partition.partition[region].sort(function (a, b) {\n    return a - b;\n  });\n}\nexport function getSeed() {\n  var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n  return Math.floor(date.getTime() / 1400000);\n}\nexport function getDate() {\n  var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getSeed();\n  return new Date(seed * 1400000);\n}\nexport function hashSeed() {\n  var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getSeed();\n  var base = Math.floor(seed / 3) * 100 + (seed + 1) % 3 * 8;\n  var step1 = (base << 11 ^ base) >>> 0;\n  var step2 = (step1 >>> 8 ^ step1) >>> 0;\n  return step2 % 100;\n}\nexport function getHashes() {\n  var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getSeed();\n  var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  var hashes = [];\n\n  for (var index = 0; index < count; ++index) {\n    hashes.push(hashSeed(seed + index));\n  }\n\n  return hashes;\n}\nexport function getWeather(place) {\n  var weatherRateIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var hash = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : hashSeed();\n  var rates = weatherRates[partition.weatherRates[place][weatherRateIndex]].Rates;\n\n  var _iterator = _createForOfIteratorHelper(rates),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          chance = _step$value[0],\n          weather = _step$value[1];\n\n      if (chance > hash) {\n        return weather;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nexport function getWeatherRates(place) {\n  return partition.weatherRates[place];\n}\nexport function getPossibleWeathers(place) {\n  var weatherRateIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var rates = weatherRates[partition.weatherRates[place][weatherRateIndex]].Rates;\n  return rates.map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        weather = _ref2[1];\n\n    return weather;\n  });\n}\nexport function forecastWeathers(place) {\n  var weatherRateIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var filter = arguments.length > 2 ? arguments[2] : undefined;\n  var seed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : getSeed();\n  var count = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 10;\n  var results = [];\n  var prevHash = hashSeed(seed - 1);\n  var prevWeather = getWeather(place, weatherRateIndex, prevHash);\n\n  for (var i = 0; results.length < count && i < 100000; ++i) {\n    var currHash = hashSeed(seed);\n\n    var _currWeather = getWeather(place, weatherRateIndex, currHash);\n\n    if (!filter || filter(prevWeather, _currWeather, seed)) {\n      results.push({\n        prevWeather: prevWeather,\n        currWeather: _currWeather,\n        seed: seed,\n        date: getDate(seed)\n      });\n    }\n\n    prevHash = currHash;\n    prevWeather = _currWeather;\n    ++seed;\n  }\n\n  return results;\n}","map":null,"metadata":{},"sourceType":"module"}