{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport roegadynDictionary from './data/roegadyn-dictionary.json';\nexport function randomElement() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n\n  if (arrays.length === 0) {\n    return undefined;\n  } else if (arrays.length === 1) {\n    return arrays[0][Math.floor(Math.random() * arrays[0].length)];\n  } else {\n    var totalElements = arrays.reduce(function (acc, curr) {\n      return acc + curr.length;\n    }, 0);\n    var index = Math.floor(Math.random() * totalElements);\n    var currIndex = 0;\n\n    var _iterator = _createForOfIteratorHelper(arrays),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var array = _step.value;\n        currIndex += array.length;\n\n        if (currIndex > index) {\n          return array[array.length + index - currIndex];\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n}\nexport function upperFirst(string) {\n  if (!string) return '';\n  string = string.replace(/[^a-z'-]/ig, '');\n  return string[0].toUpperCase() + string.slice(1).toLowerCase();\n}\nexport function formatName(forename, surname) {\n  return (upperFirst(forename) + ' ' + upperFirst(surname)).trim();\n}\nexport function conjugateRoegadyn(word, grammar) {\n  word = upperFirst(word.replace(/\\s+/g, ''));\n  var entry = roegadynDictionary[word]; // If this word does not appear in the dictionary, leave it alone\n\n  if (!entry) {\n    return word;\n  } // If this word has the conjugation listed, use it\n\n\n  if (entry.derivatives && entry.derivatives[grammar]) {\n    return entry.derivatives[grammar];\n  } // If this word is already the requested grammar, leave it alone\n\n\n  if (entry.grammar === grammar || entry.grammar === 'AN') {\n    return word;\n  } // Use the N -> A rule\n\n\n  if (entry.grammar === 'N' && grammar === 'A') {\n    return word + 'i';\n  } // Use the V -> N rule\n\n\n  if (entry.grammar === 'V' && grammar === 'N') {\n    return word + 'a';\n  } // Use the V -> A rule\n\n\n  if (entry.grammar === 'V' && grammar === 'A') {\n    return word + 'n';\n  } // Do not know how to conjugate this word or grammar\n\n\n  return word;\n}\nexport function combineRoegadyn() {\n  for (var _len2 = arguments.length, words = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    words[_key2] = arguments[_key2];\n  }\n\n  return upperFirst(words.map(function (word, index) {\n    if (index === 0) return word;\n    var previousWord = words[index - 1];\n\n    if (word.charAt(0).toLowerCase() === previousWord.charAt(previousWord.length - 1)) {\n      return word.slice(1);\n    } else {\n      return word;\n    }\n  }).join(''));\n}","map":null,"metadata":{},"sourceType":"module"}