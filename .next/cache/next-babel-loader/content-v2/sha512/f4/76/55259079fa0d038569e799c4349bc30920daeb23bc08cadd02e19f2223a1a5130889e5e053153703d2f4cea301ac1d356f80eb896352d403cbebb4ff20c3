{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport WeatherIcon from './WeatherIcon';\nimport renderFfxiv from './render-ffxiv';\nimport { getSeed, getHashes, getWeather, translatePlace } from './ffxiv-skywatcher';\nimport { formatTime } from '../utils';\nimport { useTranslation } from '../i18n';\nconst WEATHER_CELL_WIDTH = 75;\nconst useStyles = makeStyles(theme => ({\n  weatherTable: {\n    overflow: 'hidden',\n    '& thead th': {\n      fontWeight: 'normal',\n      '&$current': {\n        fontWeight: 'bold'\n      }\n    },\n    ':not(:last-child) > &': {\n      marginBottom: theme.spacing(4)\n    }\n  },\n  weatherTime: {\n    textAlign: 'center',\n    paddingLeft: theme.spacing(0.5),\n    paddingRight: theme.spacing(0.5),\n    '&:last-child': {\n      paddingRight: theme.spacing(1),\n      width: WEATHER_CELL_WIDTH + theme.spacing(1.5)\n    }\n  },\n  regionCell: {\n    minWidth: 200\n  },\n  weatherCell: {\n    width: WEATHER_CELL_WIDTH + theme.spacing(1),\n    paddingLeft: theme.spacing(0.5),\n    paddingRight: theme.spacing(0.5),\n    textAlign: 'center',\n    verticalAlign: 'top',\n    lineHeight: 1,\n    '& span': {\n      display: 'inline-block',\n      width: WEATHER_CELL_WIDTH,\n      lineHeight: 1.1\n    },\n    '&:last-child': {\n      paddingRight: theme.spacing(1),\n      width: WEATHER_CELL_WIDTH + theme.spacing(1.5)\n    }\n  },\n  current: {\n    position: 'relative',\n    backgroundColor: theme.palette.action.hover\n  }\n}));\n\nconst UpcomingWeatherTable = ({\n  now,\n  places,\n  showLabels,\n  showLocalTime\n}) => {\n  const classes = useStyles();\n  const {\n    i18n\n  } = useTranslation();\n  const currentSeed = getSeed(now);\n  const hashes = getHashes(currentSeed - 1, 10);\n  const locale = i18n.language;\n  return /*#__PURE__*/_jsx(TableContainer, {\n    children: /*#__PURE__*/_jsxs(Table, {\n      size: \"small\",\n      className: classes.weatherTable,\n      children: [/*#__PURE__*/_jsx(TableHead, {\n        children: /*#__PURE__*/_jsxs(TableRow, {\n          children: [/*#__PURE__*/_jsx(TableCell, {}), hashes.map((_, index) => {\n            const eorzeanTime = new Date((currentSeed - 1 + index) * 28800000);\n            const localTime = new Date(eorzeanTime.getTime() / (1440 / 70));\n            return /*#__PURE__*/_jsx(TableCell, {\n              className: clsx(classes.weatherTime, index === 1 && classes.current),\n              children: showLocalTime ? index === 1 ? /*#__PURE__*/_jsxs(_Fragment, {\n                children: [formatTime(new Date(now.getTime() * (1440 / 70))), \" ET\", /*#__PURE__*/_jsx(\"br\", {}), formatTime(now), \" LT\"]\n              }) : /*#__PURE__*/_jsxs(_Fragment, {\n                children: [formatTime(eorzeanTime), \" ET\", /*#__PURE__*/_jsx(\"br\", {}), formatTime(localTime), \" LT\"]\n              }) : index === 1 ? formatTime(new Date(now.getTime() * (1440 / 70))) : formatTime(eorzeanTime)\n            }, index);\n          })]\n        })\n      }), /*#__PURE__*/_jsx(TableBody, {\n        children: places.map(({\n          place,\n          weatherRateIndex\n        }) => /*#__PURE__*/_jsxs(TableRow, {\n          hover: true,\n          children: [/*#__PURE__*/_jsx(TableCell, {\n            component: \"th\",\n            scope: \"row\",\n            className: classes.regionCell,\n            children: /*#__PURE__*/_jsxs(Typography, {\n              children: [renderFfxiv(translatePlace(place, locale)), weatherRateIndex > 0 && ` (alt. ${weatherRateIndex})`]\n            })\n          }), hashes.map((hash, index) => /*#__PURE__*/_jsx(TableCell, {\n            className: clsx(classes.weatherCell, index === 1 && classes.current),\n            children: /*#__PURE__*/_jsx(WeatherIcon, {\n              weather: getWeather(place, weatherRateIndex, hash),\n              showLabel: showLabels\n            })\n          }, index))]\n        }, `${place}-${weatherRateIndex}`))\n      })]\n    })\n  });\n};\n\nexport default UpcomingWeatherTable;","map":null,"metadata":{},"sourceType":"module"}