{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport StopCardsContainer from './StopCardsContainer';\nimport StopCard from './StopCard';\nimport BaitList from './BaitList';\nimport { fishingSpots, fishes } from './ffxiv-ocean-fishing/data';\nimport * as maps from './maps';\nimport { getBlueFish, getBaitGroup } from './utils';\nimport { translate } from '../utils';\nimport { useTranslation } from '../i18n';\nconst POINTS_THRESHOLD = 400;\nexport function getPointsFishes(stopTime) {\n  const fishingSpotId = maps.STOP_MAP[stopTime[0]];\n  const spectralFishingSpot = fishingSpots[fishingSpotId + 1];\n  const time = stopTime[1]; // Find all fish that exceed the threshold, while keeping track of the highest value fish(es)\n\n  let highestPointsFishes = [];\n  const thresholdPointsFishes = spectralFishingSpot.fishes.filter(fishId => {\n    const spreadsheetData = fishes[fishId].spreadsheetData; // Check to see if this fish is catchable\n\n    if (spreadsheetData.time && !spreadsheetData.time.includes(time)) {\n      return false; // Ignore blue fish so that the highest non-blue fish will be found\n    } else if (spreadsheetData.intuition) {\n      return false; // Not enough known data on this fish\n    } else if (!spreadsheetData.points || !spreadsheetData.doubleHook) {\n      return false; // Check what this fish is worth\n    } else {\n      const {\n        doubleHook,\n        points\n      } = spreadsheetData;\n      const maxPoints = (Array.isArray(doubleHook) ? doubleHook[1] : doubleHook) * points;\n\n      if (highestPointsFishes.length === 0) {\n        highestPointsFishes.push({\n          fishId,\n          points: maxPoints\n        });\n      } else if (maxPoints === highestPointsFishes[0].points) {\n        highestPointsFishes.push({\n          fishId,\n          points: maxPoints\n        });\n      } else if (maxPoints > highestPointsFishes[0].points) {\n        highestPointsFishes = [{\n          fishId,\n          points: maxPoints\n        }];\n      }\n\n      return maxPoints >= POINTS_THRESHOLD;\n    }\n  }); // If any fish passed the threshold hold, return all those fish\n\n  if (thresholdPointsFishes.length > 0) {\n    return thresholdPointsFishes; // Otherwise, return whatever the best non-blue fish are\n  } else {\n    return highestPointsFishes.map(({\n      fishId\n    }) => fishId);\n  }\n}\n\nconst RouteInformationPoints = ({\n  stopTimes\n}) => {\n  const {\n    i18n\n  } = useTranslation('ocean-fishing');\n  const locale = i18n.language;\n  return /*#__PURE__*/_jsx(StopCardsContainer, {\n    children: stopTimes.map((stopTime, index) => /*#__PURE__*/_jsx(StopCard, {\n      index: index,\n      stopTime: stopTime,\n      children: /*#__PURE__*/_jsx(CardContent, {\n        children: /*#__PURE__*/_jsx(BaitList, {\n          baitGroups: [maps.SPECTRAL_FISH_MAP[stopTime[0]], maps.GREEN_FISH_MAP[stopTime[0]], ...getPointsFishes(stopTime), getBlueFish(stopTime)].filter(x => x).map((fishId, index) => {\n            const spreadsheetData = fishes[fishId].spreadsheetData;\n            return {\n              header: translate(locale, fishes[fishId], 'name'),\n              baitGroupProps: _objectSpread(_objectSpread({}, getBaitGroup(fishId)), {}, {\n                subtext: index === 0 ? '' : `DH: Ã—${Array.isArray(spreadsheetData.doubleHook) ? spreadsheetData.doubleHook.join('-') : spreadsheetData.doubleHook}` + ` = ${(Array.isArray(spreadsheetData.doubleHook) ? spreadsheetData.doubleHook[1] : spreadsheetData.doubleHook) * spreadsheetData.points}`,\n                mainOnly: true\n              })\n            };\n          })\n        })\n      })\n    }, stopTime))\n  });\n};\n\nexport default RouteInformationPoints;","map":null,"metadata":{},"sourceType":"module"}