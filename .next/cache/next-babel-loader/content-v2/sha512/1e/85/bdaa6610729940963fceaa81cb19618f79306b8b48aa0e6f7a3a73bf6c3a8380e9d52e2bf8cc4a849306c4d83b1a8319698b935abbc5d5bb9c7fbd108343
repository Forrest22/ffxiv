{"ast":null,"code":"import oceanFishingFishingSpots from './ocean-fishing-fishing-spots.json';\nimport oceanFishingPlaceNames from './ocean-fishing-place-names.json';\nimport oceanFishingFishes from './ocean-fishing-fishes.json';\nimport oceanFishingBaits from './ocean-fishing-baits.json';\nimport oceanFishingContentBonuses from './ocean-fishing-content-bonuses.json';\nimport oceanFishingAchievements from './ocean-fishing-achievements.json';\nimport oceanFishingBiteTimes from './ocean-fishing-bite-times.json';\nimport spreadsheetData from './spreadsheet-data.json';\nimport lodestoneData from './lodestone-data.json';\nimport { Weather } from '../../../skywatcher/ffxiv-skywatcher/src/types/weather';\nconst baitMap = Object.values(oceanFishingBaits).reduce((acc, curr) => (acc[curr.name_en] = curr.id, acc), {});\nconst fishMap = Object.values(oceanFishingFishes).reduce((acc, curr) => (acc[curr.name_en] = curr.id, acc), {});\nconst spreadsheetMap = Object.values(spreadsheetData).flatMap(x => x).reduce((acc, curr) => (acc[curr.name] = curr, acc), {});\n\nfunction getMapped(map, name) {\n  if (!map[name]) {\n    throw new Error(`Could not find '${name}'`);\n  }\n\n  return map[name];\n}\n\nfor (const oceanFish of Object.values(oceanFishingFishes)) {\n  // Attach bite times\n  oceanFish.biteTimes = oceanFishingBiteTimes[oceanFish.id] || {}; // Attach spreadsheet data\n\n  const spreadsheetData = getMapped(spreadsheetMap, oceanFish.name_en);\n  oceanFish.spreadsheetData = {\n    bait: spreadsheetData.bait && getMapped(baitMap, spreadsheetData.bait),\n    points: spreadsheetData.points,\n    doubleHook: spreadsheetData.doubleHook,\n    mooch: spreadsheetData.mooch && getMapped(fishMap, spreadsheetData.mooch),\n    tug: spreadsheetData.tug,\n    time: spreadsheetData.time && spreadsheetData.time.split(''),\n    weathers: spreadsheetData.weathers && (() => {\n      switch (spreadsheetData.weathers.type) {\n        case 'ALL':\n          return spreadsheetData.weathers;\n\n        case 'OK':\n        case 'NOT OK':\n          return {\n            type: spreadsheetData.weathers.type,\n            list: spreadsheetData.weathers.list.map(weather => Weather[weather])\n          };\n      }\n    })(),\n    stars: spreadsheetData.stars,\n    intuition: spreadsheetData.intuition && spreadsheetData.intuition.map(({\n      name,\n      count\n    }) => ({\n      fishId: getMapped(fishMap, name),\n      count\n    }))\n  }; // Attach Lodestone data\n\n  oceanFish.lodestoneData = lodestoneData[oceanFish.id];\n}\n\nexport const fishingSpots = oceanFishingFishingSpots;\nexport const placeNames = oceanFishingPlaceNames;\nexport const oceanFishes = oceanFishingFishes;\nexport const baits = oceanFishingBaits;\nexport const contentBonuses = oceanFishingContentBonuses;\nexport const achievements = oceanFishingAchievements;","map":null,"metadata":{},"sourceType":"module"}