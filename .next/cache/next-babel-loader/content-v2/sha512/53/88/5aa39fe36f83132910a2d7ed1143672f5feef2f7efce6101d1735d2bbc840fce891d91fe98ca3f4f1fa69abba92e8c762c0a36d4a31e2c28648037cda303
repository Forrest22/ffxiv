{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Alert from '@material-ui/lab/Alert';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport Section from '../Section';\nimport ShadeButton from './ShadeButton';\nimport StainButton from './StainButton';\nimport FruitIcon from './FruitIcon';\nimport FruitsList from './FruitsList';\nimport ChocoboCompanionPreview from './ChocoboCompanionPreview';\nimport { isValidStain, calculateFruitsDistance, translate as translateChocoboColor, Color, Shade, Fruit } from './ffxiv-chocobo-color';\nimport { stains, fruits } from './ffxiv-chocobo-color/data';\nimport { translate } from '../utils';\nimport { useTranslation } from '../i18n';\nvar SHADES_MAP = {\n  2: {\n    shade: Shade.White,\n    color: new Color(255, 255, 255)\n  },\n  4: {\n    shade: Shade.Red,\n    color: new Color(210, 28, 28)\n  },\n  5: {\n    shade: Shade.Brown,\n    color: new Color(170, 114, 54)\n  },\n  6: {\n    shade: Shade.Yellow,\n    color: new Color(240, 220, 44)\n  },\n  7: {\n    shade: Shade.Green,\n    color: new Color(150, 204, 60)\n  },\n  8: {\n    shade: Shade.Blue,\n    color: new Color(74, 130, 243)\n  },\n  9: {\n    shade: Shade.Purple,\n    color: new Color(166, 98, 228)\n  }\n};\nvar VALID_STAINS = Object.values(stains).filter(isValidStain).sort(function (a, b) {\n  return a.shade - b.shade || a.shadeIndex - b.shadeIndex;\n});\nvar useStyles = makeStyles(function (theme) {\n  return {\n    transitionArrow: {\n      display: 'block',\n      margin: theme.spacing(2, 'auto'),\n      fontSize: '2em'\n    },\n    fruitsCount: {\n      display: 'inline-block',\n      width: '2.5em',\n      textAlign: 'right',\n      fontSize: '1.25em',\n      overflow: 'visible'\n    },\n    fruitsIcon: {\n      margin: theme.spacing(0, 1)\n    }\n  };\n});\n\nvar Calculator = function Calculator() {\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation('chocobo-color'),\n      t = _useTranslation.t,\n      i18n = _useTranslation.i18n;\n\n  var _useState = useState(stains[36]),\n      currentStain = _useState[0],\n      setCurrentStain = _useState[1]; // Desert Yellow\n\n\n  var _useState2 = useState(VALID_STAINS[0]),\n      targetStain = _useState2[0],\n      setTargetStain = _useState2[1];\n\n  var _useState3 = useState(null),\n      solution = _useState3[0],\n      setSolution = _useState3[1];\n\n  var locale = i18n.language;\n\n  var handleInputCurrentStain = function handleInputCurrentStain(_, stain) {\n    stain && setCurrentStain(stain);\n  };\n\n  var handleInputTargetStain = function handleInputTargetStain(_, stain) {\n    stain && setTargetStain(stain);\n  };\n\n  var handleSelectShade = function handleSelectShade(shadeId) {\n    setTargetStain(VALID_STAINS.find(function (stain) {\n      return stain.shade === shadeId;\n    }));\n  };\n\n  var handleSelectStain = function handleSelectStain(stain) {\n    setTargetStain(stain);\n  };\n\n  var handleClickCalculate = function handleClickCalculate() {\n    var solution = calculateFruitsDistance(currentStain.color, targetStain.color, 3);\n    setSolution({\n      fromColor: currentStain.color,\n      toColor: targetStain.color,\n      fruits: solution.fruits,\n      resultantColor: solution.color\n    });\n  };\n\n  return /*#__PURE__*/_jsx(Section, {\n    title: t('calculator'),\n    children: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      justify: \"center\",\n      spacing: 4,\n      children: [/*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        md: 10,\n        lg: 8,\n        children: [/*#__PURE__*/_jsx(Autocomplete, {\n          options: VALID_STAINS,\n          groupBy: function groupBy(option) {\n            return translateChocoboColor('shade', SHADES_MAP[option.shade].shade, locale);\n          },\n          getOptionLabel: function getOptionLabel(option) {\n            return translate(locale, option, 'name');\n          },\n          renderInput: function renderInput(params) {\n            return /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({}, params), {}, {\n              variant: \"filled\",\n              label: t('currentStain')\n            }));\n          },\n          value: currentStain,\n          onChange: handleInputCurrentStain\n        }), /*#__PURE__*/_jsx(ArrowDownwardIcon, {\n          className: classes.transitionArrow\n        }), /*#__PURE__*/_jsx(Autocomplete, {\n          options: VALID_STAINS,\n          groupBy: function groupBy(option) {\n            return translateChocoboColor('shade', SHADES_MAP[option.shade].shade, locale);\n          },\n          getOptionLabel: function getOptionLabel(option) {\n            return translate(locale, option, 'name');\n          },\n          renderInput: function renderInput(params) {\n            return /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({}, params), {}, {\n              variant: \"filled\",\n              label: t('targetStain')\n            }));\n          },\n          value: targetStain,\n          onChange: handleInputTargetStain\n        }), /*#__PURE__*/_jsxs(Box, {\n          my: 2,\n          children: [Object.entries(SHADES_MAP).sort(function (a, b) {\n            return Number(a[0]) - Number(b[0]);\n          }).map(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                shadeId = _ref2[0],\n                val = _ref2[1];\n\n            return /*#__PURE__*/_jsx(ShadeButton, {\n              shade: val.shade,\n              color: val.color,\n              selected: targetStain.shade === Number(shadeId),\n              onClick: handleSelectShade.bind(null, Number(shadeId))\n            }, shadeId);\n          }), /*#__PURE__*/_jsx(\"br\", {}), VALID_STAINS.filter(function (stain) {\n            return stain.shade === targetStain.shade;\n          }).map(function (stain) {\n            return /*#__PURE__*/_jsx(StainButton, {\n              stain: stain,\n              selected: targetStain.id === stain.id,\n              onClick: handleSelectStain.bind(null, stain)\n            }, stain.id);\n          })]\n        }), /*#__PURE__*/_jsx(Box, {\n          mb: 2,\n          textAlign: \"center\",\n          children: /*#__PURE__*/_jsx(ChocoboCompanionPreview, {\n            color: targetStain.color\n          })\n        }), /*#__PURE__*/_jsx(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          fullWidth: true,\n          onClick: handleClickCalculate,\n          children: t('calculate')\n        })]\n      }), solution && solution.fruits.length > calculateFruitsDistance(stains[36].color, solution.toColor, 3).fruits.length && /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        md: 10,\n        lg: 8,\n        children: /*#__PURE__*/_jsx(Alert, {\n          severity: \"info\",\n          children: \"You might save fruits by resetting to Desert Yellow with a Han Lemon first.\"\n        })\n      }), solution && /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        md: 10,\n        lg: 8,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Fruits needed\"\n        }), solution.fruits.length > 0 ? [Fruit.XelphatolApple, Fruit.MamookPear, Fruit.OGhomoroBerries, Fruit.DomanPlum, Fruit.Valfruit, Fruit.CieldalaesPineapple].map(function (fruit) {\n          return {\n            fruit: fruit,\n            count: solution.fruits.filter(function (solFruit) {\n              return solFruit === fruit;\n            }).length\n          };\n        }).filter(function (_ref3) {\n          var count = _ref3.count;\n          return count > 0;\n        }).map(function (_ref4) {\n          var fruit = _ref4.fruit,\n              count = _ref4.count;\n          return /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsxs(Typography, {\n              component: \"span\",\n              className: classes.fruitsCount,\n              children: [\"\\xD7\", count]\n            }), /*#__PURE__*/_jsx(FruitIcon, {\n              fruit: fruit,\n              className: classes.fruitsIcon\n            }), /*#__PURE__*/_jsx(Typography, {\n              component: \"span\",\n              children: translate(locale, fruits[fruit], 'name')\n            })]\n          }, fruit);\n        }) : /*#__PURE__*/_jsx(Typography, {\n          children: \"No fruits\"\n        })]\n      }), solution && solution.fruits.length > 0 && /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        md: 10,\n        lg: 8,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Feeding order\"\n        }), /*#__PURE__*/_jsx(FruitsList, {\n          fruits: solution.fruits\n        })]\n      })]\n    })\n  });\n};\n\nexport default Calculator;","map":null,"metadata":{},"sourceType":"module"}