{"ast":null,"code":"const _9HR = 32400000;\nconst _45MIN = 2700000; // Cycle repeats every 12 days starting at this epoch\n\nconst LULU_EPOCH = 1593270000000 + _9HR;\nconst DEST_CYCLE = ['B', 'T', 'N', 'R'];\nconst TIME_CYCLE = ['S', 'S', 'S', 'S', 'N', 'N', 'N', 'N', 'D', 'D', 'D', 'D'];\n\nfunction fromEpoch(day, hour) {\n  return new Date(LULU_EPOCH + day * 86400000 + hour * 3600000 - _9HR);\n}\n\nfunction _calculateVoyages(date, count, filter) {\n  const adjustedDate = new Date(date.getTime() + _9HR - _45MIN); // Subtract 45 minutes to catch ongoing voyages\n\n  let day = Math.floor((adjustedDate.getTime() - LULU_EPOCH) / 86400000);\n  let hour = adjustedDate.getUTCHours();\n  hour += hour & 1 ? 2 : 1;\n\n  if (hour > 23) {\n    day += 1;\n    hour -= 24;\n  } // Find the current voyage\n\n\n  const voyageNumber = hour >> 1;\n  let destIndex = ((day + voyageNumber) % 4 + 4) % 4;\n  let timeIndex = ((day + voyageNumber) % 12 + 12) % 12; // Loop until however many voyages are found\n\n  const upcomingVoyages = [];\n\n  while (upcomingVoyages.length < count) {\n    const destTime = DEST_CYCLE[destIndex] + TIME_CYCLE[timeIndex];\n\n    if (!filter || filter.includes(destTime)) {\n      upcomingVoyages.push({\n        date: fromEpoch(day, hour),\n        destTime\n      });\n    }\n\n    if (hour === 23) {\n      day += 1;\n      hour = 1;\n      destIndex = (destIndex + 2) % 4;\n      timeIndex = (timeIndex + 2) % 12;\n    } else {\n      hour += 2;\n      destIndex = (destIndex + 1) % 4;\n      timeIndex = (timeIndex + 1) % 12;\n    }\n  }\n\n  return upcomingVoyages;\n} // Record the pattern for faster calculations\n\n\nconst pattern = _calculateVoyages(new Date(_45MIN), 144).map(({\n  destTime\n}) => destTime);\n\nexport default function calculateVoyages(date, count, filter) {\n  const startIndex = Math.floor((date.getTime() - _45MIN) / 7200000);\n  const upcomingVoyages = [];\n\n  for (let i = 0; upcomingVoyages.length < count && i < 100000; ++i) {\n    const destTime = pattern[(startIndex + i) % 144];\n\n    if (!filter || filter.includes(destTime)) {\n      upcomingVoyages.push({\n        date: new Date((startIndex + i + 1) * 7200000),\n        destTime\n      });\n    }\n  }\n\n  return upcomingVoyages;\n}","map":null,"metadata":{},"sourceType":"module"}