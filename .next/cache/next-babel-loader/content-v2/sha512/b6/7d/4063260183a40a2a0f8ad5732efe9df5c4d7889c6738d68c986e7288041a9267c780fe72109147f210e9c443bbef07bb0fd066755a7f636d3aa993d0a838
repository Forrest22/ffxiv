{"ast":null,"code":"import { Weather } from './src/types/weather';\nimport { Place } from './src/types/place';\nimport partition from './data/partition.json';\nimport weatherRates from './data/weather-rates.json';\nexport { Weather, Place };\nexport { default as translateWeather } from './src/translate-weather';\nexport { default as translatePlace } from './src/translate-place';\nexport function getRegions() {\n  return Object.keys(partition.partition).map(key => Number(key)).sort((a, b) => a - b);\n}\nexport function getPlaces(region) {\n  return partition.partition[region].sort((a, b) => a - b);\n}\nexport function getSeed(date = new Date()) {\n  return Math.floor(date.getTime() / 1400000);\n}\nexport function getDate(seed = getSeed()) {\n  return new Date(seed * 1400000);\n}\nexport function hashSeed(seed = getSeed()) {\n  const base = Math.floor(seed / 3) * 100 + (seed + 1) % 3 * 8;\n  const step1 = (base << 11 ^ base) >>> 0;\n  const step2 = (step1 >>> 8 ^ step1) >>> 0;\n  return step2 % 100;\n}\nexport function getHashes(seed = getSeed(), count = 10) {\n  const hashes = [];\n\n  for (let index = 0; index < count; ++index) {\n    hashes.push(hashSeed(seed + index));\n  }\n\n  return hashes;\n}\nexport function getWeather(place, weatherRateIndex = 0, hash = hashSeed()) {\n  const rates = weatherRates[partition.weatherRates[place][weatherRateIndex]].Rates;\n\n  for (const [chance, weather] of rates) {\n    if (chance > hash) {\n      return weather;\n    }\n  }\n}\nexport function getWeatherRates(place) {\n  return partition.weatherRates[place];\n}\nexport function getPossibleWeathers(place, weatherRateIndex = 0) {\n  const rates = weatherRates[partition.weatherRates[place][weatherRateIndex]].Rates;\n  return rates.map(([, weather]) => weather);\n}\nexport function forecastWeathers(place, weatherRateIndex = 0, filter, seed = getSeed(), count = 10) {\n  const results = [];\n  let prevHash = hashSeed(seed - 1);\n  let prevWeather = getWeather(place, weatherRateIndex, prevHash);\n\n  for (let i = 0; results.length < count && i < 100000; ++i) {\n    const currHash = hashSeed(seed);\n    const currWeather = getWeather(place, weatherRateIndex, currHash);\n\n    if (!filter || filter(prevWeather, currWeather, seed)) {\n      results.push({\n        prevWeather,\n        currWeather,\n        seed,\n        date: getDate(seed)\n      });\n    }\n\n    prevHash = currHash;\n    prevWeather = currWeather;\n    ++seed;\n  }\n\n  return results;\n}","map":null,"metadata":{},"sourceType":"module"}