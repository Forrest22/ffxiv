{"ast":null,"code":"import _regeneratorRuntime from \"/root/ffxiv/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/root/ffxiv/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from 'react';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport Typography from '@material-ui/core/Typography';\nimport Page from '../src/Page';\nimport Section from '../src/Section';\nimport UpcomingWeather from '../src/skywatcher/UpcomingWeather';\nimport Forecaster from '../src/skywatcher/Forecaster';\nimport Algorithm from '../src/skywatcher/Algorithm';\nimport { formatTime } from '../src/utils';\nimport { useTranslation } from '../src/i18n';\n\nvar Skywatcher = function Skywatcher() {\n  var _useTranslation = useTranslation('skywatcher'),\n      t = _useTranslation.t;\n\n  var _useState = useState(new Date()),\n      now = _useState[0],\n      setNow = _useState[1];\n\n  useEffect(function () {\n    var interval;\n\n    (function loop() {\n      var now = new Date();\n      setNow(now);\n      interval = setTimeout(function () {\n        interval = setTimeout(loop, (60000 - now.getTime() * 1440 / 70 % 60000) / (1440 / 70));\n      }, 0);\n    })();\n\n    return function () {\n      clearTimeout(interval);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxs(Page, {\n    title: t('_title'),\n    description: t('_description'),\n    children: [/*#__PURE__*/_jsxs(Section, {\n      children: [/*#__PURE__*/_jsxs(Typography, {\n        paragraph: true,\n        children: [\"The time in Eorzea is \", /*#__PURE__*/_jsx(\"b\", {\n          children: /*#__PURE__*/_jsx(NoSsr, {\n            children: formatTime(new Date(now.getTime() * (1440 / 70)))\n          })\n        }), \".\"]\n      }), /*#__PURE__*/_jsxs(\"ul\", {\n        children: [/*#__PURE__*/_jsx(Typography, {\n          component: \"li\",\n          children: \"Some places have multiple possible weather rates depending on certain conditions. For example, Amh Araeng will always be Everlasting Light until a certain point in the MSQ.\"\n        }), /*#__PURE__*/_jsx(Typography, {\n          component: \"li\",\n          children: \"Certain special weathers such as Tension will replace the predicted weather depending on certain conditions.\"\n        }), /*#__PURE__*/_jsxs(Typography, {\n          component: \"li\",\n          children: [\"The weathers associated with The \", /*#__PURE__*/_jsx(\"em\", {\n            children: \"Endeavor\"\n          }), \" only apply to cutscenes and have no apparent correlation with the weathers experienced during the voyage.\"]\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(Forecaster, {\n      now: now\n    }), /*#__PURE__*/_jsx(UpcomingWeather, {\n      now: now\n    }), /*#__PURE__*/_jsx(Algorithm, {})]\n  });\n};\n\nSkywatcher.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", {\n            namespacesRequired: ['common', 'skywatcher']\n          });\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default Skywatcher;","map":null,"metadata":{},"sourceType":"module"}