{"ast":null,"code":"import _fishingSpots from './fishing-spots.json';\nimport _placeNames from './place-names.json';\nimport _fishes from './fishes.json';\nimport _baits from './baits.json';\nimport _contentBonuses from './content-bonuses.json';\nimport _achievements from './achievements.json';\nimport _biteTimes from './bite-times.json';\nimport spreadsheetData from './spreadsheet-data.json';\nimport lodestoneData from './lodestone-data.json';\nimport { Weather } from '../../../skywatcher/ffxiv-skywatcher/src/types';\nconst baitMap = Object.values(_baits).reduce((acc, curr) => {\n  acc[curr.name.en] = curr;\n  return acc;\n}, {});\nconst fishMap = Object.values(_fishes).reduce((acc, curr) => {\n  acc[curr.name.en] = curr;\n  return acc;\n}, {});\nconst spreadsheetMap = Object.values(spreadsheetData).flatMap(x => x).reduce((acc, curr) => {\n  acc[curr.name] = curr;\n  return acc;\n}, {});\n\nfunction getMapped(map, name) {\n  if (name === null) {\n    return null;\n  }\n\n  if (map[name] === undefined) {\n    throw new Error(`Could not find '${name}'`);\n  }\n\n  return map[name];\n}\n\nfor (const fishingSpot of Object.values(_fishingSpots)) {\n  fishingSpot.placeName_main = _placeNames[fishingSpot.placeName_main];\n  fishingSpot.placeName_sub = _placeNames[fishingSpot.placeName_sub];\n  fishingSpot.placeName = _placeNames[fishingSpot.placeName];\n  fishingSpot.fishes = fishingSpot.fishes.map(fishId => _fishes[fishId]); // eslint-disable-line @typescript-eslint/no-unnecessary-type-assertion\n}\n\nexport const fishingSpots = _fishingSpots;\nexport const placeNames = _placeNames;\n\nfor (const fish of Object.values(_fishes)) {\n  fish.contentBonus = fish.contentBonus !== 0 ? _contentBonuses[fish.contentBonus] : null; // Attach bite times\n\n  fish.biteTimes = _biteTimes[fish.id]; // Attach spreadsheet data\n\n  if (fish.id === 0) {\n    fish.spreadsheetData = {\n      bait: null,\n      points: null,\n      doubleHook: null,\n      mooch: null,\n      tug: null,\n      time: null,\n      weathers: null,\n      stars: null,\n      intuition: null\n    };\n  } else {\n    const spreadsheetData = getMapped(spreadsheetMap, fish.name.en);\n    fish.spreadsheetData = {\n      bait: getMapped(baitMap, spreadsheetData.bait),\n      points: spreadsheetData.points,\n      doubleHook: spreadsheetData.doubleHook,\n      mooch: getMapped(fishMap, spreadsheetData.mooch),\n      tug: spreadsheetData.tug,\n      time: spreadsheetData.time !== null ? spreadsheetData.time.split('') : null,\n      weathers: spreadsheetData.weathers !== null ? (() => {\n        switch (spreadsheetData.weathers.type) {\n          case 'ALL':\n            return spreadsheetData.weathers;\n\n          case 'OK':\n          case 'NOT OK':\n            return {\n              type: spreadsheetData.weathers.type,\n              list: spreadsheetData.weathers.list.map(weather => Weather[weather])\n            };\n        }\n      })() : null,\n      stars: spreadsheetData.stars,\n      intuition: spreadsheetData.intuition != null ? spreadsheetData.intuition.map(({\n        name,\n        count\n      }) => ({\n        fish: getMapped(fishMap, name),\n        count\n      })) : null\n    };\n  } // Attach Lodestone data\n\n\n  fish.lodestoneData = lodestoneData[fish.id];\n}\n\nexport const fishes = _fishes;\nexport const baits = _baits;\nexport const contentBonuses = _contentBonuses;\nexport const achievements = _achievements;","map":null,"metadata":{},"sourceType":"module"}