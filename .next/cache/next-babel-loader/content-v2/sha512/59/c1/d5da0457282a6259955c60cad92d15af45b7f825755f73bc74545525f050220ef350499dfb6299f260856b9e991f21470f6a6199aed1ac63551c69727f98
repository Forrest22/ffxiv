{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Section from '../Section';\nimport UpcomingWeatherTable from './UpcomingWeatherTable';\nimport { getRegions, getPlaces, getWeatherRates, getPossibleWeathers, translatePlace } from './ffxiv-skywatcher';\nimport { useTranslation } from '../i18n';\nconst REGIONS = getRegions();\n\nconst UpcomingWeather = ({\n  now\n}) => {\n  const {\n    t,\n    i18n\n  } = useTranslation('skywatcher');\n  const {\n    0: filter,\n    1: setFilter\n  } = useState(null);\n  const {\n    0: showLabels,\n    1: setShowLabels\n  } = useState(true);\n  const {\n    0: showLocalTime,\n    1: setShowLocalTime\n  } = useState(false);\n  const {\n    0: showAllPlaces,\n    1: setShowAllPlaces\n  } = useState(false);\n  const locale = i18n.language;\n\n  const handleSelectFilter = event => {\n    const filter = event.target.value === 'none' ? null : +event.target.value;\n    setFilter(filter);\n  };\n\n  const handleToggleLabels = () => {\n    setShowLabels(!showLabels);\n  };\n\n  const handleToggleLocalTime = () => {\n    setShowLocalTime(!showLocalTime);\n  };\n\n  const handleToggleShowAllPlaces = () => {\n    setShowAllPlaces(!showAllPlaces);\n  };\n\n  return /*#__PURE__*/_jsxs(Section, {\n    title: t('upcomingWeather'),\n    children: [/*#__PURE__*/_jsxs(Box, {\n      mb: 2,\n      children: [/*#__PURE__*/_jsxs(FormControl, {\n        variant: \"filled\",\n        fullWidth: true,\n        margin: \"dense\",\n        children: [/*#__PURE__*/_jsx(InputLabel, {\n          children: t('selectRegion')\n        }), /*#__PURE__*/_jsx(NoSsr, {\n          children: /*#__PURE__*/_jsxs(Select, {\n            onChange: handleSelectFilter,\n            value: filter !== null ? filter : 'none',\n            children: [/*#__PURE__*/_jsx(MenuItem, {\n              value: \"none\",\n              children: t('showAllRegions')\n            }), REGIONS.map(region => /*#__PURE__*/_jsx(MenuItem, {\n              value: region,\n              children: translatePlace(region, locale)\n            }, region))]\n          })\n        })]\n      }), /*#__PURE__*/_jsx(FormControlLabel, {\n        control: /*#__PURE__*/_jsx(Checkbox, {\n          checked: showLabels,\n          onChange: handleToggleLabels,\n          color: \"primary\"\n        }),\n        label: t('showLabels')\n      }), /*#__PURE__*/_jsx(FormControlLabel, {\n        control: /*#__PURE__*/_jsx(Checkbox, {\n          checked: showLocalTime,\n          onChange: handleToggleLocalTime,\n          color: \"primary\"\n        }),\n        label: t('showLocalTimes')\n      }), /*#__PURE__*/_jsx(Tooltip, {\n        enterDelay: 200,\n        title: /*#__PURE__*/_jsx(Typography, {\n          variant: \"caption\",\n          children: \"Include places with only 1 possible weather\"\n        }),\n        children: /*#__PURE__*/_jsx(FormControlLabel, {\n          control: /*#__PURE__*/_jsx(Checkbox, {\n            checked: showAllPlaces,\n            onChange: handleToggleShowAllPlaces,\n            color: \"primary\"\n          }),\n          label: t('showAllPlaces')\n        })\n      })]\n    }), /*#__PURE__*/_jsx(NoSsr, {\n      children: (filter !== null ? [filter] : REGIONS).map(region => {\n        const places = getPlaces(region).flatMap(place => getWeatherRates(place).map((_, index) => ({\n          place,\n          weatherRateIndex: index\n        })));\n        return /*#__PURE__*/_jsxs(Section, {\n          children: [/*#__PURE__*/_jsx(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: translatePlace(region, locale)\n          }), /*#__PURE__*/_jsx(UpcomingWeatherTable, {\n            now: now,\n            places: showAllPlaces ? places : places.filter(({\n              place,\n              weatherRateIndex\n            }) => getPossibleWeathers(place, weatherRateIndex).length > 1),\n            showLabels: showLabels,\n            showLocalTime: showLocalTime\n          })]\n        }, region);\n      })\n    })]\n  });\n};\n\nexport default UpcomingWeather;","map":null,"metadata":{},"sourceType":"module"}