{"ast":null,"code":"var _9HR = 32400000;\nvar _45MIN = 2700000; // Cycle repeats every 12 days starting at this epoch\n\nvar LULU_EPOCH = 1593270000000 + _9HR;\nvar DEST_CYCLE = ['B', 'T', 'N', 'R'];\nvar TIME_CYCLE = ['S', 'S', 'S', 'S', 'N', 'N', 'N', 'N', 'D', 'D', 'D', 'D'];\n\nfunction fromEpoch(day, hour) {\n  return new Date(LULU_EPOCH + day * 86400000 + hour * 3600000 - _9HR);\n}\n\nfunction _calculateVoyages(date, count, filter) {\n  var adjustedDate = new Date(date.getTime() + _9HR - _45MIN); // Subtract 45 minutes to catch ongoing voyages\n\n  var day = Math.floor((adjustedDate.getTime() - LULU_EPOCH) / 86400000);\n  var hour = adjustedDate.getUTCHours(); // Adjust hour to be odd\n\n  hour += (hour & 1) === 0 ? 1 : 2;\n\n  if (hour > 23) {\n    day += 1;\n    hour -= 24;\n  } // Find the current voyage\n\n\n  var voyageNumber = hour >> 1;\n  var destIndex = ((day + voyageNumber) % DEST_CYCLE.length + DEST_CYCLE.length) % DEST_CYCLE.length;\n  var timeIndex = ((day + voyageNumber) % TIME_CYCLE.length + TIME_CYCLE.length) % TIME_CYCLE.length; // Loop until however many voyages are found\n\n  var upcomingVoyages = [];\n\n  while (upcomingVoyages.length < count) {\n    var destTime = DEST_CYCLE[destIndex] + TIME_CYCLE[timeIndex];\n\n    if (filter === undefined || filter.includes(destTime)) {\n      upcomingVoyages.push({\n        date: fromEpoch(day, hour),\n        destTime: destTime\n      });\n    }\n\n    if (hour === 23) {\n      day += 1;\n      hour = 1;\n      destIndex = (destIndex + 2) % DEST_CYCLE.length;\n      timeIndex = (timeIndex + 2) % TIME_CYCLE.length;\n    } else {\n      hour += 2;\n      destIndex = (destIndex + 1) % DEST_CYCLE.length;\n      timeIndex = (timeIndex + 1) % TIME_CYCLE.length;\n    }\n  }\n\n  return upcomingVoyages;\n} // Record the pattern for faster calculations\n\n\nvar pattern = _calculateVoyages(new Date(_45MIN), 144).map(function (_ref) {\n  var destTime = _ref.destTime;\n  return destTime;\n});\n\nexport default function calculateVoyages(date, count, filter) {\n  var startIndex = Math.floor((date.getTime() - _45MIN) / 7200000);\n  var upcomingVoyages = [];\n\n  for (var i = 0; upcomingVoyages.length < count && i < 100000; ++i) {\n    var destTime = pattern[(startIndex + i) % 144];\n\n    if (filter === undefined || filter.includes(destTime)) {\n      upcomingVoyages.push({\n        date: new Date((startIndex + i + 1) * 7200000),\n        destTime: destTime\n      });\n    }\n  }\n\n  return upcomingVoyages;\n}","map":null,"metadata":{},"sourceType":"module"}