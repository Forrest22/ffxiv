{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport CheckIcon from '@material-ui/icons/Check';\nimport Page from '../../src/Page';\nimport Section from '../../src/Section';\nimport OceanFishIcon from '../../src/ocean-fishing/OceanFishIcon';\nimport { contentBonuses } from '../../src/ocean-fishing/ffxiv-ocean-fishing/data';\nimport { translate } from '../../src/utils';\nimport { useTranslation } from '../../src/i18n';\nconst CONTENT_BONUSES = Object.values(contentBonuses).sort((a, b) => a.order - b.order).filter(contentBonus => !/Target number adjusted for party size/.test(contentBonus.requirement_en));\nconst useStyles = makeStyles(theme => ({\n  contentBonusesTable: {\n    '& th': {\n      padding: theme.spacing(1, 2)\n    },\n    '& td': {\n      padding: theme.spacing(0.5, 1)\n    }\n  },\n  check: {\n    padding: 10\n  },\n  unchecked: {\n    opacity: 0.4\n  },\n  checked: {\n    color: 'green'\n  },\n  bonusContainer: {\n    margin: theme.spacing(2, 0),\n    textAlign: 'center',\n    '& > *': {\n      display: 'inline-block',\n      paddingBottom: theme.spacing(4),\n      verticalAlign: 'middle'\n    }\n  },\n  bonus: {\n    position: 'relative'\n  },\n  bonusPercentage: {\n    position: 'absolute',\n    left: 0,\n    right: 0\n  },\n  bigger: {\n    fontSize: '1.5em'\n  },\n  calculatorGoal: {\n    textAlign: 'justify',\n    textAlignLast: 'justify',\n    '& > *': {\n      display: 'inline-block'\n    }\n  },\n  reward: {\n    [theme.breakpoints.down('xs')]: {\n      display: 'block',\n      textAlign: 'left',\n      textAlignLast: 'left'\n    }\n  }\n}));\n\nfunction getOverrides(contentBonusId) {\n  switch (contentBonusId) {\n    case 2:\n      return [1];\n\n    case 6:\n      return [5];\n\n    case 18:\n      return [17];\n\n    case 19:\n      return [17, 18];\n\n    default:\n      return [];\n  }\n}\n\nfunction getOverriddenBy(contentBonusId) {\n  switch (contentBonusId) {\n    case 1:\n      return [2];\n\n    case 5:\n      return [6];\n\n    case 17:\n      return [18, 19];\n\n    case 18:\n      return [19];\n\n    default:\n      return [];\n  }\n}\n\nfunction cleanObjective(objective) {\n  return objective.replace(/<[^<>]*?\\/>/g, '');\n}\n\nfunction cleanRequirement(requirement) {\n  const str = requirement.replace(/^(Requirement:|Bedingung:|Condition :|達成条件：)/, '').trim();\n  return str[0].toUpperCase() + str.slice(1);\n}\n\nconst CalculatorRow = ({\n  reward,\n  requiredPoints,\n  totalBonus\n}) => {\n  const classes = useStyles();\n  const {\n    i18n\n  } = useTranslation('ocean-fishing');\n  const locale = i18n.language;\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 8,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: classes.calculatorGoal,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          className: classes.reward,\n          children: reward\n        }), \"\\xA0\", /*#__PURE__*/_jsxs(Typography, {\n          component: \"div\",\n          align: \"right\",\n          className: classes.bigger,\n          children: [Math.ceil(requiredPoints / totalBonus * 100).toLocaleString(locale), /*#__PURE__*/_jsx(Box, {\n            display: \"inline\",\n            ml: 2,\n            children: /*#__PURE__*/_jsxs(Typography, {\n              display: \"inline\",\n              children: [\"\\xD7\", totalBonus, \"%\"]\n            })\n          })]\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 4,\n      children: /*#__PURE__*/_jsxs(Typography, {\n        className: classes.bigger,\n        children: [\"= \", requiredPoints.toLocaleString(locale)]\n      })\n    })]\n  });\n};\n\nconst Bonuses = () => {\n  const classes = useStyles();\n  const {\n    t,\n    i18n\n  } = useTranslation('ocean-fishing');\n  const {\n    0: basePoints,\n    1: setBasePoints\n  } = useState(5000);\n  const {\n    0: checked,\n    1: setChecked\n  } = useState({\n    1: true,\n    2: true,\n    3: true,\n    5: true,\n    7: true,\n    8: true,\n    9: true,\n    17: true,\n    18: true,\n    19: true\n  });\n  const locale = i18n.language;\n  const filteredContentBonuses = CONTENT_BONUSES.filter(contentBonus => {\n    if (!checked[contentBonus.id]) return false;\n\n    for (const override of getOverriddenBy(contentBonus.id)) {\n      if (checked[override]) return false;\n    }\n\n    return true;\n  });\n  const totalBonus = filteredContentBonuses.reduce((acc, curr) => acc + curr.bonus - 100, 0) + 100;\n\n  const handleClickChecked = contentBonusId => {\n    const newChecked = _objectSpread(_objectSpread({}, checked), {}, {\n      [contentBonusId]: !checked[contentBonusId]\n    });\n\n    if (newChecked[contentBonusId]) {\n      getOverrides(contentBonusId).forEach(contentBonus => {\n        newChecked[contentBonus] = true;\n      });\n    } else {\n      getOverriddenBy(contentBonusId).forEach(contentBonus => {\n        newChecked[contentBonus] = false;\n      });\n    }\n\n    setChecked(newChecked);\n  };\n\n  const handleInputBasePoints = event => {\n    setBasePoints(Math.max(0, Number(event.target.value)));\n  };\n\n  return /*#__PURE__*/_jsxs(Page, {\n    title: `${t('_title')} - ${t('bonusesPage._title')}`,\n    children: [/*#__PURE__*/_jsx(Section, {\n      children: /*#__PURE__*/_jsx(TableContainer, {\n        children: /*#__PURE__*/_jsxs(Table, {\n          className: classes.contentBonusesTable,\n          children: [/*#__PURE__*/_jsx(TableHead, {\n            children: /*#__PURE__*/_jsxs(TableRow, {\n              children: [/*#__PURE__*/_jsx(TableCell, {\n                colSpan: 3,\n                align: \"center\",\n                children: t('bonusesPage.objective')\n              }), /*#__PURE__*/_jsx(TableCell, {\n                align: \"center\",\n                children: t('bonusesPage.requirement')\n              }), /*#__PURE__*/_jsx(TableCell, {\n                align: \"center\",\n                children: t('bonusesPage.bonus')\n              })]\n            })\n          }), /*#__PURE__*/_jsx(TableBody, {\n            children: CONTENT_BONUSES.map(contentBonus => /*#__PURE__*/_jsxs(TableRow, {\n              children: [/*#__PURE__*/_jsx(TableCell, {\n                children: /*#__PURE__*/_jsx(IconButton, {\n                  className: clsx(classes.check, checked[contentBonus.id] ? classes.checked : classes.unchecked),\n                  onClick: handleClickChecked.bind(null, contentBonus.id),\n                  children: /*#__PURE__*/_jsx(CheckIcon, {})\n                })\n              }), /*#__PURE__*/_jsx(TableCell, {\n                children: /*#__PURE__*/_jsx(OceanFishIcon, {\n                  type: \"content-bonus\",\n                  id: contentBonus.id\n                })\n              }), /*#__PURE__*/_jsx(TableCell, {\n                children: /*#__PURE__*/_jsx(Typography, {\n                  children: cleanObjective(translate(locale, contentBonus, 'objective'))\n                })\n              }), /*#__PURE__*/_jsx(TableCell, {\n                children: /*#__PURE__*/_jsx(Typography, {\n                  children: cleanRequirement(translate(locale, contentBonus, 'requirement'))\n                })\n              }), /*#__PURE__*/_jsx(TableCell, {\n                align: \"center\",\n                children: /*#__PURE__*/_jsxs(Typography, {\n                  children: [contentBonus.bonus - 100, \"%\"]\n                })\n              })]\n            }, contentBonus.id))\n          })]\n        })\n      })\n    }), /*#__PURE__*/_jsxs(Section, {\n      title: t('bonusesPage.calculator'),\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: classes.bonusContainer,\n        children: [filteredContentBonuses.length > 0 ? filteredContentBonuses.map(contentBonus => /*#__PURE__*/_jsxs(\"div\", {\n          className: classes.bonus,\n          children: [/*#__PURE__*/_jsx(OceanFishIcon, {\n            type: \"content-bonus\",\n            id: contentBonus.id\n          }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(Typography, {\n            variant: \"body2\",\n            className: classes.bonusPercentage,\n            children: [contentBonus.bonus - 100, \"%\"]\n          })]\n        }, contentBonus.id)) : /*#__PURE__*/_jsx(Typography, {\n          children: \"No contentBonuses selected\"\n        }), /*#__PURE__*/_jsxs(Typography, {\n          className: classes.bigger,\n          children: [\"\\xA0= \", totalBonus - 100, \"%\"]\n        })]\n      }), /*#__PURE__*/_jsx(Grid, {\n        container: true,\n        justify: \"center\",\n        children: /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          md: 8,\n          children: /*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            spacing: 2,\n            alignItems: \"flex-end\",\n            children: [/*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 8,\n              children: /*#__PURE__*/_jsx(TextField, {\n                type: \"number\",\n                fullWidth: true,\n                label: t('bonusesPage.basePoints'),\n                InputProps: {\n                  endAdornment: /*#__PURE__*/_jsxs(InputAdornment, {\n                    position: \"end\",\n                    children: [\"\\xD7\", totalBonus, \"%\"]\n                  })\n                },\n                value: basePoints,\n                onChange: handleInputBasePoints\n              })\n            }), /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 4,\n              children: /*#__PURE__*/_jsxs(Typography, {\n                className: classes.bigger,\n                children: [\"= \", Math.floor(basePoints * totalBonus / 100).toLocaleString(locale)]\n              })\n            }), /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsx(Box, {\n                m: 2\n              })\n            }), /*#__PURE__*/_jsx(CalculatorRow, {\n              reward: \"The Major-General\",\n              requiredPoints: 5000,\n              totalBonus: totalBonus\n            }), /*#__PURE__*/_jsx(CalculatorRow, {\n              reward: \"Hybodus\",\n              requiredPoints: 10000,\n              totalBonus: totalBonus\n            }), /*#__PURE__*/_jsx(CalculatorRow, {\n              reward: \"\\u201COcean Fisher\\u201D\",\n              requiredPoints: 16000,\n              totalBonus: totalBonus\n            }), /*#__PURE__*/_jsx(CalculatorRow, {\n              reward: \"\\u201CMaster of the Sea\\u201D\",\n              requiredPoints: 20000,\n              totalBonus: totalBonus\n            })]\n          })\n        })\n      })]\n    })]\n  });\n};\n\nBonuses.getInitialProps = async () => ({\n  namespacesRequired: ['common', 'ocean-fishing']\n});\n\nexport default Bonuses;","map":null,"metadata":{},"sourceType":"module"}