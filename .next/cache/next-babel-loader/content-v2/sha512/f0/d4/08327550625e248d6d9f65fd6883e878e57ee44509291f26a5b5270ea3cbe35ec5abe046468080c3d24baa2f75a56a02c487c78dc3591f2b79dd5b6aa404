{"ast":null,"code":"import fetch from 'node-fetch';\nconst XIVAPI = 'https://xivapi.com';\nexport default async function fetchXIVAPI(endpoint, qs) {\n  const url = new URL(XIVAPI + endpoint);\n\n  if (qs !== undefined) {\n    for (const [key, value] of Object.entries(qs)) {\n      url.searchParams.append(key, value);\n    }\n  }\n\n  const response = await fetch(url);\n  const json = await response.json();\n  return json;\n} // export async function fetchAllPages (endpoint: string, qs?: Record<string, string>) {\n//   const results: any[] = []\n//   const _qs = Object.assign({}, qs)\n//\n//   for (let page = 1; ; ++page) {\n//     _qs.page = String(page)\n//     const json = await fetchXIVAPI(endpoint, _qs)\n//     if (json.Results) {\n//       results.push(...json.Results)\n//     }\n//     if (!json.Pagination || json.Pagination.Page === json.Pagination.PageTotal) {\n//       break\n//     }\n//   }\n//\n//   return results\n// }\n//\n// export async function getSearchResult (query: string, type: string, qs?: Record<string, string>) {\n//   const results = await fetchAllPages('/search', { string: query, columns: 'Name,UrlType,Url' })\n//   for (const result of results) {\n//     if (result.Name === query && result.UrlType === type) {\n//       return await fetchXIVAPI(result.Url, qs)\n//     }\n//   }\n//   throw new Error(`Could not find item: ${query} (${type})`)\n// }","map":null,"metadata":{},"sourceType":"module"}