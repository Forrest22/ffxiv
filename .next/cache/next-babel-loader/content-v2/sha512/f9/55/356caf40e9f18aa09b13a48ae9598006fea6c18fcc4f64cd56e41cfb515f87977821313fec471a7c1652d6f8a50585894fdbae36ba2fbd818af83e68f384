{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport { makeStyles, fade } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Section from '../Section';\nimport NameAutocomplete from './NameAutocomplete';\nimport MyNameIs from './MyNameIs';\nimport { translate } from './names';\nimport { conjugateRoegadyn, combineRoegadyn } from './names/utils';\nimport roegadynDictionary from './names/data/roegadyn-dictionary.json';\nimport { Clan, Gender } from './names/types';\nimport { useTranslation } from '../i18n';\nconst WORDS = Object.keys(roegadynDictionary);\nconst useStyles = makeStyles(theme => ({\n  rules: {\n    borderLeftWidth: '2px',\n    borderLeftStyle: 'solid',\n    borderLeftColor: fade(theme.palette.text.secondary, 0.5),\n    paddingLeft: theme.spacing(2),\n    '& > dd:not(:last-child)': {\n      marginBottom: theme.spacing(1)\n    }\n  }\n}));\n\nconst SeaWolfFemale = () => {\n  const classes = useStyles();\n  const {\n    t,\n    i18n\n  } = useTranslation('name-generator');\n  const {\n    0: forenameWord1,\n    1: setForenameWord1\n  } = useState('');\n  const {\n    0: forenameWord2,\n    1: setForenameWord2\n  } = useState('');\n  const {\n    0: surnameWord1,\n    1: setSurnameWord1\n  } = useState('');\n  const {\n    0: surnameWord2,\n    1: setSurnameWord2\n  } = useState('');\n  const forename = combineRoegadyn(conjugateRoegadyn(forenameWord1, 'A'), conjugateRoegadyn(forenameWord2, 'N'));\n  const surname = (surnameWord1 || surnameWord2) && combineRoegadyn(conjugateRoegadyn(surnameWord1, 'A'), conjugateRoegadyn(surnameWord2, 'N'), 'Syn');\n  const name = `${forename} ${surname}`.trim();\n  const locale = i18n.language;\n  return /*#__PURE__*/_jsx(Section, {\n    title: `${translate('clan', Clan.SeaWolf, locale)} (${translate('gender', Gender.Male, locale)})`,\n    children: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(NameAutocomplete, {\n              options: WORDS,\n              getOptionLabel: word => {\n                const entry = roegadynDictionary[word];\n                return entry ? `${word} (${entry.grammar}, ${entry.definition_en})` : word;\n              },\n              value: forenameWord1,\n              onChange: setForenameWord1,\n              label: \"Forename - First word\",\n              placeholder: \"Enter a Roegadyn word\"\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(NameAutocomplete, {\n              options: WORDS,\n              getOptionLabel: word => {\n                const entry = roegadynDictionary[word];\n                return entry ? `${word} (${entry.grammar}, ${entry.definition_en})` : word;\n              },\n              value: forenameWord2,\n              onChange: setForenameWord2,\n              label: \"Forename - Second word\",\n              placeholder: \"Enter a Roegadyn word\"\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: [/*#__PURE__*/_jsxs(Typography, {\n          paragraph: true,\n          children: [\"Sea Wolf forenames are formed from two words of the ancient Roegadyn language, typically a descriptor and a noun.\", /*#__PURE__*/_jsx(\"br\", {}), \"E.g. \\u201CMerlwyb\\u201D = \\u201CMerl\\u201D (Sea) + \\u201CWyb\\u201D (Woman)\"]\n        }), /*#__PURE__*/_jsx(Typography, {\n          paragraph: true,\n          children: \"For female forenames, the second word is almost always one of the following:\"\n        }), /*#__PURE__*/_jsxs(\"ul\", {\n          children: [/*#__PURE__*/_jsx(Typography, {\n            component: \"li\",\n            children: \"\\u201CSwys\\u201D (Sister)\"\n          }), /*#__PURE__*/_jsx(Typography, {\n            component: \"li\",\n            children: \"\\u201CThota\\u201D (Daughter)\"\n          }), /*#__PURE__*/_jsx(Typography, {\n            component: \"li\",\n            children: \"\\u201CWyda\\u201D (Willow)\"\n          }), /*#__PURE__*/_jsx(Typography, {\n            component: \"li\",\n            children: \"\\u201CGeim\\u201D (Jewel)\"\n          }), /*#__PURE__*/_jsx(Typography, {\n            component: \"li\",\n            children: \"\\u201CWyb\\u201D (Woman)\"\n          }), /*#__PURE__*/_jsx(Typography, {\n            component: \"li\",\n            children: \"\\u201CRael\\u201D (Doe)\"\n          }), /*#__PURE__*/_jsx(Typography, {\n            component: \"li\",\n            children: \"\\u201CLona\\u201D (Gatherer)\"\n          }), /*#__PURE__*/_jsx(Typography, {\n            component: \"li\",\n            children: \"\\u201CBhyda\\u201D (Bride)\"\n          })]\n        }), /*#__PURE__*/_jsx(Typography, {\n          children: \"Words are conjugated according to the following rules (with exceptions):\"\n        }), /*#__PURE__*/_jsxs(\"dl\", {\n          className: classes.rules,\n          children: [/*#__PURE__*/_jsxs(Typography, {\n            component: \"dt\",\n            children: [/*#__PURE__*/_jsx(\"b\", {\n              children: \"N \\u2192 A\"\n            }), \". To conjugate a noun to an adjective, add \\u201C\\u2011i\\u201D.\"]\n          }), /*#__PURE__*/_jsxs(Typography, {\n            component: \"dd\",\n            children: [\"\\u201CAis\\u201D (Ice) + \\u201Ci\\u201D = \\u201CAis\", /*#__PURE__*/_jsx(\"b\", {\n              children: \"i\"\n            }), \"\\u201D (Icy)\"]\n          }), /*#__PURE__*/_jsxs(Typography, {\n            component: \"dt\",\n            children: [/*#__PURE__*/_jsx(\"b\", {\n              children: \"V \\u2192 N\"\n            }), \". To conjugate a verb to a noun, add \\u201C\\u2011a\\u201D.\"]\n          }), /*#__PURE__*/_jsxs(Typography, {\n            component: \"dd\",\n            children: [\"\\u201CBraen\\u201D (Break) + \\u201Ca\\u201D = \\u201CBraen\", /*#__PURE__*/_jsx(\"b\", {\n              children: \"a\"\n            }), \"\\u201D (Breaker)\"]\n          }), /*#__PURE__*/_jsxs(Typography, {\n            component: \"dt\",\n            children: [/*#__PURE__*/_jsx(\"b\", {\n              children: \"V \\u2192 A\"\n            }), \". To conjugate a verb to an adjective, add \\u201C\\u2011n\\u201D.\"]\n          }), /*#__PURE__*/_jsxs(Typography, {\n            component: \"dd\",\n            children: [\"\\u201CFloer\\u201D (Lead) + \\u201Cn\\u201D = \\u201CFloer\", /*#__PURE__*/_jsx(\"b\", {\n              children: \"n\"\n            }), \"\\u201D (Leading)\"]\n          })]\n        }), /*#__PURE__*/_jsxs(Typography, {\n          paragraph: true,\n          children: [\"When combining words, double letters are collapsed.\", /*#__PURE__*/_jsx(\"br\", {}), \"E.g. \\u201CRost\", /*#__PURE__*/_jsx(\"b\", {\n            children: \"n\"\n          }), \"\\u201D (Rusty) + \\u201C\", /*#__PURE__*/_jsx(\"b\", {\n            children: \"N\"\n          }), \"oez\\u201D (Walnut) = \\u201CRost\", /*#__PURE__*/_jsx(\"b\", {\n            children: \"n\"\n          }), \"oez\\u201D (Rusty Walnut)\"]\n        })]\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(NameAutocomplete, {\n              options: WORDS,\n              getOptionLabel: word => {\n                const entry = roegadynDictionary[word];\n                return entry ? `${word} (${entry.grammar}, ${entry.definition_en})` : word;\n              },\n              value: surnameWord1,\n              onChange: setSurnameWord1,\n              label: \"Surname - First word\",\n              placeholder: \"Enter a Roegadyn word\"\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(NameAutocomplete, {\n              options: WORDS,\n              getOptionLabel: word => {\n                const entry = roegadynDictionary[word];\n                return entry ? `${word} (${entry.grammar}, ${entry.definition_en})` : word;\n              },\n              value: surnameWord2,\n              onChange: setSurnameWord2,\n              label: \"Surname - Second word\",\n              placeholder: \"Enter a Roegadyn word\"\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: [/*#__PURE__*/_jsxs(Typography, {\n          paragraph: true,\n          children: [\"The surname is made from the father\\u2019s name with \\u201CWyn\\u201D (Daughter) added to the end.\", /*#__PURE__*/_jsx(\"br\", {}), \"E.g. \\u201CHezzfyr\", /*#__PURE__*/_jsx(\"b\", {\n            children: \"syn\"\n          }), \"\\u201D = \\u201CHezz\\u201D (Hot) + \\u201CFyr\\u201D (Fire) + \\u201CWyn\\u201D (Daughter)\"]\n        }), /*#__PURE__*/_jsx(Typography, {\n          paragraph: true,\n          children: \"Although both \\u201CThota\\u201D and \\u201CWyn\\u201D mean \\u201CDaughter\\u201D, \\u201CThota\\u201D is used exclusively for forenames, and \\u201CWyn\\u201D is exclusively for surnames.\"\n        })]\n      }), name && /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(MyNameIs, {\n          name: name\n        })\n      })]\n    })\n  });\n};\n\nexport default SeaWolfFemale;","map":null,"metadata":{},"sourceType":"module"}