{"ast":null,"code":"import roegadynDictionary from '../data/roegadyn-dictionary.json';\nimport en from '../locales/en.json';\nimport de from '../locales/de.json';\nimport fr from '../locales/fr.json';\nimport ja from '../locales/ja.json';\nconst LOCALES = {\n  en,\n  de,\n  fr,\n  ja\n};\nexport function randomElement(...arrays) {\n  if (arrays.length === 0) {\n    return undefined;\n  } else if (arrays.length === 1) {\n    return arrays[0][Math.floor(Math.random() * arrays[0].length)];\n  } else {\n    const totalElements = arrays.reduce((acc, curr) => acc + curr.length, 0);\n    const index = Math.floor(Math.random() * totalElements);\n    let currIndex = 0;\n\n    for (const array of arrays) {\n      currIndex += array.length;\n\n      if (currIndex > index) {\n        return array[array.length + index - currIndex];\n      }\n    }\n  }\n}\nexport function upperFirst(string) {\n  if (!string) return '';\n  string = string.replace(/[^a-z'-]/ig, '');\n  return string[0].toUpperCase() + string.slice(1).toLowerCase();\n}\nexport function formatName(forename, surname) {\n  return (upperFirst(forename) + ' ' + upperFirst(surname)).trim();\n}\nexport function conjugateRoegadyn(word, grammar) {\n  word = upperFirst(word.replace(/\\s+/g, ''));\n  const entry = roegadynDictionary[word]; // If this word does not appear in the dictionary, leave it alone\n\n  if (!entry) {\n    return word;\n  } // If this word has the conjugation listed, use it\n\n\n  if (entry.derivatives && entry.derivatives[grammar]) {\n    return entry.derivatives[grammar];\n  } // If this word is already the requested grammar, leave it alone\n\n\n  if (entry.grammar === grammar || entry.grammar === 'AN') {\n    return word;\n  } // Use the N -> A rule\n\n\n  if (entry.grammar === 'N' && grammar === 'A') {\n    return word + 'i';\n  } // Use the V -> N rule\n\n\n  if (entry.grammar === 'V' && grammar === 'N') {\n    return word + 'a';\n  } // Use the V -> A rule\n\n\n  if (entry.grammar === 'V' && grammar === 'A') {\n    return word + 'n';\n  } // Do not know how to conjugate this word or grammar\n\n\n  return word;\n}\nexport function combineRoegadyn(...words) {\n  return upperFirst(words.map((word, index) => {\n    if (index === 0) return word;\n    const previousWord = words[index - 1];\n\n    if (word.charAt(0).toLowerCase() === previousWord.charAt(previousWord.length - 1)) {\n      return word.slice(1);\n    } else {\n      return word;\n    }\n  }).join(''));\n}\nexport function translate(type, id, locale = 'en') {\n  return LOCALES[locale] && LOCALES[locale][type][id] || `{${type}.${id}}`;\n}","map":null,"metadata":{},"sourceType":"module"}