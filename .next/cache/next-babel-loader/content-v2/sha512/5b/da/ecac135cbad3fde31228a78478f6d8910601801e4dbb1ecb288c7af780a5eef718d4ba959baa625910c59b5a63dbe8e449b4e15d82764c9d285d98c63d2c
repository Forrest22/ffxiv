{"ast":null,"code":"import { format, formatDistanceStrict } from 'date-fns';\nimport de from 'date-fns/locale/de';\nimport fr from 'date-fns/locale/fr';\nimport ja from 'date-fns/locale/ja';\nimport cn from 'date-fns/locale/zh-CN';\nimport ko from 'date-fns/locale/ko';\nvar DATE_LOCALES = {\n  en: undefined,\n  de: de,\n  fr: fr,\n  ja: ja,\n  cn: cn,\n  ko: ko\n};\nexport function paddedZero(n) {\n  return n > 9 ? String(n) : \"0\".concat(n);\n}\nexport function formatTime(date) {\n  return \"\".concat(paddedZero(date.getHours()), \":\").concat(paddedZero(date.getMinutes()));\n}\nexport function formatTimeUtc(date) {\n  return \"\".concat(paddedZero(date.getUTCHours()), \":\").concat(paddedZero(date.getUTCMinutes()));\n}\nexport function toTimeString(now) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$padded = options.padded,\n      padded = _options$padded === void 0 ? false : _options$padded,\n      _options$locale = options.locale,\n      locale = _options$locale === void 0 ? 'en' : _options$locale;\n  var timeString = format(now, locale === 'en' ? 'hh:mm a' : 'HH:mm', {\n    locale: DATE_LOCALES[locale]\n  });\n  return timeString.replace(/^0/, padded ? 'â€‡' : '');\n}\nexport function timeUntil(now, then) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _options$full = options.full,\n      full = _options$full === void 0 ? false : _options$full,\n      _options$locale2 = options.locale,\n      locale = _options$locale2 === void 0 ? 'en' : _options$locale2;\n  var diffString = formatDistanceStrict(then, now, {\n    addSuffix: true,\n    locale: DATE_LOCALES[locale]\n  });\n\n  if (full) {\n    switch (locale) {\n      case 'en':\n        return \"\".concat(diffString, \" at \").concat(format(then, 'h:mm a', {\n          locale: DATE_LOCALES[locale]\n        }));\n\n      case 'de':\n        return \"\".concat(diffString, \" um \").concat(format(then, 'H:mm', {\n          locale: DATE_LOCALES[locale]\n        }));\n\n      case 'fr':\n        return \"\".concat(diffString, \" \\xE0 \").concat(format(then, 'H:mm', {\n          locale: DATE_LOCALES[locale]\n        }));\n\n      case 'ja':\n        return \"\".concat(diffString, \" at \").concat(format(then, 'H:mm', {\n          locale: DATE_LOCALES[locale]\n        }));\n\n      default:\n        return \"\".concat(diffString, \" at \").concat(format(then, 'H:mm', {\n          locale: DATE_LOCALES[locale]\n        }));\n    }\n  } else {\n    return diffString;\n  }\n}\nexport function upperFirst(string) {\n  return string[0].toUpperCase() + string.slice(1);\n}","map":null,"metadata":{},"sourceType":"module"}