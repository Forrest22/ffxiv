{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { LINES, validateGrid, getSuggestion } from './calculate-mini-cactpot';\nimport Section from '../Section';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Button from '@material-ui/core/Button';\nimport CalculatorCell from './CalculatorCell';\nimport CalculatorLineIndicator from './CalculatorLineIndicator';\nimport { useTranslation } from '../i18n';\nconst useStyles = makeStyles(theme => ({\n  gridShrink: {\n    textAlign: 'center',\n    [theme.breakpoints.up('md')]: {\n      flex: '0 0 auto'\n    }\n  },\n  gridGrow: {\n    [theme.breakpoints.up('md')]: {\n      flex: '1 1 0px'\n    }\n  },\n  cellsContainer: {\n    display: 'inline-block',\n    border: theme.palette.type === 'dark' ? '1px solid gray' : '1px solid black',\n    whiteSpace: 'nowrap'\n  },\n  suggestion: {\n    [theme.breakpoints.up('md')]: {\n      paddingTop: theme.spacing(8)\n    }\n  }\n}));\n\nconst Calculator = () => {\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslation('mini-cactpot');\n  const {\n    0: grid,\n    1: setGrid\n  } = useState(Array(9).fill(null));\n\n  const handleInputDigit = (cellIndex, digit) => {\n    const newGrid = grid.slice();\n    newGrid[cellIndex] = digit;\n    setGrid(newGrid);\n  };\n\n  const handleClickReset = () => {\n    setGrid(Array(9).fill(null));\n  };\n\n  const errorCells = {};\n  const suggestedCells = {};\n  const error = validateGrid(grid);\n  let suggestion;\n\n  if (error) {\n    switch (error.type) {\n      case 'TOO MANY':\n      case 'DUPLICATES':\n        for (const cellIndex of error.cells) {\n          errorCells[cellIndex] = true;\n        }\n\n        break;\n    }\n  } else {\n    suggestion = getSuggestion(grid);\n\n    switch (suggestion.type) {\n      case 'CELL':\n        for (const cellIndex of suggestion.maxCellLocations) {\n          suggestedCells[cellIndex] = true;\n        }\n\n        break;\n\n      case 'LINE':\n        for (const lineId of suggestion.maxLineIds) {\n          for (const cellIndex of LINES[lineId]) {\n            suggestedCells[cellIndex] = true;\n          }\n        }\n\n    }\n  }\n\n  function isLineSuggested(lineId) {\n    return suggestion && suggestion.type === 'LINE' && suggestion.maxLineIds.includes(lineId);\n  }\n\n  return /*#__PURE__*/_jsx(Section, {\n    children: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 4,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.gridShrink,\n        children: /*#__PURE__*/_jsx(TableContainer, {\n          children: /*#__PURE__*/_jsx(\"table\", {\n            children: /*#__PURE__*/_jsxs(\"tbody\", {\n              children: [/*#__PURE__*/_jsxs(\"tr\", {\n                children: [/*#__PURE__*/_jsx(\"td\", {\n                  children: /*#__PURE__*/_jsx(CalculatorLineIndicator, {\n                    rotate: 45,\n                    suggested: isLineSuggested(3)\n                  })\n                }), /*#__PURE__*/_jsx(\"td\", {\n                  children: /*#__PURE__*/_jsx(CalculatorLineIndicator, {\n                    rotate: 90,\n                    suggested: isLineSuggested(4)\n                  })\n                }), /*#__PURE__*/_jsx(\"td\", {\n                  children: /*#__PURE__*/_jsx(CalculatorLineIndicator, {\n                    rotate: 90,\n                    suggested: isLineSuggested(5)\n                  })\n                }), /*#__PURE__*/_jsx(\"td\", {\n                  children: /*#__PURE__*/_jsx(CalculatorLineIndicator, {\n                    rotate: 90,\n                    suggested: isLineSuggested(6)\n                  })\n                }), /*#__PURE__*/_jsx(\"td\", {\n                  children: /*#__PURE__*/_jsx(CalculatorLineIndicator, {\n                    rotate: 135,\n                    suggested: isLineSuggested(7)\n                  })\n                })]\n              }), /*#__PURE__*/_jsxs(\"tr\", {\n                children: [/*#__PURE__*/_jsx(\"td\", {\n                  children: /*#__PURE__*/_jsx(CalculatorLineIndicator, {\n                    rotate: 0,\n                    suggested: isLineSuggested(2)\n                  })\n                }), /*#__PURE__*/_jsx(\"td\", {\n                  rowSpan: 3,\n                  colSpan: 3,\n                  children: /*#__PURE__*/_jsxs(\"div\", {\n                    className: classes.cellsContainer,\n                    children: [/*#__PURE__*/_jsx(CalculatorCell, {\n                      value: grid[0],\n                      suggested: suggestedCells[0],\n                      error: errorCells[0],\n                      onInputDigit: handleInputDigit.bind(null, 0)\n                    }), /*#__PURE__*/_jsx(CalculatorCell, {\n                      value: grid[1],\n                      suggested: suggestedCells[1],\n                      error: errorCells[1],\n                      onInputDigit: handleInputDigit.bind(null, 1)\n                    }), /*#__PURE__*/_jsx(CalculatorCell, {\n                      value: grid[2],\n                      suggested: suggestedCells[2],\n                      error: errorCells[2],\n                      onInputDigit: handleInputDigit.bind(null, 2)\n                    }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(CalculatorCell, {\n                      value: grid[3],\n                      suggested: suggestedCells[3],\n                      error: errorCells[3],\n                      onInputDigit: handleInputDigit.bind(null, 3)\n                    }), /*#__PURE__*/_jsx(CalculatorCell, {\n                      value: grid[4],\n                      suggested: suggestedCells[4],\n                      error: errorCells[4],\n                      onInputDigit: handleInputDigit.bind(null, 4)\n                    }), /*#__PURE__*/_jsx(CalculatorCell, {\n                      value: grid[5],\n                      suggested: suggestedCells[5],\n                      error: errorCells[5],\n                      onInputDigit: handleInputDigit.bind(null, 5)\n                    }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(CalculatorCell, {\n                      value: grid[6],\n                      suggested: suggestedCells[6],\n                      error: errorCells[6],\n                      onInputDigit: handleInputDigit.bind(null, 6)\n                    }), /*#__PURE__*/_jsx(CalculatorCell, {\n                      value: grid[7],\n                      suggested: suggestedCells[7],\n                      error: errorCells[7],\n                      onInputDigit: handleInputDigit.bind(null, 7)\n                    }), /*#__PURE__*/_jsx(CalculatorCell, {\n                      value: grid[8],\n                      suggested: suggestedCells[8],\n                      error: errorCells[8],\n                      onInputDigit: handleInputDigit.bind(null, 8)\n                    })]\n                  })\n                })]\n              }), /*#__PURE__*/_jsx(\"tr\", {\n                children: /*#__PURE__*/_jsx(\"td\", {\n                  children: /*#__PURE__*/_jsx(CalculatorLineIndicator, {\n                    rotate: 0,\n                    suggested: isLineSuggested(1)\n                  })\n                })\n              }), /*#__PURE__*/_jsx(\"tr\", {\n                children: /*#__PURE__*/_jsx(\"td\", {\n                  children: /*#__PURE__*/_jsx(CalculatorLineIndicator, {\n                    rotate: 0,\n                    suggested: isLineSuggested(0)\n                  })\n                })\n              })]\n            })\n          })\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.gridGrow,\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: classes.suggestion,\n          children: [(() => {\n            if (error) {\n              switch (error.type) {\n                case 'EMPTY':\n                  return /*#__PURE__*/_jsx(Typography, {\n                    paragraph: true,\n                    children: t('state.selectFirstCell')\n                  });\n\n                case 'TOO MANY':\n                  return /*#__PURE__*/_jsx(Typography, {\n                    paragraph: true,\n                    children: t('state.tooManyDigits')\n                  });\n\n                case 'DUPLICATES':\n                  return /*#__PURE__*/_jsx(Typography, {\n                    paragraph: true,\n                    children: t('state.duplicateDigits')\n                  });\n              }\n            } else {\n              switch (suggestion.type) {\n                case 'CELL':\n                  return /*#__PURE__*/_jsxs(_Fragment, {\n                    children: [/*#__PURE__*/_jsx(Typography, {\n                      children: t('expectedValue', {\n                        ev: Math.floor(suggestion.maxCellEV)\n                      })\n                    }), /*#__PURE__*/_jsx(Typography, {\n                      paragraph: true,\n                      children: t('state.selectHighlightedCell')\n                    })]\n                  });\n\n                case 'LINE':\n                  return /*#__PURE__*/_jsxs(_Fragment, {\n                    children: [/*#__PURE__*/_jsx(Typography, {\n                      children: t('expectedValue', {\n                        ev: Math.floor(suggestion.maxLineEV)\n                      })\n                    }), /*#__PURE__*/_jsx(Typography, {\n                      paragraph: true,\n                      children: t('state.selectHighlightedLine')\n                    })]\n                  });\n              }\n            }\n          })(), /*#__PURE__*/_jsx(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: handleClickReset,\n            children: t('reset')\n          })]\n        })\n      })]\n    })\n  });\n};\n\nexport default Calculator;","map":null,"metadata":{},"sourceType":"module"}