{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport fetch from 'node-fetch';\nvar XIVAPI = 'https://xivapi.com';\nexport default function fetchXIVAPI(_x, _x2) {\n  return _fetchXIVAPI.apply(this, arguments);\n}\n\nfunction _fetchXIVAPI() {\n  _fetchXIVAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(endpoint, qs) {\n    var url, _i, _Object$entries, _Object$entries$_i, key, value, response, json;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = new URL(XIVAPI + endpoint);\n\n            if (qs) {\n              for (_i = 0, _Object$entries = Object.entries(qs); _i < _Object$entries.length; _i++) {\n                _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), key = _Object$entries$_i[0], value = _Object$entries$_i[1];\n                url.searchParams.append(key, value);\n              }\n            }\n\n            _context.next = 4;\n            return fetch(url);\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return response.json();\n\n          case 7:\n            json = _context.sent;\n            return _context.abrupt(\"return\", json);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchXIVAPI.apply(this, arguments);\n}\n\nexport function fetchAllPages(_x3, _x4) {\n  return _fetchAllPages.apply(this, arguments);\n}\n\nfunction _fetchAllPages() {\n  _fetchAllPages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(endpoint, qs) {\n    var results, _qs, page, json;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            results = [];\n            _qs = Object.assign({}, qs);\n            page = 1;\n\n          case 3:\n            _qs.page = String(page);\n            _context2.next = 6;\n            return fetchXIVAPI(endpoint, _qs);\n\n          case 6:\n            json = _context2.sent;\n\n            if (json.Results) {\n              results.push.apply(results, _toConsumableArray(json.Results));\n            }\n\n            if (!(!json.Pagination || json.Pagination.Page === json.Pagination.PageTotal)) {\n              _context2.next = 10;\n              break;\n            }\n\n            return _context2.abrupt(\"break\", 13);\n\n          case 10:\n            ++page;\n            _context2.next = 3;\n            break;\n\n          case 13:\n            return _context2.abrupt(\"return\", results);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchAllPages.apply(this, arguments);\n}\n\nexport function getSearchResult(_x5, _x6, _x7) {\n  return _getSearchResult.apply(this, arguments);\n}\n\nfunction _getSearchResult() {\n  _getSearchResult = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(query, type, qs) {\n    var results, _iterator, _step, result;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetchAllPages('/search', {\n              string: query,\n              columns: 'Name,UrlType,Url'\n            });\n\n          case 2:\n            results = _context3.sent;\n            _iterator = _createForOfIteratorHelper(results);\n            _context3.prev = 4;\n\n            _iterator.s();\n\n          case 6:\n            if ((_step = _iterator.n()).done) {\n              _context3.next = 14;\n              break;\n            }\n\n            result = _step.value;\n\n            if (!(result.Name === query && result.UrlType === type)) {\n              _context3.next = 12;\n              break;\n            }\n\n            _context3.next = 11;\n            return fetchXIVAPI(result.Url, qs);\n\n          case 11:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 12:\n            _context3.next = 6;\n            break;\n\n          case 14:\n            _context3.next = 19;\n            break;\n\n          case 16:\n            _context3.prev = 16;\n            _context3.t0 = _context3[\"catch\"](4);\n\n            _iterator.e(_context3.t0);\n\n          case 19:\n            _context3.prev = 19;\n\n            _iterator.f();\n\n            return _context3.finish(19);\n\n          case 22:\n            throw new Error(\"Could not find item: \".concat(query, \" (\").concat(type, \")\"));\n\n          case 23:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[4, 16, 19, 22]]);\n  }));\n  return _getSearchResult.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}