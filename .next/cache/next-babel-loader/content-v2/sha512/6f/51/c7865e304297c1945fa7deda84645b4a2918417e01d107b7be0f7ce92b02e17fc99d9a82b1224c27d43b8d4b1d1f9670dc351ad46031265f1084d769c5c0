{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _fruitValues;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Color, Shade } from './data';\nimport en from './locales/en.json';\nimport de from './locales/de.json';\nimport fr from './locales/fr.json';\nimport ja from './locales/ja.json';\nvar LOCALES = {\n  en: en,\n  de: de,\n  fr: fr,\n  ja: ja\n};\nexport { Color, Shade };\nexport var Fruit;\n\n(function (Fruit) {\n  Fruit[Fruit[\"XelphatolApple\"] = 8157] = \"XelphatolApple\";\n  Fruit[Fruit[\"MamookPear\"] = 8158] = \"MamookPear\";\n  Fruit[Fruit[\"OGhomoroBerries\"] = 8159] = \"OGhomoroBerries\";\n  Fruit[Fruit[\"DomanPlum\"] = 8160] = \"DomanPlum\";\n  Fruit[Fruit[\"Valfruit\"] = 8161] = \"Valfruit\";\n  Fruit[Fruit[\"CieldalaesPineapple\"] = 8162] = \"CieldalaesPineapple\";\n})(Fruit || (Fruit = {}));\n\nexport var fruitValues = (_fruitValues = {}, _defineProperty(_fruitValues, Fruit.XelphatolApple, {\n  R: 5,\n  G: -5,\n  B: -5\n}), _defineProperty(_fruitValues, Fruit.MamookPear, {\n  R: -5,\n  G: 5,\n  B: -5\n}), _defineProperty(_fruitValues, Fruit.OGhomoroBerries, {\n  R: -5,\n  G: -5,\n  B: 5\n}), _defineProperty(_fruitValues, Fruit.DomanPlum, {\n  R: -5,\n  G: 5,\n  B: 5\n}), _defineProperty(_fruitValues, Fruit.Valfruit, {\n  R: 5,\n  G: -5,\n  B: 5\n}), _defineProperty(_fruitValues, Fruit.CieldalaesPineapple, {\n  R: 5,\n  G: 5,\n  B: -5\n}), _fruitValues);\n\nfunction _pick(array, count) {\n  if (count === 1) {\n    return array.map(function (x) {\n      return [x];\n    });\n  } else {\n    return array.flatMap(function (x) {\n      return _pick(array, count - 1).map(function (subPick) {\n        return [x].concat(_toConsumableArray(subPick));\n      });\n    });\n  }\n}\n\nfunction pick(array, count) {\n  return Array.from(Array(count)).flatMap(function (_, index) {\n    return _pick(array, index + 1);\n  });\n}\n\nfunction maximum(array, predicate) {\n  var maxVal = -Infinity;\n  var maxElem;\n\n  var _iterator = _createForOfIteratorHelper(array),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _elem = _step.value;\n      var val = predicate(_elem);\n\n      if (val > maxVal) {\n        maxVal = val;\n        maxElem = _elem;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    elem: maxElem,\n    val: maxVal\n  };\n}\n\nexport function isValidStain(stain) {\n  return stain.shade >= 2 && stain.shade <= 9 && stain.id <= 85;\n}\nexport function calculateFruitsDistance(fromColor, toColor) {\n  var lookahead = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var fruits = [];\n  var currentColor = fromColor;\n  var currentDistance = fromColor.distanceTo(toColor);\n\n  while (true) {\n    var best = maximum(pick(Object.keys(fruitValues).map(Number), lookahead), function (fruits) {\n      return -fruits.reduce(function (acc, curr) {\n        return acc.add(fruitValues[curr]);\n      }, currentColor).distanceTo(toColor);\n    });\n\n    if (-best.val >= currentDistance) {\n      return {\n        fruits: fruits,\n        color: currentColor,\n        distance: currentDistance\n      };\n    } else {\n      fruits.push(best.elem[0]);\n      currentColor = currentColor.add(fruitValues[best.elem[0]]);\n      currentDistance = currentColor.distanceTo(toColor);\n    }\n  }\n}\nexport function calculateFruitsMatrix(fromColor, toColor) {\n  var difference = fromColor.differenceFrom(toColor);\n  var fR = -(difference.G + difference.B) / 10;\n  var fG = -(difference.R + difference.B) / 10;\n  var fB = -(difference.R + difference.G) / 10;\n  var fruitCounts = [[Fruit.XelphatolApple, fR > 0 ? Math.round(fR) : 0], [Fruit.MamookPear, fG > 0 ? Math.round(fG) : 0], [Fruit.OGhomoroBerries, fB > 0 ? Math.round(fB) : 0], [Fruit.Valfruit, fR < 0 ? Math.round(-fR) : 0], [Fruit.DomanPlum, fG < 0 ? Math.round(-fG) : 0], [Fruit.CieldalaesPineapple, fB < 0 ? Math.round(-fB) : 0]];\n  var fruits = [];\n  var currentColor = fromColor;\n\n  while (fruitCounts.reduce(function (acc, curr) {\n    return acc + curr[1];\n  }, 0) > 0) {\n    var best = maximum(fruitCounts.filter(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          count = _ref2[1];\n\n      return count > 0;\n    }), function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n          fruit = _ref4[0];\n\n      var nextColor = currentColor.add(fruitValues[fruit]);\n      return -Math.max.apply(Math, _toConsumableArray([nextColor.R, nextColor.G, nextColor.B].map(function (val) {\n        return Math.abs(127.5 - val);\n      })));\n    });\n    fruits.push(best.elem[0]);\n    currentColor = currentColor.add(fruitValues[best.elem[0]]);\n    best.elem[1] -= 1;\n  }\n\n  return {\n    fruits: fruits,\n    color: currentColor,\n    distance: currentColor.distanceTo(toColor)\n  };\n}\nexport function translate(type, id) {\n  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';\n  return LOCALES[locale] && LOCALES[locale][type][id] || \"{\".concat(type, \".\").concat(id, \"}\");\n}","map":null,"metadata":{},"sourceType":"module"}