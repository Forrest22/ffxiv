{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport _stains from './stains.json';\nimport _fruits from './fruits.json';\n\nfunction clampRGB(value) {\n  return value < 0 ? 0 : value > 255 ? 255 : value;\n}\n\nexport class Color {\n  constructor(R, G, B) {\n    _defineProperty(this, \"R\", void 0);\n\n    _defineProperty(this, \"G\", void 0);\n\n    _defineProperty(this, \"B\", void 0);\n\n    this.R = clampRGB(R);\n    this.G = clampRGB(G);\n    this.B = clampRGB(B);\n  }\n\n  add({\n    R,\n    G,\n    B\n  }) {\n    return new Color(this.R + R, this.G + G, this.B + B);\n  }\n\n  differenceFrom(color) {\n    return {\n      R: color.R - this.R,\n      G: color.G - this.G,\n      B: color.B - this.B\n    };\n  }\n\n  distanceTo(color) {\n    return Math.hypot(this.R - color.R, this.G - color.G, this.B - color.B);\n  }\n\n}\nexport let Shade;\n\n(function (Shade) {\n  Shade[\"White\"] = \"white\";\n  Shade[\"Red\"] = \"red\";\n  Shade[\"Brown\"] = \"brown\";\n  Shade[\"Yellow\"] = \"yellow\";\n  Shade[\"Green\"] = \"green\";\n  Shade[\"Blue\"] = \"blue\";\n  Shade[\"Purple\"] = \"purple\";\n})(Shade || (Shade = {}));\n\nfor (const stain of Object.values(_stains)) {\n  stain.color = new Color(stain.color.R, stain.color.G, stain.color.B);\n}\n\nexport const stains = _stains;\nexport const fruits = _fruits;","map":null,"metadata":{},"sourceType":"module"}