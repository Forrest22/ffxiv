{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport Section from '../Section';\nimport ShadeButton from './ShadeButton';\nimport StainButton from './StainButton';\nimport FruitIcon from './FruitIcon';\nimport FruitsList from './FruitsList';\nimport { isValidStain, calculateFruitsDistance, translate as translateChocoboColor, Color, Shade, Fruit } from './ffxiv-chocobo-color';\nimport { stains, fruits } from './ffxiv-chocobo-color/data';\nimport { translate } from '../utils';\nimport { useTranslation } from '../i18n';\nconst SHADES_MAP = {\n  2: {\n    shade: Shade.White,\n    color: new Color(255, 255, 255)\n  },\n  4: {\n    shade: Shade.Red,\n    color: new Color(210, 28, 28)\n  },\n  5: {\n    shade: Shade.Brown,\n    color: new Color(170, 114, 54)\n  },\n  6: {\n    shade: Shade.Yellow,\n    color: new Color(240, 220, 44)\n  },\n  7: {\n    shade: Shade.Green,\n    color: new Color(150, 204, 60)\n  },\n  8: {\n    shade: Shade.Blue,\n    color: new Color(74, 130, 243)\n  },\n  9: {\n    shade: Shade.Purple,\n    color: new Color(166, 98, 228)\n  }\n};\nconst VALID_STAINS = Object.values(stains).filter(isValidStain).sort((a, b) => a.shade - b.shade || a.shadeIndex - b.shadeIndex);\nconst useStyles = makeStyles(theme => ({\n  transitionArrow: {\n    display: 'block',\n    margin: theme.spacing(2, 'auto'),\n    fontSize: '2em'\n  },\n  palette: {\n    margin: theme.spacing(2, 0)\n  },\n  fruitsCount: {\n    display: 'inline-block',\n    width: '2.5em',\n    textAlign: 'right',\n    fontSize: '1.25em',\n    overflow: 'visible'\n  },\n  fruitsIcon: {\n    margin: theme.spacing(0, 1)\n  }\n}));\n\nconst Calculator = () => {\n  const classes = useStyles();\n  const {\n    t,\n    i18n\n  } = useTranslation('chocobo-color');\n  const {\n    0: currentStain,\n    1: setCurrentStain\n  } = useState(stains[36]); // Desert Yellow\n\n  const {\n    0: targetStain,\n    1: setTargetStain\n  } = useState(VALID_STAINS[0]);\n  const {\n    0: solution,\n    1: setSolution\n  } = useState(null);\n  const locale = i18n.language;\n\n  const handleInputCurrentStain = (_, stain) => {\n    stain && setCurrentStain(stain);\n  };\n\n  const handleInputTargetStain = (_, stain) => {\n    stain && setTargetStain(stain);\n  };\n\n  const handleSelectShade = shadeId => {\n    setTargetStain(VALID_STAINS.find(stain => stain.shade === shadeId));\n  };\n\n  const handleSelectStain = stain => {\n    setTargetStain(stain);\n  };\n\n  const handleClickCalculate = () => {\n    setSolution(calculateFruitsDistance(currentStain.color, targetStain.color, 3));\n  };\n\n  return /*#__PURE__*/_jsx(Section, {\n    title: t('calculator'),\n    children: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      justify: \"center\",\n      spacing: 4,\n      children: [/*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        md: 10,\n        lg: 8,\n        children: [/*#__PURE__*/_jsx(Autocomplete, {\n          options: VALID_STAINS,\n          groupBy: option => translateChocoboColor('shade', SHADES_MAP[option.shade].shade, locale),\n          getOptionLabel: option => translate(locale, option, 'name'),\n          renderInput: params => /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({}, params), {}, {\n            variant: \"filled\",\n            label: t('currentStain')\n          })),\n          value: currentStain,\n          onChange: handleInputCurrentStain\n        }), /*#__PURE__*/_jsx(ArrowDownwardIcon, {\n          className: classes.transitionArrow\n        }), /*#__PURE__*/_jsx(Autocomplete, {\n          options: VALID_STAINS,\n          groupBy: option => translateChocoboColor('shade', SHADES_MAP[option.shade].shade, locale),\n          getOptionLabel: option => translate(locale, option, 'name'),\n          renderInput: params => /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({}, params), {}, {\n            variant: \"filled\",\n            label: t('targetStain')\n          })),\n          value: targetStain,\n          onChange: handleInputTargetStain\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: classes.palette,\n          children: [Object.entries(SHADES_MAP).sort((a, b) => Number(a[0]) - Number(b[0])).map(([shadeId, val]) => /*#__PURE__*/_jsx(ShadeButton, {\n            shade: val.shade,\n            color: val.color,\n            selected: targetStain.shade === Number(shadeId),\n            onClick: handleSelectShade.bind(null, Number(shadeId))\n          }, shadeId)), /*#__PURE__*/_jsx(\"br\", {}), VALID_STAINS.filter(stain => stain.shade === targetStain.shade).map(stain => /*#__PURE__*/_jsx(StainButton, {\n            stain: stain,\n            selected: targetStain.id === stain.id,\n            onClick: handleSelectStain.bind(null, stain)\n          }, stain.id))]\n        }), /*#__PURE__*/_jsx(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          fullWidth: true,\n          onClick: handleClickCalculate,\n          children: t('calculate')\n        })]\n      }), solution && /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        md: 10,\n        lg: 8,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Fruits needed\"\n        }), solution.length > 0 ? [Fruit.XelphatolApple, Fruit.MamookPear, Fruit.OGhomoroBerries, Fruit.DomanPlum, Fruit.Valfruit, Fruit.CieldalaesPineapple].map(fruit => ({\n          fruit,\n          count: solution.filter(solFruit => solFruit === fruit).length\n        })).filter(({\n          count\n        }) => count > 0).map(({\n          fruit,\n          count\n        }) => /*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsxs(Typography, {\n            component: \"span\",\n            className: classes.fruitsCount,\n            children: [\"\\xD7\", count]\n          }), /*#__PURE__*/_jsx(FruitIcon, {\n            fruit: fruit,\n            className: classes.fruitsIcon\n          }), /*#__PURE__*/_jsx(Typography, {\n            component: \"span\",\n            children: translate(locale, fruits[fruit], 'name')\n          })]\n        })) : /*#__PURE__*/_jsx(Typography, {\n          children: \"No fruits\"\n        })]\n      }), solution && solution.length > 0 && /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        md: 10,\n        lg: 8,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Feeding order\"\n        }), /*#__PURE__*/_jsx(FruitsList, {\n          fruits: solution\n        })]\n      })]\n    })\n  });\n};\n\nexport default Calculator;","map":null,"metadata":{},"sourceType":"module"}