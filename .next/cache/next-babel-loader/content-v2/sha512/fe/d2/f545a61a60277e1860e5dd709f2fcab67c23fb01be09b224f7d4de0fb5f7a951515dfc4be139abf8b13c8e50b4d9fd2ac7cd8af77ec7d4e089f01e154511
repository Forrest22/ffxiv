{"ast":null,"code":"import _regeneratorRuntime from \"/root/ffxiv/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/root/ffxiv/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/root/ffxiv/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport fetch from 'node-fetch';\nvar XIVAPI = 'https://xivapi.com';\nexport default function fetchXIVAPI(_x, _x2) {\n  return _fetchXIVAPI.apply(this, arguments);\n} // export async function fetchAllPages (endpoint: string, qs?: Record<string, string>) {\n//   const results: any[] = []\n//   const _qs = Object.assign({}, qs)\n//\n//   for (let page = 1; ; ++page) {\n//     _qs.page = String(page)\n//     const json = await fetchXIVAPI(endpoint, _qs)\n//     if (json.Results) {\n//       results.push(...json.Results)\n//     }\n//     if (!json.Pagination || json.Pagination.Page === json.Pagination.PageTotal) {\n//       break\n//     }\n//   }\n//\n//   return results\n// }\n//\n// export async function getSearchResult (query: string, type: string, qs?: Record<string, string>) {\n//   const results = await fetchAllPages('/search', { string: query, columns: 'Name,UrlType,Url' })\n//   for (const result of results) {\n//     if (result.Name === query && result.UrlType === type) {\n//       return await fetchXIVAPI(result.Url, qs)\n//     }\n//   }\n//   throw new Error(`Could not find item: ${query} (${type})`)\n// }\n\nfunction _fetchXIVAPI() {\n  _fetchXIVAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(endpoint, qs) {\n    var url, _i, _Object$entries, _Object$entries$_i, key, value, response, json;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = new URL(XIVAPI + endpoint);\n\n            if (qs !== undefined) {\n              for (_i = 0, _Object$entries = Object.entries(qs); _i < _Object$entries.length; _i++) {\n                _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), key = _Object$entries$_i[0], value = _Object$entries$_i[1];\n                url.searchParams.append(key, value);\n              }\n            }\n\n            _context.next = 4;\n            return fetch(url);\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return response.json();\n\n          case 7:\n            json = _context.sent;\n            return _context.abrupt(\"return\", json);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchXIVAPI.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}