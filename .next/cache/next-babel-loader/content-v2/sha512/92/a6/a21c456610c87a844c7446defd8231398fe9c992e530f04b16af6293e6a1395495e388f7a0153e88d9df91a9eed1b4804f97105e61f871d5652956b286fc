{"ast":null,"code":"import { format, formatDistanceStrict } from 'date-fns';\nimport de from 'date-fns/locale/de';\nimport fr from 'date-fns/locale/fr';\nimport ja from 'date-fns/locale/ja';\nimport cn from 'date-fns/locale/zh-CN';\nimport ko from 'date-fns/locale/ko';\nconst DATE_LOCALES = {\n  en: undefined,\n  de,\n  fr,\n  ja,\n  cn,\n  ko\n};\nexport function paddedZero(n) {\n  return n > 9 ? String(n) : `0${n}`;\n}\nexport function formatTime(date) {\n  return `${paddedZero(date.getHours())}:${paddedZero(date.getMinutes())}`;\n}\nexport function formatTimeUtc(date) {\n  return `${paddedZero(date.getUTCHours())}:${paddedZero(date.getUTCMinutes())}`;\n}\nexport function toTimeString(now, options = {}) {\n  const {\n    padded = false,\n    locale = 'en'\n  } = options;\n  const timeString = format(now, locale === 'en' ? 'hh:mm a' : 'HH:mm', {\n    locale: DATE_LOCALES[locale]\n  });\n  return timeString.replace(/^0/, padded ? 'â€‡' : '');\n}\nexport function timeUntil(now, then, options = {}) {\n  const {\n    full = false,\n    locale = 'en'\n  } = options;\n  const diffString = formatDistanceStrict(then, now, {\n    addSuffix: true,\n    locale: DATE_LOCALES[locale]\n  });\n\n  if (full) {\n    return `${diffString} (${format(then, locale === 'en' ? 'h:mm a' : 'H:mm', {\n      locale: DATE_LOCALES[locale]\n    })})`;\n  } else {\n    return diffString;\n  }\n}\nexport function upperFirst(string) {\n  return string[0].toUpperCase() + string.slice(1);\n}","map":null,"metadata":{},"sourceType":"module"}