{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { getPossibleWeathers, forecastWeathers, translate } from './weather';\nimport { toTimeString, timeUntil } from '../utils';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Alert from '@material-ui/lab/Alert';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport Section from '../Section';\nimport WeatherIcon from './WeatherIcon';\nimport { Region } from './weather/consts';\nimport PARTITION from './weather/regions-partition';\nimport i18n from '../i18n';\nconst REGIONS = [Region.LaNoscea, Region.TheBlackShroud, Region.Thanalan, Region.IshgardAndSurroundingAreas, Region.GyrAbania, Region.TheFarEast, Region.Norvrandt, Region.Others];\nconst DATE_FORMAT = {\n  month: '2-digit',\n  day: '2-digit'\n};\nconst WEATHER_CELL_WIDTH = 75;\nconst ZONES_OPTIONS = [];\n\nfor (const region of REGIONS) {\n  for (const zone of PARTITION[region]) {\n    ZONES_OPTIONS.push({\n      region,\n      zone\n    });\n  }\n}\n\nconst useStyles = makeStyles(theme => ({\n  transitionWeather: {\n    [theme.breakpoints.down('sm')]: {\n      marginBottom: theme.spacing(2)\n    }\n  },\n  transitionArrow: {\n    display: 'block',\n    margin: `${theme.spacing(0.5)}px auto`,\n    fontSize: '2em',\n    [theme.breakpoints.down('sm')]: {\n      display: 'none'\n    }\n  },\n  dateCell: {\n    width: '150px'\n  },\n  forecastCell: {\n    whiteSpace: 'nowrap'\n  },\n  bellCell: {\n    width: 50,\n    paddingLeft: theme.spacing(0.5),\n    paddingRight: theme.spacing(0.5)\n  },\n  weatherCell: {\n    width: WEATHER_CELL_WIDTH + theme.spacing(1),\n    paddingLeft: theme.spacing(0.5),\n    paddingRight: theme.spacing(0.5),\n    verticalAlign: 'top',\n    lineHeight: 1,\n    '& span': {\n      display: 'inline-block',\n      width: WEATHER_CELL_WIDTH,\n      lineHeight: 1.1\n    },\n    '&:last-child': {\n      paddingRight: theme.spacing(5),\n      width: WEATHER_CELL_WIDTH + theme.spacing(5.5)\n    }\n  },\n  transitionCell: {\n    width: 50,\n    padding: theme.spacing(1),\n    textAlign: 'center'\n  }\n}));\n\nfunction displayBell(seed) {\n  switch (seed % 3) {\n    case 0:\n      return '00:00';\n\n    case 1:\n      return '08:00';\n\n    case 2:\n      return '16:00';\n  }\n}\n\nconst Forecaster = ({\n  now,\n  t,\n  i18n\n}) => {\n  const classes = useStyles();\n  const {\n    0: zoneOption,\n    1: setZoneOption\n  } = useState(null);\n  const {\n    0: transitionWeather,\n    1: setTransitionWeather\n  } = useState(null);\n  const {\n    0: targetWeather,\n    1: setTargetWeather\n  } = useState(null);\n  const {\n    0: times,\n    1: setTimes\n  } = useState({\n    0: true,\n    8: true,\n    16: true\n  });\n  const possibleWeathers = zoneOption && getPossibleWeathers(zoneOption.zone);\n  const hasTime = times[0] || times[8] || times[16];\n  const forecast = zoneOption && hasTime && forecastWeathers(zoneOption.zone, (prevWeather, currWeather, seed) => {\n    if (transitionWeather && transitionWeather !== prevWeather) return false;\n    if (targetWeather && targetWeather !== currWeather) return false;\n    if (!times[0] && seed % 3 === 0) return false;\n    if (!times[8] && seed % 3 === 1) return false;\n    if (!times[16] && seed % 3 === 2) return false;\n    return true;\n  });\n  const locale = i18n.language;\n\n  const handleSelectZone = (_, zoneOption) => {\n    setZoneOption(zoneOption);\n    setTransitionWeather(null);\n    setTargetWeather(null);\n  };\n\n  const handleSelectTransitionWeather = event => {\n    setTransitionWeather(event.target.value === 'none' ? null : event.target.value);\n  };\n\n  const handleSelectTargetWeather = event => {\n    setTargetWeather(event.target.value === 'none' ? null : event.target.value);\n  };\n\n  const handleSelectTimes = timeSlot => {\n    setTimes(_objectSpread(_objectSpread({}, times), {}, {\n      [timeSlot]: !times[timeSlot]\n    }));\n  };\n\n  return /*#__PURE__*/_jsx(Section, {\n    title: t('forecaster'),\n    children: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsx(Autocomplete, {\n          options: ZONES_OPTIONS,\n          groupBy: ({\n            region\n          }) => translate('region', region, locale),\n          getOptionLabel: ({\n            zone\n          }) => translate('zone', zone, locale),\n          renderInput: params => /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({}, params), {}, {\n            label: t('selectZone')\n          })),\n          value: zoneOption,\n          getOptionSelected: (option, value) => option.zone === value.zone,\n          onChange: handleSelectZone\n        })\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: [/*#__PURE__*/_jsxs(FormControl, {\n          fullWidth: true,\n          className: classes.transitionWeather,\n          children: [/*#__PURE__*/_jsx(InputLabel, {\n            children: t('transitionWeather')\n          }), /*#__PURE__*/_jsxs(Select, {\n            value: transitionWeather || 'none',\n            disabled: !zoneOption,\n            onChange: handleSelectTransitionWeather,\n            children: [/*#__PURE__*/_jsx(MenuItem, {\n              value: \"none\",\n              children: t(possibleWeathers ? 'anyWeather' : 'selectZoneFirst')\n            }), possibleWeathers && possibleWeathers.map(weather => /*#__PURE__*/_jsx(MenuItem, {\n              value: weather,\n              children: translate('weather', weather, locale)\n            }, weather))]\n          })]\n        }), /*#__PURE__*/_jsx(ArrowDownwardIcon, {\n          className: classes.transitionArrow\n        }), /*#__PURE__*/_jsxs(FormControl, {\n          fullWidth: true,\n          children: [/*#__PURE__*/_jsx(InputLabel, {\n            children: t('targetWeather')\n          }), /*#__PURE__*/_jsxs(Select, {\n            value: targetWeather || 'none',\n            disabled: !zoneOption,\n            onChange: handleSelectTargetWeather,\n            children: [/*#__PURE__*/_jsx(MenuItem, {\n              value: \"none\",\n              children: t(possibleWeathers ? 'anyWeather' : 'selectZoneFirst')\n            }), possibleWeathers && possibleWeathers.map(weather => /*#__PURE__*/_jsx(MenuItem, {\n              value: weather,\n              children: translate('weather', weather, locale)\n            }, weather))]\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxs(FormControl, {\n          component: \"fieldset\",\n          children: [/*#__PURE__*/_jsx(FormLabel, {\n            component: \"legend\",\n            children: t('selectTimes')\n          }), /*#__PURE__*/_jsxs(FormGroup, {\n            children: [/*#__PURE__*/_jsx(FormControlLabel, {\n              control: /*#__PURE__*/_jsx(Checkbox, {\n                checked: times[0],\n                onChange: handleSelectTimes.bind(null, 0)\n              }),\n              label: \"00:00\"\n            }), /*#__PURE__*/_jsx(FormControlLabel, {\n              control: /*#__PURE__*/_jsx(Checkbox, {\n                checked: times[8],\n                onChange: handleSelectTimes.bind(null, 8)\n              }),\n              label: \"08:00\"\n            }), /*#__PURE__*/_jsx(FormControlLabel, {\n              control: /*#__PURE__*/_jsx(Checkbox, {\n                checked: times[16],\n                onChange: handleSelectTimes.bind(null, 16)\n              }),\n              label: \"16:00\"\n            })]\n          })]\n        })\n      }), zoneOption && !hasTime && /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(Alert, {\n          variant: \"outlined\",\n          severity: \"error\",\n          children: t('noTimeSelected')\n        })\n      }), forecast && /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(TableContainer, {\n          children: /*#__PURE__*/_jsx(Table, {\n            size: \"small\",\n            children: /*#__PURE__*/_jsx(TableBody, {\n              children: (() => {\n                let previousDate;\n                return forecast.map(({\n                  prevWeather,\n                  currWeather,\n                  seed,\n                  date\n                }, index) => {\n                  const dateString = date.toLocaleDateString(undefined, DATE_FORMAT);\n                  const timeString = toTimeString(date, {\n                    padded: true\n                  });\n                  return /*#__PURE__*/_jsxs(TableRow, {\n                    hover: true,\n                    children: [/*#__PURE__*/_jsx(TableCell, {\n                      className: classes.dateCell,\n                      align: \"right\",\n                      children: /*#__PURE__*/_jsx(Typography, {\n                        children: previousDate !== (previousDate = dateString) && dateString\n                      })\n                    }), /*#__PURE__*/_jsx(TableCell, {\n                      className: classes.dateCell,\n                      children: /*#__PURE__*/_jsx(Typography, {\n                        children: timeString\n                      })\n                    }), /*#__PURE__*/_jsx(TableCell, {\n                      className: classes.forecastCell,\n                      children: /*#__PURE__*/_jsx(Typography, {\n                        children: timeUntil(now, date)\n                      })\n                    }), /*#__PURE__*/_jsx(TableCell, {\n                      align: \"right\",\n                      className: classes.bellCell,\n                      children: /*#__PURE__*/_jsx(Typography, {\n                        children: displayBell(seed - 1)\n                      })\n                    }), /*#__PURE__*/_jsx(TableCell, {\n                      align: \"center\",\n                      className: classes.weatherCell,\n                      children: /*#__PURE__*/_jsx(WeatherIcon, {\n                        weather: prevWeather,\n                        showLabel: true\n                      })\n                    }), /*#__PURE__*/_jsx(TableCell, {\n                      className: classes.transitionCell,\n                      children: /*#__PURE__*/_jsx(ArrowForwardIcon, {})\n                    }), /*#__PURE__*/_jsx(TableCell, {\n                      align: \"right\",\n                      className: classes.bellCell,\n                      children: /*#__PURE__*/_jsx(Typography, {\n                        children: displayBell(seed)\n                      })\n                    }), /*#__PURE__*/_jsx(TableCell, {\n                      align: \"center\",\n                      className: classes.weatherCell,\n                      children: /*#__PURE__*/_jsx(WeatherIcon, {\n                        weather: currWeather,\n                        showLabel: true\n                      })\n                    })]\n                  }, index);\n                });\n              })()\n            })\n          })\n        })\n      })]\n    })\n  });\n};\n\nexport default i18n.withTranslation('skywatcher')(Forecaster);","map":null,"metadata":{},"sourceType":"module"}