{"ast":null,"code":"import CACHE from './gists/cache.json'; // const CACHE = []\n\nexport const PAYOUTS = {\n  6: 10000,\n  7: 36,\n  8: 720,\n  9: 360,\n  10: 80,\n  11: 252,\n  12: 108,\n  13: 72,\n  14: 54,\n  15: 180,\n  16: 72,\n  17: 180,\n  18: 119,\n  19: 36,\n  20: 306,\n  21: 1080,\n  22: 144,\n  23: 1800,\n  24: 3600\n};\nexport const LINES = [[6, 7, 8], [3, 4, 5], [0, 1, 2], [0, 4, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [2, 4, 6]];\n\nfunction memoize(func, createKey) {\n  const cache = {};\n  return function (...args) {\n    const key = createKey.apply(null, args);\n\n    if (cache[key] !== undefined) {\n      return cache[key];\n    } else {\n      return cache[key] = func.apply(null, args);\n    }\n  };\n}\n\nconst calcHiddenSums = memoize((hidden, count) => {\n  if (count === 0) {\n    return [0];\n  } else if (count === 1) {\n    return [...hidden];\n  } else if (count === hidden.length) {\n    let sum = 0;\n\n    for (const digit of hidden) {\n      sum += digit;\n    }\n\n    return [sum];\n  } else {\n    const lastIndex = hidden.length - 1;\n    const lastDigit = hidden[lastIndex];\n    return [...calcHiddenSums(hidden.slice(0, lastIndex), count - 1).map(sum => sum + lastDigit), ...calcHiddenSums(hidden.slice(0, lastIndex), count)];\n  }\n}, (hidden, count) => `${hidden.join(',')}|${count}`);\nconst calcLineEV = memoize((grid, lineIndex, hidden) => {\n  let revealed = 0;\n  let revealedSum = 0;\n\n  for (const i of LINES[lineIndex]) {\n    if (grid[i] !== null) {\n      ++revealed;\n      revealedSum += grid[i];\n    }\n  }\n\n  const hiddenSums = calcHiddenSums(hidden, 3 - revealed);\n  return hiddenSums.reduce((ev, hiddenSum) => ev + PAYOUTS[revealedSum + hiddenSum], 0) / hiddenSums.length;\n}, (grid, lineIndex, hidden) => `${grid.join(',')}|${lineIndex}|${hidden.join(',')}`);\nconst calcCellEV = memoize((grid, cell, hidden) => {\n  let ev = 0;\n\n  for (let i = 0; i < hidden.length; ++i) {\n    const digit = hidden[i];\n    const copyGrid = grid.slice();\n    const copyHidden = hidden.slice();\n    copyGrid[cell] = digit;\n    copyHidden.splice(i, 1);\n    ev += calcGridEV(copyGrid, copyHidden);\n  }\n\n  return ev / hidden.length;\n}, (grid, cell, hidden) => `${grid.join(',')}|${cell}|${hidden.join(',')}`);\nconst calcGridEV = memoize((grid, hidden) => {\n  let revealed = 0;\n\n  for (const cell of grid) {\n    if (cell !== null) {\n      ++revealed;\n    }\n  }\n\n  if (revealed < 4) {\n    let maxCellEV = -Infinity;\n\n    for (let i = 0; i < 9; ++i) {\n      if (grid[i] === null) {\n        maxCellEV = Math.max(maxCellEV, calcCellEV(grid, i, hidden));\n      }\n    }\n\n    return maxCellEV;\n  } else {\n    let maxLineEV = -Infinity;\n\n    for (let i = 0; i < LINES.length; ++i) {\n      maxLineEV = Math.max(maxLineEV, calcLineEV(grid, i, hidden));\n    }\n\n    return maxLineEV;\n  }\n}, (grid, hidden) => `${grid.join(',')}|${hidden.join(',')}`);\nexport function validateGrid(grid) {\n  let enteredCount = 0;\n  const seenValues = {};\n  const duplicateCells = [];\n\n  for (let i = 0; i < 9; ++i) {\n    const value = grid[i];\n\n    if (value !== null) {\n      ++enteredCount;\n      const seenAt = seenValues[value];\n\n      if (seenAt != null) {\n        duplicateCells.push(seenAt);\n        duplicateCells.push(i);\n        seenValues[value] = true;\n      } else if (seenAt !== undefined) {\n        duplicateCells.push(i);\n      } else {\n        seenValues[value] = i;\n      }\n    }\n  }\n\n  if (enteredCount === 0) {\n    return {\n      type: 'EMPTY'\n    };\n  }\n\n  if (enteredCount > 4) {\n    const enteredCells = [];\n    grid.forEach((_, cellIndex) => {\n      if (grid[cellIndex] !== null) {\n        enteredCells.push(cellIndex);\n      }\n    });\n    return {\n      type: 'TOO MANY',\n      cells: enteredCells\n    };\n  }\n\n  if (duplicateCells.length > 0) {\n    return {\n      type: 'DUPLICATES',\n      cells: duplicateCells\n    };\n  }\n\n  return null;\n}\nexport function getSuggestion(grid) {\n  const hidden = [];\n\n  for (let i = 1; i <= 9; ++i) {\n    if (!grid.includes(i)) {\n      hidden.push(i);\n    }\n  }\n\n  const revealed = 9 - hidden.length;\n\n  if (revealed === 1) {\n    const index = grid.findIndex(digit => digit !== null);\n    const cached = CACHE[index * 9 + grid[index] - 1];\n    return {\n      type: 'CELL',\n      maxCellEV: cached.v,\n      maxCellLocations: Array.isArray(cached.c) ? cached.c : [cached.c]\n    };\n  }\n\n  if (revealed < 4) {\n    let maxCellEV = -Infinity;\n    let maxCellLocations = [];\n\n    for (let i = 0; i < 9; ++i) {\n      if (grid[i] === null) {\n        const cellEV = calcCellEV(grid, i, hidden);\n\n        if (cellEV > maxCellEV) {\n          maxCellEV = cellEV;\n          maxCellLocations = [i];\n        } else if (cellEV === maxCellEV) {\n          maxCellLocations.push(i);\n        }\n      }\n    }\n\n    return {\n      type: 'CELL',\n      maxCellEV,\n      maxCellLocations\n    };\n  } else {\n    let maxLineEV = -Infinity;\n    let maxLineIds = [];\n\n    for (let i = 0; i < LINES.length; ++i) {\n      const lineEV = calcLineEV(grid, i, hidden);\n\n      if (lineEV > maxLineEV) {\n        maxLineEV = lineEV;\n        maxLineIds = [i];\n      } else if (lineEV === maxLineEV) {\n        maxLineIds.push(i);\n      }\n    }\n\n    return {\n      type: 'LINE',\n      maxLineEV,\n      maxLineIds\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"module"}