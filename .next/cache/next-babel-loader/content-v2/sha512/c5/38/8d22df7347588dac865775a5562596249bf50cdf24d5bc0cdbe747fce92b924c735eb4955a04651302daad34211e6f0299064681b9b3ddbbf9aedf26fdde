{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport { makeStyles, fade } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Section from '../Section';\nimport NameAutocomplete from './NameAutocomplete';\nimport MyNameIs from './MyNameIs';\nimport { roegadynDictionary } from './ffxiv-name-generator/data';\nimport { translate, Clan, Gender } from './ffxiv-name-generator';\nimport { formatName, conjugateRoegadyn, combineRoegadyn } from './ffxiv-name-generator/src/utils';\nimport { useTranslation } from '../i18n';\nvar WORDS = Object.keys(roegadynDictionary);\nvar useStyles = makeStyles(function (theme) {\n  return {\n    rules: {\n      borderLeftWidth: '2px',\n      borderLeftStyle: 'solid',\n      borderLeftColor: fade(theme.palette.text.secondary, 0.5),\n      paddingLeft: theme.spacing(2),\n      '& > dd:not(:last-child)': {\n        marginBottom: theme.spacing(1)\n      }\n    }\n  };\n});\n\nvar SeaWolfMale = function SeaWolfMale() {\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation('name-generator'),\n      i18n = _useTranslation.i18n;\n\n  var _useState = useState(''),\n      forenameWord1 = _useState[0],\n      setForenameWord1 = _useState[1];\n\n  var _useState2 = useState(''),\n      forenameWord2 = _useState2[0],\n      setForenameWord2 = _useState2[1];\n\n  var _useState3 = useState(''),\n      surnameWord1 = _useState3[0],\n      setSurnameWord1 = _useState3[1];\n\n  var _useState4 = useState(''),\n      surnameWord2 = _useState4[0],\n      setSurnameWord2 = _useState4[1];\n\n  var forename = combineRoegadyn(conjugateRoegadyn(forenameWord1, 'A'), conjugateRoegadyn(forenameWord2, 'N'));\n  var surname = surnameWord1 !== '' || surnameWord2 !== '' ? combineRoegadyn(conjugateRoegadyn(surnameWord1, 'A'), conjugateRoegadyn(surnameWord2, 'N'), 'Syn') : '';\n  var name = formatName(forename, surname);\n  var locale = i18n.language;\n  return /*#__PURE__*/_jsx(Section, {\n    title: \"\".concat(translate('clan', Clan.SeaWolf, locale), \" (\").concat(translate('gender', Gender.Male, locale), \")\"),\n    children: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(NameAutocomplete, {\n              options: WORDS,\n              getOptionLabel: function getOptionLabel(word) {\n                var entry = roegadynDictionary[word];\n                return entry !== undefined ? \"\".concat(word, \" (\").concat(entry.grammar, \", \").concat(entry.definition_en, \")\") : word;\n              },\n              value: forenameWord1,\n              onChange: setForenameWord1,\n              label: \"Forename - First word\",\n              placeholder: \"Enter a Roegadyn word\"\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(NameAutocomplete, {\n              options: WORDS,\n              getOptionLabel: function getOptionLabel(word) {\n                var entry = roegadynDictionary[word];\n                return entry !== undefined ? \"\".concat(word, \" (\").concat(entry.grammar, \", \").concat(entry.definition_en, \")\") : word;\n              },\n              value: forenameWord2,\n              onChange: setForenameWord2,\n              label: \"Forename - Second word\",\n              placeholder: \"Enter a Roegadyn word\"\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: [/*#__PURE__*/_jsxs(Typography, {\n          paragraph: true,\n          children: [\"Sea Wolf forenames are formed from two words of the ancient Roegadyn language, typically a descriptor and a noun.\", /*#__PURE__*/_jsx(\"br\", {}), \"E.g. \\u201CMerlwyb\\u201D = \\u201CMerl\\u201D (Sea) + \\u201CWyb\\u201D (Woman)\"]\n        }), /*#__PURE__*/_jsx(Typography, {\n          children: \"Words are conjugated according to the following rules (with exceptions):\"\n        }), /*#__PURE__*/_jsxs(\"dl\", {\n          className: classes.rules,\n          children: [/*#__PURE__*/_jsxs(Typography, {\n            component: \"dt\",\n            children: [/*#__PURE__*/_jsx(\"b\", {\n              children: \"N \\u2192 A\"\n            }), \". To conjugate a noun to an adjective, add \\u201C\\u2011i\\u201D.\"]\n          }), /*#__PURE__*/_jsxs(Typography, {\n            component: \"dd\",\n            children: [\"\\u201CAis\\u201D (Ice) + \\u201Ci\\u201D = \\u201CAis\", /*#__PURE__*/_jsx(\"b\", {\n              children: \"i\"\n            }), \"\\u201D (Icy)\"]\n          }), /*#__PURE__*/_jsxs(Typography, {\n            component: \"dt\",\n            children: [/*#__PURE__*/_jsx(\"b\", {\n              children: \"V \\u2192 N\"\n            }), \". To conjugate a verb to a noun, add \\u201C\\u2011a\\u201D.\"]\n          }), /*#__PURE__*/_jsxs(Typography, {\n            component: \"dd\",\n            children: [\"\\u201CBraen\\u201D (Break) + \\u201Ca\\u201D = \\u201CBraen\", /*#__PURE__*/_jsx(\"b\", {\n              children: \"a\"\n            }), \"\\u201D (Breaker)\"]\n          }), /*#__PURE__*/_jsxs(Typography, {\n            component: \"dt\",\n            children: [/*#__PURE__*/_jsx(\"b\", {\n              children: \"V \\u2192 A\"\n            }), \". To conjugate a verb to an adjective, add \\u201C\\u2011n\\u201D.\"]\n          }), /*#__PURE__*/_jsxs(Typography, {\n            component: \"dd\",\n            children: [\"\\u201CFloer\\u201D (Lead) + \\u201Cn\\u201D = \\u201CFloer\", /*#__PURE__*/_jsx(\"b\", {\n              children: \"n\"\n            }), \"\\u201D (Leading)\"]\n          })]\n        }), /*#__PURE__*/_jsxs(Typography, {\n          paragraph: true,\n          children: [\"When combining words, double letters are collapsed.\", /*#__PURE__*/_jsx(\"br\", {}), \"E.g. \\u201CRost\", /*#__PURE__*/_jsx(\"b\", {\n            children: \"n\"\n          }), \"\\u201D (Rusty) + \\u201C\", /*#__PURE__*/_jsx(\"b\", {\n            children: \"N\"\n          }), \"oez\\u201D (Walnut) = \\u201CRost\", /*#__PURE__*/_jsx(\"b\", {\n            children: \"n\"\n          }), \"oez\\u201D (Rusty Walnut)\"]\n        })]\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(NameAutocomplete, {\n              options: WORDS,\n              getOptionLabel: function getOptionLabel(word) {\n                var entry = roegadynDictionary[word];\n                return entry !== undefined ? \"\".concat(word, \" (\").concat(entry.grammar, \", \").concat(entry.definition_en, \")\") : word;\n              },\n              value: surnameWord1,\n              onChange: setSurnameWord1,\n              label: \"Surname - First word\",\n              placeholder: \"Enter a Roegadyn word\"\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsx(NameAutocomplete, {\n              options: WORDS,\n              getOptionLabel: function getOptionLabel(word) {\n                var entry = roegadynDictionary[word];\n                return entry !== undefined ? \"\".concat(word, \" (\").concat(entry.grammar, \", \").concat(entry.definition_en, \")\") : word;\n              },\n              value: surnameWord2,\n              onChange: setSurnameWord2,\n              label: \"Surname - Second word\",\n              placeholder: \"Enter a Roegadyn word\"\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxs(Typography, {\n          paragraph: true,\n          children: [\"The surname is made from the father\\u2019s name with \\u201CSyn\\u201D (Son) added to the end.\", /*#__PURE__*/_jsx(\"br\", {}), \"E.g. \\u201CLyngmhol\", /*#__PURE__*/_jsx(\"b\", {\n            children: \"syn\"\n          }), \"\\u201D = \\u201CLyng\\u201D (Long) + \\u201CMhol\\u201D (Eft) + \\u201CSyn\\u201D (Son)\"]\n        })\n      }), name.length > 0 && /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(MyNameIs, {\n          name: name\n        })\n      })]\n    })\n  });\n};\n\nexport default SeaWolfMale;","map":null,"metadata":{},"sourceType":"module"}