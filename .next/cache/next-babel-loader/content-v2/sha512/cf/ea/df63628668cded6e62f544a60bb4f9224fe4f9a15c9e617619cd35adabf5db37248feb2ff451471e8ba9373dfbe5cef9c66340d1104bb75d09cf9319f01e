{"ast":null,"code":"import _toConsumableArray from \"/root/ffxiv/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { timeUntil as genericTimeUntil } from '../utils';\nimport { baits, fishes } from './ffxiv-ocean-fishing/data';\nimport * as maps from './maps';\n\nfunction memoize(func, getKey) {\n  var cache = {};\n\n  var _func = function _func(arg) {\n    var key = getKey(arg);\n    var cache = _func.cache;\n    return cache[key] !== undefined ? cache[key] : cache[key] = func(arg);\n  };\n\n  _func.cache = cache;\n  return _func;\n}\n\nexport function timeUntil(now, then, options) {\n  var diff = then.getTime() - now.getTime();\n\n  if (diff < -900000) {\n    return options.t('routeInfo.enRoute');\n  } else if (diff < 0) {\n    return options.t('routeInfo.boardingNow');\n  } else {\n    return genericTimeUntil(now, then, options);\n  }\n}\nexport function getBlueFish(stopTime) {\n  var blueFish = maps.BLUE_FISH_MAP[stopTime[0]];\n  var spreadsheetData = blueFish.spreadsheetData;\n\n  if (spreadsheetData.time !== null) {\n    if (spreadsheetData.time.includes(stopTime[1])) {\n      return blueFish;\n    }\n  }\n\n  return null;\n}\nexport function isBaitRequired(fish, bait) {\n  for (var _i = 0, _Object$keys = Object.keys(fish.biteTimes); _i < _Object$keys.length; _i++) {\n    var otherBaitId = _Object$keys[_i];\n\n    if (otherBaitId === 'all' || +otherBaitId === bait.id || +otherBaitId === 29717) {\n      continue;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport var getBaitChain = memoize(function _getBaitChain(fish) {\n  var _fish$spreadsheetData = fish.spreadsheetData,\n      bait = _fish$spreadsheetData.bestBait,\n      mooch = _fish$spreadsheetData.mooch,\n      tug = _fish$spreadsheetData.tug;\n\n  if (bait === null && mooch === null) {\n    return [{\n      bait: baits[29717]\n    }, {\n      fish: fish,\n      tug: tug\n    }]; // Versatile Lure as fallback\n  } else {\n    return bait !== null ? [{\n      bait: bait\n    }, {\n      fish: fish,\n      tug: tug\n    }] : [].concat(_toConsumableArray(_getBaitChain(mooch)), [{\n      fish: fish,\n      tug: tug\n    }]);\n  }\n}, function (fish) {\n  return String(fish.id);\n});\nexport var getBaitGroup = memoize(function (fish) {\n  var intuition = fish.spreadsheetData.intuition;\n  var baitChain = getBaitChain(fish);\n  return {\n    baits: baitChain,\n    baitIsRequired: isBaitRequired(fish, baitChain[0].bait),\n    intuitionFishes: intuition !== null ? intuition.map(function (_ref) {\n      var fish = _ref.fish,\n          count = _ref.count;\n      var baitChain = getBaitChain(fish);\n      return {\n        baits: baitChain,\n        baitIsRequired: isBaitRequired(fish, baitChain[0].bait),\n        count: count\n      };\n    }) : undefined\n  };\n}, function (fish) {\n  return String(fish.id);\n}); // See https://discord.com/channels/327124808217395200/679407580430467092/864238268514041917\n\ngetBaitGroup.cache = {\n  // Stonescale\n  29790: {\n    baits: getBaitChain(fishes[29790]),\n    baitIsRequired: true,\n    intuitionFishes: [{\n      baits: [{\n        bait: baits[2591]\n      }, {\n        fish: fishes[29769],\n        tug: 2\n      }],\n      baitIsRequired: false,\n      count: 1\n    }, {\n      baits: [{\n        bait: baits[29714]\n      }, {\n        fish: fishes[29768],\n        tug: 1\n      }],\n      baitIsRequired: false,\n      count: 1\n    }]\n  },\n  // Hafgufa\n  32074: {\n    baits: getBaitChain(fishes[32074]),\n    baitIsRequired: true,\n    intuitionFishes: [{\n      baits: [{\n        bait: baits[29716]\n      }, {\n        fish: fishes[32070],\n        tug: 3\n      }],\n      baitIsRequired: false,\n      count: 2\n    }, {\n      baits: [{\n        bait: baits[27590]\n      }, {\n        fish: fishes[32067],\n        tug: 2\n      }],\n      baitIsRequired: false,\n      count: 1\n    }]\n  },\n  // Seafaring Toad\n  32094: {\n    baits: getBaitChain(fishes[32094]),\n    baitIsRequired: true,\n    intuitionFishes: [{\n      baits: [{\n        bait: baits[2587]\n      }, {\n        fish: fishes[32089],\n        tug: 2\n      }],\n      baitIsRequired: false,\n      count: 3\n    }]\n  }\n};\n\nif (true) {\n  window.BaitCache1 = getBaitChain.cache;\n  window.BaitCache2 = getBaitGroup.cache;\n}\n\nexport function subtextDH(fish) {\n  var doubleHook = fish.spreadsheetData.doubleHook;\n  return doubleHook !== null ? \"DH: \".concat(Array.isArray(doubleHook) ? doubleHook.join('-') : doubleHook) : 'DH: ?';\n}\nexport function subtextBiteTime(fish) {\n  var biteTimeAll = fish.biteTimes.all;\n  return biteTimeAll !== null ? \"\".concat(biteTimeAll[0] === biteTimeAll[1] ? biteTimeAll[0] : biteTimeAll.join('-'), \"s\") : '?s';\n}\nexport function upperFirst(str) {\n  return str.length === 0 ? '' : str[0].toUpperCase() + str.slice(1);\n}\nexport function cleanObjective(objective) {\n  return objective.replace(/<[^<>]*?\\/>/g, '');\n}\nexport function cleanRequirement(requirement) {\n  return upperFirst(requirement.replace(/^(Requirement:|Bedingung:|Condition :|達成条件：|达成条件：|달성 조건: )/, '').trim());\n} // export function getBlindDHRanges (fishId: number, baitId: number, time: Time) {\n//   const spreadsheetData = fishes[fishId].spreadsheetData\n//   if (time && spreadsheetData.time && spreadsheetData.time.indexOf(time) === -1) return null\n//   if (!fishes[fishId].biteTimes[baitId]) return null\n//\n//   const blindDHRanges = [fishes[fishId].biteTimes[baitId]]\n//   const fishingSpot = Object.values(fishingSpots).find(fishingSpot => fishingSpot.fishes.includes(fishId))\n//   for (const otherFishId of fishingSpot.fishes) {\n//     if (otherFishId === fishId) continue\n//     const otherSpreadsheetData = fishes[otherFishId].spreadsheetData\n//\n//     if (otherSpreadsheetData.tug !== spreadsheetData.tug) continue\n//     if (time && otherSpreadsheetData.time && otherSpreadsheetData.time.indexOf(time) === -1) continue\n//     if (!fishes[otherFishId].biteTimes[baitId]) continue\n//     const otherRange = fishes[otherFishId].biteTimes[baitId]\n//\n//     for (let i = 0; i < blindDHRanges.length;) {\n//       const currentRange = blindDHRanges[i]\n//       if (otherRange[1] < currentRange[0] || otherRange[0] > currentRange[1]) {\n//         // No overlap\n//         ++i\n//       } else if (otherRange[0] <= currentRange[0] && otherRange[1] >= currentRange[1]) {\n//         // Full overlap\n//         blindDHRanges.splice(i, 1)\n//       } else if (otherRange[0] > currentRange[0] && otherRange[1] < currentRange[1]) {\n//         // Splits currentRange into 2\n//         blindDHRanges.splice(i, 1, [currentRange[0], otherRange[0] - 1], [otherRange[1] + 1, currentRange[1]])\n//         i += 2\n//       } else {\n//         // Partial overlap\n//         if (currentRange[0] < otherRange[0] && otherRange[0] < currentRange[1]) {\n//           blindDHRanges.splice(i++, 1, [currentRange[0], otherRange[0] - 1])\n//         } else if (currentRange[0] < otherRange[1] && otherRange[1] < currentRange[1]) {\n//           blindDHRanges.splice(i++, 1, [otherRange[1] + 1, currentRange[1]])\n//         } else {\n//           console.error('This should never happen')\n//           i++\n//         }\n//       }\n//     }\n//   }\n//\n//   return blindDHRanges\n// }","map":null,"metadata":{},"sourceType":"module"}