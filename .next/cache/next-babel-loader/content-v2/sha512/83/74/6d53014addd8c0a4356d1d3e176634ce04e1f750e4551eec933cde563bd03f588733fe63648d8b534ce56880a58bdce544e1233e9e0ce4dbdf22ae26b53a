{"ast":null,"code":"import { timeUntil as genericTimeUntil } from '../utils';\nimport { baits } from './ffxiv-ocean-fishing/data';\nimport * as maps from './maps';\n\nfunction memoize(func) {\n  // const cache: { [key: string]: R } = {}\n  // return (arg: T) => {\n  //   const key = String(arg)\n  //   return cache[key] !== undefined ? cache[key] : (cache[key] = func(arg))\n  // }\n  return func;\n}\n\nexport function timeUntil(now, then, options) {\n  const diff = then.getTime() - now.getTime();\n\n  if (diff < -900000) {\n    return options.t('routeInfo.enRoute');\n  } else if (diff < 0) {\n    return options.t('routeInfo.boardingNow');\n  } else {\n    return genericTimeUntil(now, then, {\n      full: options.full,\n      locale: options.locale\n    });\n  }\n}\nexport function getBlueFish(stopTime) {\n  const blueFish = maps.BLUE_FISH_MAP[stopTime[0]];\n  const spreadsheetData = blueFish.spreadsheetData;\n\n  if (spreadsheetData.time !== null) {\n    if (spreadsheetData.time.includes(stopTime[1])) {\n      return blueFish;\n    }\n  }\n\n  return null;\n}\nexport function isBaitRequired(fish, bait) {\n  for (const otherBaitId of Object.keys(fish.biteTimes)) {\n    if (otherBaitId === 'all' || +otherBaitId === bait.id || +otherBaitId === 29717) {\n      continue;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport const getBaitChain = memoize(function _getBaitChain(fish) {\n  const {\n    bait,\n    mooch,\n    tug\n  } = fish.spreadsheetData;\n\n  if (bait === null && mooch === null) {\n    return [{\n      bait: baits[29717]\n    }, {\n      fish,\n      tug\n    }]; // Versatile Lure as fallback\n  } else {\n    return bait !== null ? [{\n      bait\n    }, {\n      fish,\n      tug\n    }] : [..._getBaitChain(mooch), {\n      fish,\n      tug\n    }];\n  }\n});\nexport const getBaitGroup = memoize(fish => {\n  const {\n    intuition\n  } = fish.spreadsheetData;\n  const baitChain = getBaitChain(fish);\n  return {\n    baits: baitChain,\n    baitIsRequired: isBaitRequired(fish, baitChain[0].bait),\n    intuitionFishes: intuition !== null ? intuition.map(({\n      fish,\n      count\n    }) => {\n      const baitChain = getBaitChain(fish);\n      return {\n        baits: baitChain,\n        baitIsRequired: isBaitRequired(fish, baitChain[0].bait),\n        count\n      };\n    }) : undefined\n  };\n});\nexport function subtextDH(fish) {\n  const doubleHook = fish.spreadsheetData.doubleHook;\n  return doubleHook !== null ? `DH: ${Array.isArray(doubleHook) ? doubleHook.join('-') : doubleHook}` : 'DH: ?';\n}\nexport function subtextBiteTime(fish) {\n  const biteTimeAll = fish.biteTimes.all;\n  return biteTimeAll !== null ? `${biteTimeAll[0] === biteTimeAll[1] ? biteTimeAll[0] : biteTimeAll.join('-')}s` : '?s';\n}\nexport function upperFirst(str) {\n  if (str.length === 0) {\n    return str;\n  } else {\n    return str[0].toUpperCase() + str.slice(1);\n  }\n} // export function getBlindDHRanges (fishId: number, baitId: number, time: Time) {\n//   const spreadsheetData = fishes[fishId].spreadsheetData\n//   if (time && spreadsheetData.time && spreadsheetData.time.indexOf(time) === -1) return null\n//   if (!fishes[fishId].biteTimes[baitId]) return null\n//\n//   const blindDHRanges = [fishes[fishId].biteTimes[baitId]]\n//   const fishingSpot = Object.values(fishingSpots).find(fishingSpot => fishingSpot.fishes.includes(fishId))\n//   for (const otherFishId of fishingSpot.fishes) {\n//     if (otherFishId === fishId) continue\n//     const otherSpreadsheetData = fishes[otherFishId].spreadsheetData\n//\n//     if (otherSpreadsheetData.tug !== spreadsheetData.tug) continue\n//     if (time && otherSpreadsheetData.time && otherSpreadsheetData.time.indexOf(time) === -1) continue\n//     if (!fishes[otherFishId].biteTimes[baitId]) continue\n//     const otherRange = fishes[otherFishId].biteTimes[baitId]\n//\n//     for (let i = 0; i < blindDHRanges.length;) {\n//       const currentRange = blindDHRanges[i]\n//       if (otherRange[1] < currentRange[0] || otherRange[0] > currentRange[1]) {\n//         // No overlap\n//         ++i\n//       } else if (otherRange[0] <= currentRange[0] && otherRange[1] >= currentRange[1]) {\n//         // Full overlap\n//         blindDHRanges.splice(i, 1)\n//       } else if (otherRange[0] > currentRange[0] && otherRange[1] < currentRange[1]) {\n//         // Splits currentRange into 2\n//         blindDHRanges.splice(i, 1, [currentRange[0], otherRange[0] - 1], [otherRange[1] + 1, currentRange[1]])\n//         i += 2\n//       } else {\n//         // Partial overlap\n//         if (currentRange[0] < otherRange[0] && otherRange[0] < currentRange[1]) {\n//           blindDHRanges.splice(i++, 1, [currentRange[0], otherRange[0] - 1])\n//         } else if (currentRange[0] < otherRange[1] && otherRange[1] < currentRange[1]) {\n//           blindDHRanges.splice(i++, 1, [otherRange[1] + 1, currentRange[1]])\n//         } else {\n//           console.error('This should never happen')\n//           i++\n//         }\n//       }\n//     }\n//   }\n//\n//   return blindDHRanges\n// }","map":null,"metadata":{},"sourceType":"module"}