{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport LinkIcon from '@material-ui/icons/Link';\nimport ImageIcon from '@material-ui/icons/Image';\nconst MAX_DEPTH = 3;\n\nfunction isImageUrl(url) {\n  return /^(\\/|http).*\\.(png|jpg)(\\?.*)?$/.test(url);\n}\n\nconst useStyles = makeStyles(theme => ({\n  level: {\n    listStyleType: 'none',\n    margin: theme.spacing(0),\n    padding: theme.spacing(0, 0, 0, 4)\n  },\n  collapsible: {\n    cursor: 'pointer',\n    position: 'relative',\n    display: 'inline-block',\n    width: '100%',\n    '&::before': {\n      content: '\"+\"',\n      position: 'absolute',\n      left: '-1em',\n      fontWeight: 'bold'\n    }\n  },\n  collapsibleClosed: {\n    '&::before': {\n      content: '\"-\"'\n    }\n  },\n  key: {\n    fontWeight: 'bold',\n    color: theme.palette.type === 'dark' ? '#ff9691' : '#b75052'\n  },\n  function: {\n    color: theme.palette.type === 'dark' ? '#c5b6ff' : '#3e20b7'\n  },\n  string: {\n    color: theme.palette.type === 'dark' ? '#c9fdbc' : '#0b6300',\n    'a&': {\n      cursor: 'pointer'\n    }\n  },\n  icon: {\n    display: 'inline-block',\n    position: 'relative',\n    width: '1.5em',\n    color: theme.palette.text.primary,\n    opacity: 0.5,\n    '& > svg': {\n      position: 'absolute',\n      left: 0,\n      bottom: '-0.2em'\n    }\n  },\n  number: {\n    color: theme.palette.type === 'dark' ? '#c5b6ff' : '#3e20b7'\n  },\n  undefined: {\n    fontWeight: 'bold',\n    color: theme.palette.type === 'dark' ? '#c5b6ff' : '#3e20b7'\n  },\n  null: {\n    fontWeight: 'bold',\n    color: theme.palette.type === 'dark' ? '#c5b6ff' : '#3e20b7'\n  }\n}));\n\nconst JSONObject = ({\n  data,\n  opt: {\n    depth,\n    objKey,\n    comma,\n    onChangeUrl,\n    _isContent\n  }\n}) => {\n  const classes = useStyles();\n  const {\n    0: open,\n    1: setOpen\n  } = useState(depth <= MAX_DEPTH);\n\n  const handleToggleOpen = () => {\n    setOpen(!open);\n  };\n\n  if (!open) {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(\"span\", {\n        onClick: handleToggleOpen,\n        className: clsx(classes.collapsible, !open && classes.collapsibleClosed),\n        children: [objKey && /*#__PURE__*/_jsx(\"span\", {\n          className: classes.key,\n          children: `\"${objKey}\": `\n        }), '{ ... }', comma && ',']\n      }), /*#__PURE__*/_jsx(\"br\", {})]\n    });\n  } else {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(\"span\", {\n        onClick: handleToggleOpen,\n        className: clsx(classes.collapsible, !open && classes.collapsibleClosed),\n        children: [objKey && /*#__PURE__*/_jsx(\"span\", {\n          className: classes.key,\n          children: `\"${objKey}\": `\n        }), '{']\n      }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"ul\", {\n        className: classes.level,\n        children: Object.keys(data).map((key, index, array) => /*#__PURE__*/_jsx(\"li\", {\n          children: renderJSON(data[key], {\n            depth: depth + 1,\n            objKey: key,\n            comma: index !== array.length - 1,\n            onChangeUrl,\n            _isContent\n          })\n        }, index))\n      }), /*#__PURE__*/_jsxs(\"span\", {\n        children: ['}', comma && ',']\n      }), /*#__PURE__*/_jsx(\"br\", {})]\n    });\n  }\n};\n\nconst JSONArray = ({\n  data,\n  opt: {\n    depth,\n    objKey,\n    comma,\n    onChangeUrl,\n    _isContent\n  }\n}) => {\n  const classes = useStyles();\n  const {\n    0: open,\n    1: setOpen\n  } = useState(depth <= MAX_DEPTH);\n\n  const handleToggleOpen = () => {\n    setOpen(!open);\n  };\n\n  if (!open) {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(\"span\", {\n        onClick: handleToggleOpen,\n        className: clsx(classes.collapsible, !open && classes.collapsibleClosed),\n        children: [objKey && /*#__PURE__*/_jsx(\"span\", {\n          className: classes.key,\n          children: `\"${objKey}\": `\n        }), '[ ... ]', comma && ',']\n      }), /*#__PURE__*/_jsx(\"br\", {})]\n    });\n  } else {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(\"span\", {\n        onClick: handleToggleOpen,\n        className: clsx(classes.collapsible, !open && classes.collapsibleClosed),\n        children: [objKey && /*#__PURE__*/_jsx(\"span\", {\n          className: classes.key,\n          children: `\"${objKey}\": `\n        }), '[']\n      }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"ul\", {\n        className: classes.level,\n        children: data.map((datum, index) => /*#__PURE__*/_jsx(\"li\", {\n          children: renderJSON(datum, {\n            depth: depth + 1,\n            comma: index !== data.length - 1,\n            onChangeUrl,\n            _isContent\n          })\n        }, index))\n      }), /*#__PURE__*/_jsxs(\"span\", {\n        children: [']', comma && ',']\n      }), /*#__PURE__*/_jsx(\"br\", {})]\n    });\n  }\n};\n\nconst JSONString = ({\n  data,\n  opt: {\n    objKey,\n    comma,\n    onChangeUrl,\n    _isContent\n  }\n}) => {\n  const classes = useStyles();\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n\n  const handleToggleOpen = () => {\n    setOpen(!open);\n  };\n\n  if (_isContent || objKey === 'Url') {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(\"span\", {\n        children: [objKey && /*#__PURE__*/_jsx(\"span\", {\n          className: classes.key,\n          children: `\"${objKey}\": `\n        }), /*#__PURE__*/_jsxs(Link, {\n          onClick: () => onChangeUrl(_isContent ? `/${data}` : data),\n          className: classes.string,\n          children: [\"\\\"\", data, \"\\\"\", !_isContent && /*#__PURE__*/_jsxs(_Fragment, {\n            children: [\" \", /*#__PURE__*/_jsx(\"div\", {\n              className: classes.icon,\n              children: /*#__PURE__*/_jsx(LinkIcon, {})\n            })]\n          })]\n        }), comma && ',']\n      }), /*#__PURE__*/_jsx(\"br\", {})]\n    });\n  } else if (isImageUrl(data)) {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(\"span\", {\n        children: [objKey && /*#__PURE__*/_jsx(\"span\", {\n          className: classes.key,\n          children: `\"${objKey}\": `\n        }), /*#__PURE__*/_jsxs(Link, {\n          onClick: handleToggleOpen,\n          className: classes.string,\n          children: [\"\\\"\", data, \"\\\" \", /*#__PURE__*/_jsx(\"div\", {\n            className: classes.icon,\n            children: /*#__PURE__*/_jsx(ImageIcon, {})\n          })]\n        }), comma && ',']\n      }), open && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"img\", {\n          src: data.startsWith('http') ? data : `https://xivapi.com${data}`\n        })]\n      }), /*#__PURE__*/_jsx(\"br\", {})]\n    });\n  } else {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(\"span\", {\n        children: [objKey && /*#__PURE__*/_jsx(\"span\", {\n          className: classes.key,\n          children: `\"${objKey}\": `\n        }), /*#__PURE__*/_jsxs(\"span\", {\n          className: classes.string,\n          children: [\"\\\"\", data, \"\\\"\"]\n        }), comma && ',']\n      }), /*#__PURE__*/_jsx(\"br\", {})]\n    });\n  }\n};\n\nconst JSONFunction = ({\n  data,\n  opt: {\n    objKey,\n    comma\n  }\n}) => {\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"span\", {\n      children: [objKey && /*#__PURE__*/_jsx(\"span\", {\n        className: classes.key,\n        children: `\"${objKey}\": `\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: classes.function,\n        children: String(data)\n      }), comma && ',']\n    }), /*#__PURE__*/_jsx(\"br\", {})]\n  });\n};\n\nconst JSONNumber = ({\n  data,\n  opt: {\n    objKey,\n    comma\n  }\n}) => {\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"span\", {\n      children: [objKey && /*#__PURE__*/_jsx(\"span\", {\n        className: classes.key,\n        children: `\"${objKey}\": `\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: classes.number,\n        children: data\n      }), comma && ',']\n    }), /*#__PURE__*/_jsx(\"br\", {})]\n  });\n};\n\nconst JSONUndefined = ({\n  opt: {\n    objKey,\n    comma\n  }\n}) => {\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"span\", {\n      children: [objKey && /*#__PURE__*/_jsx(\"span\", {\n        className: classes.key,\n        children: `\"${objKey}\": `\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: classes.undefined,\n        children: \"undefined\"\n      }), comma && ',']\n    }), /*#__PURE__*/_jsx(\"br\", {})]\n  });\n};\n\nconst JSONNull = ({\n  opt: {\n    objKey,\n    comma\n  }\n}) => {\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"span\", {\n      children: [objKey && /*#__PURE__*/_jsx(\"span\", {\n        className: classes.key,\n        children: `\"${objKey}\": `\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: classes.null,\n        children: \"null\"\n      }), comma && ',']\n    }), /*#__PURE__*/_jsx(\"br\", {})]\n  });\n};\n\nexport default function renderJSON(data, opt) {\n  if (data === undefined) return /*#__PURE__*/_jsx(JSONUndefined, {\n    data: data,\n    opt: opt\n  });\n  if (data === null) return /*#__PURE__*/_jsx(JSONNull, {\n    data: data,\n    opt: opt\n  });\n\n  switch (typeof data) {\n    case 'object':\n      {\n        return Array.isArray(data) ? /*#__PURE__*/_jsx(JSONArray, {\n          data: data,\n          opt: opt\n        }) : /*#__PURE__*/_jsx(JSONObject, {\n          data: data,\n          opt: opt\n        });\n      }\n\n    case 'function':\n      return /*#__PURE__*/_jsx(JSONFunction, {\n        data: data,\n        opt: opt\n      });\n\n    case 'string':\n      return /*#__PURE__*/_jsx(JSONString, {\n        data: data,\n        opt: opt\n      });\n\n    case 'number':\n      return /*#__PURE__*/_jsx(JSONNumber, {\n        data: data,\n        opt: opt\n      });\n\n    default:\n      console.log(typeof data, data);\n      return /*#__PURE__*/_jsx(JSONString, {\n        data: \"???\",\n        opt: opt\n      });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}