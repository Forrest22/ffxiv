{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport Grid from '@material-ui/core/Grid';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Alert from '@material-ui/lab/Alert';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport Section from '../Section';\nimport ForecasterTable from './ForecasterTable';\nimport { getRegions, getPlaces, getSeed, getWeatherRates, getPossibleWeathers, forecastWeathers, translateWeather, translatePlace } from './weather';\nimport { useTranslation } from '../i18n';\nconst PLACE_OPTIONS = [];\n\nfor (const region of getRegions()) {\n  for (const place of getPlaces(region)) {\n    for (let index = 0; index < getWeatherRates(place).length; ++index) {\n      PLACE_OPTIONS.push({\n        region,\n        place,\n        weatherRateIndex: index\n      });\n    }\n  }\n}\n\nconst useStyles = makeStyles(theme => ({\n  transitionWeather: {\n    [theme.breakpoints.down('sm')]: {\n      marginBottom: theme.spacing(2)\n    }\n  },\n  transitionArrow: {\n    display: 'block',\n    margin: `${theme.spacing(0.5)}px auto`,\n    fontSize: '2em',\n    [theme.breakpoints.down('sm')]: {\n      display: 'none'\n    }\n  }\n}));\n\nconst Forecaster = ({\n  now\n}) => {\n  const classes = useStyles();\n  const {\n    t,\n    i18n\n  } = useTranslation('skywatcher');\n  const {\n    0: placeOption,\n    1: setPlaceOption\n  } = useState(null);\n  const {\n    0: transitionWeather,\n    1: setTransitionWeather\n  } = useState(null);\n  const {\n    0: targetWeather,\n    1: setTargetWeather\n  } = useState(null);\n  const {\n    0: times,\n    1: setTimes\n  } = useState({\n    0: true,\n    8: true,\n    16: true\n  });\n  const possibleWeathers = placeOption && getPossibleWeathers(placeOption.place, placeOption.weatherRateIndex);\n  const hasTime = times[0] || times[8] || times[16];\n  const forecast = placeOption && hasTime && forecastWeathers(placeOption.place, placeOption.weatherRateIndex, (prevWeather, currWeather, seed) => {\n    if (transitionWeather && transitionWeather !== prevWeather) return false;\n    if (targetWeather && targetWeather !== currWeather) return false;\n    if (!times[0] && seed % 3 === 0) return false;\n    if (!times[8] && seed % 3 === 1) return false;\n    if (!times[16] && seed % 3 === 2) return false;\n    return true;\n  }, getSeed(now));\n  const locale = i18n.language;\n\n  const handleSelectPlace = (_, placeOption) => {\n    setPlaceOption(placeOption);\n    setTransitionWeather(null);\n    setTargetWeather(null);\n  };\n\n  const handleSelectTransitionWeather = event => {\n    setTransitionWeather(event.target.value === 'none' ? null : +event.target.value);\n  };\n\n  const handleSelectTargetWeather = event => {\n    setTargetWeather(event.target.value === 'none' ? null : +event.target.value);\n  };\n\n  const handleSelectTimes = timeSlot => {\n    setTimes(_objectSpread(_objectSpread({}, times), {}, {\n      [timeSlot]: !times[timeSlot]\n    }));\n  };\n\n  return /*#__PURE__*/_jsx(Section, {\n    title: t('forecaster'),\n    children: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsx(Autocomplete, {\n          options: PLACE_OPTIONS,\n          groupBy: ({\n            region\n          }) => translatePlace(region, locale),\n          getOptionLabel: ({\n            place,\n            weatherRateIndex\n          }) => translatePlace(place, locale) + (weatherRateIndex > 0 ? ` (alt. ${weatherRateIndex})` : ''),\n          renderInput: params => /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({}, params), {}, {\n            label: t('selectPlace')\n          })),\n          value: placeOption,\n          getOptionSelected: (option, value) => option.place === value.place && option.weatherRateIndex === value.weatherRateIndex,\n          onChange: handleSelectPlace\n        })\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: [/*#__PURE__*/_jsxs(FormControl, {\n          fullWidth: true,\n          className: classes.transitionWeather,\n          children: [/*#__PURE__*/_jsx(InputLabel, {\n            children: t('transitionWeather')\n          }), /*#__PURE__*/_jsxs(Select, {\n            value: transitionWeather || 'none',\n            disabled: !placeOption,\n            onChange: handleSelectTransitionWeather,\n            children: [/*#__PURE__*/_jsx(MenuItem, {\n              value: \"none\",\n              children: t(possibleWeathers ? 'anyWeather' : 'selectPlaceFirst')\n            }), possibleWeathers && possibleWeathers.map(weather => /*#__PURE__*/_jsx(MenuItem, {\n              value: weather,\n              children: translateWeather(weather, locale)\n            }, weather))]\n          })]\n        }), /*#__PURE__*/_jsx(ArrowDownwardIcon, {\n          className: classes.transitionArrow\n        }), /*#__PURE__*/_jsxs(FormControl, {\n          fullWidth: true,\n          children: [/*#__PURE__*/_jsx(InputLabel, {\n            children: t('targetWeather')\n          }), /*#__PURE__*/_jsxs(Select, {\n            value: targetWeather || 'none',\n            disabled: !placeOption,\n            onChange: handleSelectTargetWeather,\n            children: [/*#__PURE__*/_jsx(MenuItem, {\n              value: \"none\",\n              children: t(possibleWeathers ? 'anyWeather' : 'selectPlaceFirst')\n            }), possibleWeathers && possibleWeathers.map(weather => /*#__PURE__*/_jsx(MenuItem, {\n              value: weather,\n              children: translateWeather(weather, locale)\n            }, weather))]\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxs(FormControl, {\n          component: \"fieldset\",\n          children: [/*#__PURE__*/_jsx(FormLabel, {\n            component: \"legend\",\n            children: t('selectTimes')\n          }), /*#__PURE__*/_jsxs(FormGroup, {\n            children: [/*#__PURE__*/_jsx(FormControlLabel, {\n              control: /*#__PURE__*/_jsx(Checkbox, {\n                checked: times[0],\n                onChange: handleSelectTimes.bind(null, 0)\n              }),\n              label: \"00:00\"\n            }), /*#__PURE__*/_jsx(FormControlLabel, {\n              control: /*#__PURE__*/_jsx(Checkbox, {\n                checked: times[8],\n                onChange: handleSelectTimes.bind(null, 8)\n              }),\n              label: \"08:00\"\n            }), /*#__PURE__*/_jsx(FormControlLabel, {\n              control: /*#__PURE__*/_jsx(Checkbox, {\n                checked: times[16],\n                onChange: handleSelectTimes.bind(null, 16)\n              }),\n              label: \"16:00\"\n            })]\n          })]\n        })\n      }), placeOption && !hasTime && /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(Alert, {\n          variant: \"outlined\",\n          severity: \"error\",\n          children: t('noTimeSelected')\n        })\n      }), forecast && /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(NoSsr, {\n          children: /*#__PURE__*/_jsx(ForecasterTable, {\n            now: now,\n            forecast: forecast\n          })\n        })\n      })]\n    })\n  });\n};\n\nexport default Forecaster;","map":null,"metadata":{},"sourceType":"module"}