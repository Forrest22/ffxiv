{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Section from '../Section';\nimport { charaMakeNames } from './ffxiv-name-generator/data';\nimport { getRaces, getClans, getGenders, translate, Race, Clan, Gender } from './ffxiv-name-generator';\nimport { useTranslation } from '../i18n';\nconst CONVENTION_LINKS = {\n  [Race.Hyur]: 'https://forum.square-enix.com/ffxiv/threads/63112-Race-Naming-Conventions?p=1014929&viewfull=1#post1014929',\n  [Race.Elezen]: 'https://forum.square-enix.com/ffxiv/threads/63112-Race-Naming-Conventions?p=1014928&viewfull=1#post1014928',\n  [Race.Lalafell]: 'https://forum.square-enix.com/ffxiv/threads/63112-Race-Naming-Conventions?p=1014931&viewfull=1#post1014931',\n  [Race.Miqote]: 'https://forum.square-enix.com/ffxiv/threads/63112-Race-Naming-Conventions?p=1014930&viewfull=1#post1014930',\n  [Race.Roegadyn]: 'https://forum.square-enix.com/ffxiv/threads/63112-Race-Naming-Conventions?p=1014932&viewfull=1#post1014932',\n  [Race.AuRa]: 'https://forum.square-enix.com/ffxiv/threads/63112-Race-Naming-Conventions?p=3039574&viewfull=1#post3039574',\n  [Race.Hrothgar]: 'https://forum.square-enix.com/ffxiv/threads/398566-Hrothgar-Naming-Conventions?p=5091422&viewfull=1#post5091422',\n  [Race.Viera]: 'https://forum.square-enix.com/ffxiv/threads/398565-Viera-Naming-Conventions?p=5091421&viewfull=1#post5091421'\n};\n\nfunction combinations(...arrays) {\n  return arrays.map(array => array.filter((name, index) => name !== array[index + 1])).reduce((acc, curr) => acc * curr.length, 1);\n}\n\nconst STATISTICS = {\n  [Clan.Midlander]: {\n    [Gender.Male]: combinations(charaMakeNames.hyur_midlander_male, charaMakeNames.hyur_midlander_lastName),\n    [Gender.Female]: combinations(charaMakeNames.hyur_midlander_female, charaMakeNames.hyur_midlander_lastName)\n  },\n  [Clan.Highlander]: {\n    [Gender.Male]: combinations(charaMakeNames.hyur_highlander_male, charaMakeNames.hyur_highlander_lastName),\n    [Gender.Female]: combinations(charaMakeNames.hyur_highlander_female, charaMakeNames.hyur_highlander_lastName)\n  },\n  [Clan.Wildwood]: {\n    [Gender.Male]: combinations(charaMakeNames.elezen_male, charaMakeNames.elezen_wildwood_lastName),\n    [Gender.Female]: combinations(charaMakeNames.elezen_female, charaMakeNames.elezen_wildwood_lastName)\n  },\n  [Clan.Duskwight]: {\n    [Gender.Male]: combinations(charaMakeNames.elezen_male, charaMakeNames.elezen_duskwight_lastName),\n    [Gender.Female]: combinations(charaMakeNames.elezen_female, charaMakeNames.elezen_duskwight_lastName)\n  },\n  [Clan.Plainsfolk]: {\n    [Gender.Male]: combinations(charaMakeNames.lalafell_plainsfolk_firstNameStart, charaMakeNames.lalafell_plainsfolk_endOfNames, charaMakeNames.lalafell_plainsfolk_lastNameStart),\n    [Gender.Female]: combinations(charaMakeNames.lalafell_plainsfolk_firstNameStart, charaMakeNames.lalafell_plainsfolk_endOfNames)\n  },\n  [Clan.Dunesfolk]: {\n    [Gender.Male]: combinations(charaMakeNames.lalafell_dunesfolk_male, charaMakeNames.lalafell_dunesfolk_male_lastName, charaMakeNames.lalafell_dunesfolk_male),\n    [Gender.Female]: combinations(charaMakeNames.lalafell_dunesfolk_female, charaMakeNames.lalafell_dunesfolk_female_lastName)\n  },\n  [Clan.SeekerOfTheSun]: {\n    [Gender.Male]: combinations(charaMakeNames.miqote_seekerOfTheSun_male, charaMakeNames.miqote_seekerOfTheSun_male_lastName),\n    [Gender.Female]: combinations(charaMakeNames.miqote_seekerOfTheSun_female, charaMakeNames.miqote_seekerOfTheSun_female_lastName)\n  },\n  [Clan.KeeperOfTheMoon]: {\n    [Gender.Male]: combinations(charaMakeNames.miqote_keeperOfTheMoon_male, charaMakeNames.miqote_keeperOfTheMoon_lastName),\n    [Gender.Female]: combinations(charaMakeNames.miqote_keeperOfTheMoon_female, charaMakeNames.miqote_keeperOfTheMoon_lastName)\n  },\n  [Clan.SeaWolf]: {\n    [Gender.Male]: combinations(charaMakeNames.roegadyn_seaWolf_male, charaMakeNames.roegadyn_seaWolf_male_lastName),\n    [Gender.Female]: combinations(charaMakeNames.roegadyn_seaWolf_female, charaMakeNames.roegadyn_seaWolf_female_lastName)\n  },\n  [Clan.Hellsguard]: {\n    [Gender.Male]: combinations(charaMakeNames.roegadyn_hellsguard_firstName, charaMakeNames.roegadyn_hellsguard_male_lastName),\n    [Gender.Female]: combinations(charaMakeNames.roegadyn_hellsguard_firstName, charaMakeNames.roegadyn_hellsguard_female_lastName)\n  },\n  [Clan.Raen]: {\n    [Gender.Male]: combinations(charaMakeNames.auRa_raen_male, charaMakeNames.auRa_raen_lastName),\n    [Gender.Female]: combinations(charaMakeNames.auRa_raen_female, charaMakeNames.auRa_raen_lastName)\n  },\n  [Clan.Xaela]: {\n    [Gender.Male]: combinations(charaMakeNames.auRa_xaela_male, charaMakeNames.auRa_xaela_lastName),\n    [Gender.Female]: combinations(charaMakeNames.auRa_xaela_female, charaMakeNames.auRa_xaela_lastName)\n  },\n  [Clan.Helions]: {\n    [Gender.Male]: combinations(charaMakeNames.hrothgar_helions_firstName, charaMakeNames.hrothgar_helions_lastName),\n    [Gender.Female]: 0\n  },\n  [Clan.TheLost]: {\n    [Gender.Male]: combinations(charaMakeNames.hrothgar_theLost_firstName, charaMakeNames.hrothgar_theLost_lastName),\n    [Gender.Female]: 0\n  },\n  [Clan.Rava]: {\n    [Gender.Male]: 0,\n    [Gender.Female]: combinations(charaMakeNames.viera_firstName, charaMakeNames.viera_rava_lastName)\n  },\n  [Clan.Veena]: {\n    [Gender.Male]: 0,\n    [Gender.Female]: combinations(charaMakeNames.viera_firstName, charaMakeNames.viera_veena_lastName)\n  }\n};\nconst useStyles = makeStyles(theme => ({\n  buttons: {\n    textAlign: 'center',\n    marginBottom: theme.spacing(2),\n    '& > *': {\n      margin: theme.spacing(1),\n      textTransform: 'none'\n    }\n  },\n  statsTable: {\n    width: 'initial',\n    margin: theme.spacing(2, 'auto'),\n    '& td': {\n      padding: `${theme.spacing(0.5, 4)} !important`\n    }\n  }\n}));\n\nconst About = () => {\n  const classes = useStyles();\n  const {\n    t,\n    i18n\n  } = useTranslation('name-generator');\n  const locale = i18n.language;\n  return /*#__PURE__*/_jsxs(Section, {\n    title: t('about'),\n    children: [/*#__PURE__*/_jsx(Typography, {\n      paragraph: true,\n      children: \"Naming conventions for the various races can be found here:\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: classes.buttons,\n      children: getRaces().map(race => /*#__PURE__*/_jsx(Button, {\n        variant: \"contained\",\n        href: CONVENTION_LINKS[race],\n        children: /*#__PURE__*/_jsx(Typography, {\n          children: translate('race', race, locale)\n        })\n      }, race))\n    }), /*#__PURE__*/_jsx(TableContainer, {\n      children: /*#__PURE__*/_jsxs(Table, {\n        size: \"small\",\n        className: classes.statsTable,\n        children: [/*#__PURE__*/_jsx(TableHead, {\n          children: /*#__PURE__*/_jsxs(TableRow, {\n            children: [/*#__PURE__*/_jsx(TableCell, {\n              align: \"center\",\n              children: t('race')\n            }), /*#__PURE__*/_jsx(TableCell, {\n              align: \"center\",\n              children: t('clan')\n            }), /*#__PURE__*/_jsx(TableCell, {\n              align: \"center\",\n              children: t('gender')\n            }), /*#__PURE__*/_jsx(TableCell, {\n              align: \"center\",\n              children: t('combinations')\n            })]\n          })\n        }), /*#__PURE__*/_jsx(TableBody, {\n          children: getRaces().map(race => {\n            const rows = [];\n            const clans = getClans(race);\n            const genders = getGenders(race);\n\n            for (let i = 0; i < clans.length; ++i) {\n              for (let j = 0; j < genders.length; ++j) {\n                rows.push( /*#__PURE__*/_jsxs(TableRow, {\n                  children: [i === 0 && j === 0 && /*#__PURE__*/_jsx(TableCell, {\n                    rowSpan: clans.length * genders.length,\n                    align: \"center\",\n                    children: /*#__PURE__*/_jsx(Typography, {\n                      children: translate('race', race, locale)\n                    })\n                  }), j === 0 && /*#__PURE__*/_jsx(TableCell, {\n                    rowSpan: genders.length,\n                    align: \"center\",\n                    children: /*#__PURE__*/_jsx(Typography, {\n                      children: translate('clan', clans[i], locale)\n                    })\n                  }), /*#__PURE__*/_jsx(TableCell, {\n                    align: \"center\",\n                    children: /*#__PURE__*/_jsx(Typography, {\n                      children: translate('gender', genders[j], locale)\n                    })\n                  }), /*#__PURE__*/_jsx(TableCell, {\n                    align: \"right\",\n                    children: /*#__PURE__*/_jsx(Typography, {\n                      children: STATISTICS[clans[i]][genders[j]].toLocaleString(locale)\n                    })\n                  })]\n                }, `${race},${clans[i]},${genders[j]}`));\n              }\n            }\n\n            return rows;\n          })\n        })]\n      })\n    })]\n  });\n};\n\nexport default About;","map":null,"metadata":{},"sourceType":"module"}