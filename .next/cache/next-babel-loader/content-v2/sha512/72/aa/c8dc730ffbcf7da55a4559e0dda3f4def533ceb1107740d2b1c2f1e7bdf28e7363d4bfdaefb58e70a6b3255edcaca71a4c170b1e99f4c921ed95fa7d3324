{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"/root/ffxiv/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/root/ffxiv/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport StopCardsContainer from './StopCardsContainer';\nimport StopCard from './StopCard';\nimport BaitList from './BaitList';\nimport { fishingSpots } from './ffxiv-ocean-fishing/data';\nimport * as maps from './maps';\nimport { getBlueFish, getBaitGroup } from './utils';\nimport { translate } from '../utils';\nimport { useTranslation } from '../i18n';\nvar POINTS_THRESHOLD = 400;\nexport function getPointsFishes(stopTime) {\n  var fishingSpot = maps.STOP_MAP[stopTime[0]];\n  var spectralFishingSpot = fishingSpots[fishingSpot.id + 1];\n  var time = stopTime[1]; // Find all fish that exceed the threshold, while keeping track of the highest value fish(es)\n\n  var highestPointsFishes = [];\n  var thresholdPointsFishes = spectralFishingSpot.fishes.filter(function (fish) {\n    var _fish$spreadsheetData = fish.spreadsheetData,\n        points = _fish$spreadsheetData.points,\n        doubleHook = _fish$spreadsheetData.doubleHook,\n        fishTime = _fish$spreadsheetData.time,\n        intuition = _fish$spreadsheetData.intuition; // Check to see if this fish is catchable\n\n    if (fishTime !== null && !fishTime.includes(time)) {\n      return false; // Ignore blue fish so that the highest non-blue fish will be found\n    } else if (intuition !== null) {\n      return false; // Not enough known data on this fish\n    } else if (points === null || doubleHook === null) {\n      return false; // Check what this fish is worth\n    } else {\n      var maxPoints = (Array.isArray(doubleHook) ? doubleHook[1] : doubleHook) * points;\n\n      if (highestPointsFishes.length === 0) {\n        highestPointsFishes.push({\n          fish: fish,\n          points: maxPoints\n        });\n      } else if (maxPoints === highestPointsFishes[0].points) {\n        highestPointsFishes.push({\n          fish: fish,\n          points: maxPoints\n        });\n      } else if (maxPoints > highestPointsFishes[0].points) {\n        highestPointsFishes = [{\n          fish: fish,\n          points: maxPoints\n        }];\n      }\n\n      return maxPoints >= POINTS_THRESHOLD;\n    }\n  }); // If any fish passed the threshold hold, return all those fish\n\n  if (thresholdPointsFishes.length > 0) {\n    return thresholdPointsFishes; // Otherwise, return whatever the best non-blue fish are\n  } else {\n    return highestPointsFishes.map(function (_ref) {\n      var fish = _ref.fish;\n      return fish;\n    });\n  }\n}\n\nvar RouteInformationPoints = function RouteInformationPoints(_ref2) {\n  var stopTimes = _ref2.stopTimes;\n\n  var _useTranslation = useTranslation('ocean-fishing'),\n      i18n = _useTranslation.i18n;\n\n  var locale = i18n.language;\n  return /*#__PURE__*/_jsx(StopCardsContainer, {\n    children: stopTimes.map(function (stopTime, index) {\n      return /*#__PURE__*/_jsx(StopCard, {\n        index: index,\n        stopTime: stopTime,\n        children: /*#__PURE__*/_jsx(CardContent, {\n          children: /*#__PURE__*/_jsx(BaitList, {\n            baitGroups: [maps.SPECTRAL_FISH_MAP[stopTime[0]], maps.GREEN_FISH_MAP[stopTime[0]]].concat(_toConsumableArray(getPointsFishes(stopTime)), [getBlueFish(stopTime)]).filter(function (fish) {\n              return fish !== null;\n            }).map(function (fish, index) {\n              var _fish$spreadsheetData2 = fish.spreadsheetData,\n                  points = _fish$spreadsheetData2.points,\n                  doubleHook = _fish$spreadsheetData2.doubleHook;\n              var doubleHookString = doubleHook !== null ? Array.isArray(doubleHook) ? doubleHook.join('-') : doubleHook : '?';\n              var pointsString = doubleHook !== null && points !== null ? (Array.isArray(doubleHook) ? doubleHook[1] : doubleHook) * points : '?';\n              return {\n                header: translate(locale, fish, 'name'),\n                baitGroupProps: _objectSpread(_objectSpread({}, getBaitGroup(fish)), {}, {\n                  subtext: index === 0 ? '' : \"DH: \\xD7\".concat(doubleHookString, \" = \").concat(pointsString),\n                  mainOnly: true\n                })\n              };\n            })\n          })\n        })\n      }, stopTime);\n    })\n  });\n};\n\nexport default RouteInformationPoints;","map":null,"metadata":{},"sourceType":"module"}