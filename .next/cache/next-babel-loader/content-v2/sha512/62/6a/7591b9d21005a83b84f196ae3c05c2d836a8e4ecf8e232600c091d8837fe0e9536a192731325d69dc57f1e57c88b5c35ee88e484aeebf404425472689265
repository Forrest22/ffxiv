{"ast":null,"code":"import { format, formatDistanceStrict } from 'date-fns';\nimport { de, fr, ja } from 'date-fns/locale';\nconst DATE_LOCALES = {\n  en: undefined,\n  de,\n  fr,\n  ja\n};\nexport function paddedZero(n) {\n  return n > 9 ? String(n) : '0' + n;\n}\nexport function formatTime(date) {\n  return `${paddedZero(date.getUTCHours())}:${paddedZero(date.getUTCMinutes())}`;\n}\nexport function toTimeString(now, options = {}) {\n  const {\n    padded,\n    locale = 'en'\n  } = options;\n  const timeString = format(now, locale === 'en' ? 'hh:mm a' : 'HH:mm', {\n    locale: DATE_LOCALES[locale]\n  });\n  return timeString.replace(/^0/, padded ? ' ' : '');\n}\nexport function timeUntil(now, then, options = {}) {\n  const {\n    full,\n    locale = 'en'\n  } = options;\n  const diffString = formatDistanceStrict(then, now, {\n    addSuffix: true,\n    locale: DATE_LOCALES[locale]\n  });\n\n  if (full) {\n    switch (locale) {\n      case 'de':\n        return `${diffString} um ${format(then, 'H:mm', {\n          locale: DATE_LOCALES[locale]\n        })}`;\n\n      case 'fr':\n        return `${diffString} à ${format(then, 'H:mm', {\n          locale: DATE_LOCALES[locale]\n        })}`;\n\n      case 'ja':\n        return `${diffString} at ${format(then, 'H:mm', {\n          locale: DATE_LOCALES[locale]\n        })}`;\n\n      default:\n        return `${diffString} at ${format(then, 'h:mm a', {\n          locale: DATE_LOCALES[locale]\n        })}`;\n    }\n  } else {\n    return diffString;\n  }\n}\nexport function translate(locale = 'en', obj, ...keys) {\n  if (!obj) {\n    return `{${JSON.stringify(obj)}}`;\n  }\n\n  for (const key of keys) {\n    const keyLocale = `${key}_${locale}`;\n    if (obj[keyLocale]) return obj[keyLocale];\n  }\n\n  return `{[Object].${keys.join(',')}}`;\n}","map":null,"metadata":{},"sourceType":"module"}