{"ast":null,"code":"import _toConsumableArray from \"/root/ffxiv/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { timeUntil as genericTimeUntil } from '../utils';\nimport { fishingSpots, baits, fishes } from './ffxiv-ocean-fishing/data';\nimport { getStopTimes } from './ffxiv-ocean-fishing';\nimport * as maps from './maps';\n\nfunction memoize(func, getKey) {\n  var cache = {};\n\n  var _func = function _func(arg) {\n    var key = getKey(arg);\n    var cache = _func.cache;\n    return cache[key] !== undefined ? cache[key] : cache[key] = func(arg);\n  };\n\n  _func.cache = cache;\n  return _func;\n}\n\nexport function timeUntil(now, then, options) {\n  var diff = then.getTime() - now.getTime();\n\n  if (diff < -900000) {\n    return options.t('routeInfo.enRoute');\n  } else if (diff < 0) {\n    return options.t('routeInfo.boardingNow');\n  } else {\n    return genericTimeUntil(now, then, options);\n  }\n}\nexport function getBlueFish(stopTime) {\n  var blueFish = maps.BLUE_FISH_MAP[stopTime[0]];\n  var spreadsheetData = blueFish.spreadsheetData;\n\n  if (spreadsheetData.time !== null) {\n    if (spreadsheetData.time.includes(stopTime[1])) {\n      return blueFish;\n    }\n  }\n\n  return null;\n}\nexport function isBaitRequired(fish, bait) {\n  for (var _i = 0, _Object$keys = Object.keys(fish.biteTimes); _i < _Object$keys.length; _i++) {\n    var otherBaitId = _Object$keys[_i];\n\n    if (otherBaitId === 'all' || +otherBaitId === bait.id || +otherBaitId === 29717) {\n      continue;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport var getBaitChain = memoize(function _getBaitChain(fish) {\n  var _fish$spreadsheetData = fish.spreadsheetData,\n      bait = _fish$spreadsheetData.bestBait,\n      mooch = _fish$spreadsheetData.mooch,\n      tug = _fish$spreadsheetData.tug;\n\n  if (bait === null && mooch === null) {\n    return [{\n      bait: baits[29717]\n    }, {\n      fish: fish,\n      tug: tug\n    }]; // Versatile Lure as fallback\n  } else {\n    return bait !== null ? [{\n      bait: bait\n    }, {\n      fish: fish,\n      tug: tug\n    }] : [].concat(_toConsumableArray(_getBaitChain(mooch)), [{\n      fish: fish,\n      tug: tug\n    }]);\n  }\n}, function (fish) {\n  return String(fish.id);\n});\nexport var getBaitGroup = memoize(function (fish) {\n  var intuition = fish.spreadsheetData.intuition;\n  var baitChain = getBaitChain(fish);\n  return {\n    baits: baitChain,\n    baitIsRequired: isBaitRequired(fish, baitChain[0].bait),\n    intuitionFishes: intuition !== null ? intuition.map(function (_ref) {\n      var fish = _ref.fish,\n          count = _ref.count;\n      var baitChain = getBaitChain(fish);\n      return {\n        baits: baitChain,\n        baitIsRequired: isBaitRequired(fish, baitChain[0].bait),\n        count: count\n      };\n    }) : undefined\n  };\n}, function (fish) {\n  return String(fish.id);\n}); // See https://discord.com/channels/327124808217395200/679407580430467092/864238268514041917\n\ngetBaitGroup.cache = {\n  // Stonescale\n  29790: {\n    baits: getBaitChain(fishes[29790]),\n    baitIsRequired: true,\n    intuitionFishes: [{\n      baits: [{\n        bait: baits[2591]\n      }, {\n        fish: fishes[29769],\n        tug: 2\n      }],\n      baitIsRequired: false,\n      count: 1\n    }, {\n      baits: [{\n        bait: baits[29714]\n      }, {\n        fish: fishes[29768],\n        tug: 1\n      }],\n      baitIsRequired: false,\n      count: 1\n    }]\n  },\n  // Hafgufa\n  32074: {\n    baits: getBaitChain(fishes[32074]),\n    baitIsRequired: true,\n    intuitionFishes: [{\n      baits: [{\n        bait: baits[29716]\n      }, {\n        fish: fishes[32070],\n        tug: 3\n      }],\n      baitIsRequired: false,\n      count: 2\n    }, {\n      baits: [{\n        bait: baits[27590]\n      }, {\n        fish: fishes[32067],\n        tug: 2\n      }],\n      baitIsRequired: false,\n      count: 1\n    }]\n  },\n  // Seafaring Toad\n  32094: {\n    baits: getBaitChain(fishes[32094]),\n    baitIsRequired: true,\n    intuitionFishes: [{\n      baits: [{\n        bait: baits[2587]\n      }, {\n        fish: fishes[32089],\n        tug: 2\n      }],\n      baitIsRequired: false,\n      count: 3\n    }]\n  }\n};\n\nif (true) {\n  Object.assign(window, {\n    BaitCache1: getBaitChain.cache,\n    BaitCache2: getBaitGroup.cache\n  });\n}\n\nexport function subtextDH(fish) {\n  var doubleHook = fish.spreadsheetData.doubleHook;\n  return doubleHook !== null ? \"DH: \".concat(Array.isArray(doubleHook) ? doubleHook.join('-') : doubleHook) : 'DH: ?';\n}\nexport function subtextBiteTime(fish) {\n  var biteTimeAll = fish.biteTimes.all;\n  return biteTimeAll !== null ? \"\".concat(biteTimeAll[0] === biteTimeAll[1] ? biteTimeAll[0] : biteTimeAll.join('-'), \"s\") : '?s';\n}\nexport function upperFirst(str) {\n  return str.length === 0 ? '' : str[0].toUpperCase() + str.slice(1);\n}\nexport function cleanObjective(objective) {\n  return objective.replace(/<[^<>]*?\\/>/g, '');\n}\nexport function cleanRequirement(requirement) {\n  return upperFirst(requirement.replace(/^(Requirement:|Bedingung:|Condition :|達成条件：|达成条件：|달성 조건: )/, '').trim());\n}\nexport function isUncaughtRoute(destTime, checklist) {\n  var _iterator = _createForOfIteratorHelper(getStopTimes(destTime)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var stopTime = _step.value;\n      var nonSpectralFishingSpot = maps.STOP_MAP[stopTime[0]];\n\n      var _iterator2 = _createForOfIteratorHelper(nonSpectralFishingSpot.fishes),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var fish = _step2.value;\n\n          if (!checklist.includes(fish.id)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var spectralFishingSpot = fishingSpots[nonSpectralFishingSpot.id + 1];\n\n      var _iterator3 = _createForOfIteratorHelper(spectralFishingSpot.fishes),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _fish = _step3.value;\n\n          if (_fish.spreadsheetData.time !== null && !_fish.spreadsheetData.time.includes(stopTime[1])) {\n            continue;\n          }\n\n          if (!checklist.includes(_fish.id)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"module"}