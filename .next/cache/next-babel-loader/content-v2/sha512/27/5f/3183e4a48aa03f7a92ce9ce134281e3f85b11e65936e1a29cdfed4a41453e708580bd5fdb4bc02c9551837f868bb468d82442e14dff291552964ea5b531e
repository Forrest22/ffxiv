{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Alert from '@material-ui/lab/Alert';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport StainButton from './StainButton';\nimport FruitIcon from './FruitIcon';\nimport FruitsList from './FruitsList';\nimport { calculateFruits, Fruit } from './ffxiv-chocobo-color';\nimport { stains, fruits } from './ffxiv-chocobo-color/data';\nimport translate from '../translate';\nimport { useTranslation } from '../i18n';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    fruitsCount: {\n      display: 'inline-block',\n      width: '2.5em',\n      textAlign: 'right',\n      fontSize: '1.25em',\n      overflow: 'visible'\n    },\n    fruitsIcon: {\n      margin: theme.spacing(0, 1)\n    },\n    arrowForward: {\n      margin: theme.spacing(0, 1),\n      verticalAlign: 'text-bottom'\n    }\n  };\n});\n\nvar Solution = function Solution(_ref) {\n  var solution = _ref.solution;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation('chocobo-color'),\n      t = _useTranslation.t,\n      i18n = _useTranslation.i18n;\n\n  var locale = i18n.language;\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      md: 10,\n      lg: 8,\n      children: /*#__PURE__*/_jsx(Box, {\n        textAlign: \"center\",\n        children: /*#__PURE__*/_jsxs(Typography, {\n          children: [translate(locale, solution.fromStain, 'name'), \" \", /*#__PURE__*/_jsx(StainButton, {\n            inline: true,\n            stain: solution.fromStain\n          }), /*#__PURE__*/_jsx(ArrowForwardIcon, {\n            className: classes.arrowForward\n          }), translate(locale, solution.toStain, 'name'), \" \", /*#__PURE__*/_jsx(StainButton, {\n            inline: true,\n            stain: solution.toStain\n          })]\n        })\n      })\n    }), solution.fruits.length > calculateFruits(stains[36], solution.toStain).fruits.length && /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      md: 10,\n      lg: 8,\n      children: /*#__PURE__*/_jsx(Alert, {\n        severity: \"info\",\n        children: \"You might save fruits by resetting to Desert Yellow with a Han Lemon first.\"\n      })\n    }), /*#__PURE__*/_jsxs(Grid, {\n      item: true,\n      xs: 12,\n      md: 10,\n      lg: 8,\n      children: [/*#__PURE__*/_jsx(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: t('fruitsNeeded')\n      }), solution.fruits.length > 0 ? [Fruit.XelphatolApple, Fruit.MamookPear, Fruit.OGhomoroBerries, Fruit.DomanPlum, Fruit.Valfruit, Fruit.CieldalaesPineapple].map(function (fruit) {\n        return {\n          fruit: fruit,\n          count: solution.fruits.filter(function (solFruit) {\n            return solFruit === fruit;\n          }).length\n        };\n      }).filter(function (_ref2) {\n        var count = _ref2.count;\n        return count > 0;\n      }).map(function (_ref3) {\n        var fruit = _ref3.fruit,\n            count = _ref3.count;\n        return /*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsxs(Typography, {\n            component: \"span\",\n            className: classes.fruitsCount,\n            children: [count, \"\\xD7\"]\n          }), /*#__PURE__*/_jsx(FruitIcon, {\n            fruit: fruit,\n            className: classes.fruitsIcon\n          }), /*#__PURE__*/_jsx(Typography, {\n            component: \"span\",\n            children: translate(locale, fruits[fruit], 'name')\n          })]\n        }, fruit);\n      }) : /*#__PURE__*/_jsx(Typography, {\n        children: t('noFruits')\n      })]\n    }), solution.fruits.length > 0 && /*#__PURE__*/_jsxs(Grid, {\n      item: true,\n      xs: 12,\n      md: 10,\n      lg: 8,\n      children: [/*#__PURE__*/_jsx(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: t('fruitsOrder')\n      }), /*#__PURE__*/_jsx(FruitsList, {\n        fruits: solution.fruits\n      })]\n    })]\n  });\n};\n\nexport default Solution;","map":null,"metadata":{},"sourceType":"module"}