{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Section from '../Section';\nimport Grid from '@material-ui/core/Grid';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport RouteCardContainer from './RouteCardContainer';\nimport RouteCard from './RouteCard';\nimport FishPanel from './FishPanel';\nimport BaitList from './BaitList';\nimport { fishingSpots, placeNames, oceanFishes } from './ocean-fishing/data';\nimport { calculateVoyages, getStops } from './ocean-fishing';\nimport * as maps from './maps';\nimport { timeUntil, getTimeSensitiveFish, getPointsFish, getBlueFish, getBaitGroup, translate, upperFirst } from './utils';\nimport { useTranslation } from '../i18n';\nconst useStyles = makeStyles(theme => ({\n  headerSub: {\n    marginLeft: theme.spacing(2),\n    [theme.breakpoints.down('md')]: {\n      marginLeft: 0,\n      display: 'block'\n    }\n  },\n  headerTime: {\n    position: 'relative',\n    top: '-0.2em',\n    marginLeft: '0.25em'\n  },\n  fishFilterSelect: {\n    display: 'block',\n    [theme.breakpoints.up('md')]: {\n      textAlign: 'right'\n    }\n  }\n}));\nvar FishFilter;\n\n(function (FishFilter) {\n  FishFilter[FishFilter[\"Intuition\"] = 0] = \"Intuition\";\n  FishFilter[FishFilter[\"TimeSensitive\"] = 1] = \"TimeSensitive\";\n  FishFilter[FishFilter[\"Points\"] = 2] = \"Points\";\n  FishFilter[FishFilter[\"All\"] = 3] = \"All\";\n})(FishFilter || (FishFilter = {}));\n\nconst RouteInformation = ({\n  now,\n  selectedRoute\n}) => {\n  const classes = useStyles();\n  const {\n    t,\n    i18n\n  } = useTranslation('ocean-fishing');\n  const {\n    0: fishFilter,\n    1: setFishFilter\n  } = useState(FishFilter.Intuition);\n  const {\n    0: tab,\n    1: setTab\n  } = useState(0);\n  const stops = getStops(selectedRoute);\n  const next = calculateVoyages(now, 1, [selectedRoute])[0].time;\n  const locale = i18n.language;\n  useEffect(() => {\n    setTab(0);\n  }, [selectedRoute]);\n\n  const handleSelectFishFilter = event => {\n    setFishFilter(event.target.value);\n  };\n\n  const handleChangeTab = (_, value) => {\n    setTab(value);\n  };\n\n  return /*#__PURE__*/_jsx(Section, {\n    title: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      alignItems: \"flex-end\",\n      children: [/*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        md: 8,\n        children: [upperFirst(translate(locale, placeNames[fishingSpots[maps.STOP_MAP[selectedRoute[0]]].placeName_sub], 'name_noArticle', 'name')), /*#__PURE__*/_jsx(\"span\", {\n          className: classes.headerTime,\n          children: maps.TIME_MAP[selectedRoute[1]]\n        }), /*#__PURE__*/_jsx(Typography, {\n          display: \"inline\",\n          className: classes.headerSub,\n          children: timeUntil(now, next, {\n            t,\n            full: true,\n            locale: locale\n          })\n        })]\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: classes.fishFilterSelect,\n          children: /*#__PURE__*/_jsxs(Select, {\n            value: fishFilter,\n            onChange: handleSelectFishFilter,\n            children: [/*#__PURE__*/_jsx(MenuItem, {\n              value: FishFilter.Intuition,\n              children: t('showIntuitionFish')\n            }), /*#__PURE__*/_jsx(MenuItem, {\n              value: FishFilter.TimeSensitive,\n              children: t('showTimeFish')\n            }), /*#__PURE__*/_jsx(MenuItem, {\n              value: FishFilter.Points,\n              children: t('showPointsFish')\n            }), /*#__PURE__*/_jsx(MenuItem, {\n              value: FishFilter.All,\n              children: t('showAllFish')\n            })]\n          })\n        })\n      })]\n    }),\n    children: (() => {\n      switch (fishFilter) {\n        case FishFilter.Intuition:\n          return /*#__PURE__*/_jsx(RouteCardContainer, {\n            children: stops.map((stop, index) => /*#__PURE__*/_jsx(RouteCard, {\n              index: index,\n              stop: stop,\n              children: /*#__PURE__*/_jsx(CardContent, {\n                children: /*#__PURE__*/_jsx(BaitList, {\n                  baitGroups: [maps.SPECTRAL_FISH_MAP[stop[0]], maps.GREEN_FISH_MAP[stop[0]], getBlueFish(selectedRoute)[index]].filter(x => x).map(fishId => ({\n                    header: translate(locale, oceanFishes[fishId], 'name'),\n                    baitGroupProps: getBaitGroup(fishId)\n                  }))\n                })\n              })\n            }, stop))\n          });\n\n        case FishFilter.TimeSensitive:\n          return /*#__PURE__*/_jsx(RouteCardContainer, {\n            children: stops.map((stop, index) => /*#__PURE__*/_jsx(RouteCard, {\n              index: index,\n              stop: stop,\n              children: /*#__PURE__*/_jsx(CardContent, {\n                children: /*#__PURE__*/_jsx(BaitList, {\n                  baitGroups: [maps.SPECTRAL_FISH_MAP[stop[0]], ...getTimeSensitiveFish(selectedRoute)[index]].filter(x => x).map(fishId => ({\n                    header: translate(locale, oceanFishes[fishId], 'name'),\n                    baitGroupProps: getBaitGroup(fishId)\n                  }))\n                })\n              })\n            }, stop))\n          });\n\n        case FishFilter.Points:\n          return /*#__PURE__*/_jsx(RouteCardContainer, {\n            children: stops.map((stop, index) => /*#__PURE__*/_jsx(RouteCard, {\n              index: index,\n              stop: stop,\n              children: /*#__PURE__*/_jsx(CardContent, {\n                children: /*#__PURE__*/_jsx(BaitList, {\n                  baitGroups: [maps.SPECTRAL_FISH_MAP[stop[0]], maps.GREEN_FISH_MAP[stop[0]], ...getPointsFish(selectedRoute)[index], getBlueFish(selectedRoute)[index]].filter(x => x).map((fishId, index) => {\n                    const spreadsheetData = oceanFishes[fishId].spreadsheetData;\n                    return {\n                      header: translate(locale, oceanFishes[fishId], 'name'),\n                      baitGroupProps: _objectSpread(_objectSpread({}, getBaitGroup(fishId)), {}, {\n                        subtext: index === 0 ? '' : `DH: Ã—${Array.isArray(spreadsheetData.doubleHook) ? spreadsheetData.doubleHook.join('-') : spreadsheetData.doubleHook}` + ` = ${(Array.isArray(spreadsheetData.doubleHook) ? spreadsheetData.doubleHook[1] : spreadsheetData.doubleHook) * spreadsheetData.points}`,\n                        mainOnly: true\n                      })\n                    };\n                  })\n                })\n              })\n            }, stop))\n          });\n\n        case FishFilter.All:\n          return /*#__PURE__*/_jsxs(Card, {\n            variant: \"outlined\",\n            children: [/*#__PURE__*/_jsx(Tabs, {\n              variant: \"fullWidth\",\n              value: tab,\n              onChange: handleChangeTab,\n              children: stops.map((stop, index) => /*#__PURE__*/_jsx(Tab, {\n                label: /*#__PURE__*/_jsxs(_Fragment, {\n                  children: [index + 1, \". \", translate(locale, placeNames[fishingSpots[maps.STOP_MAP[stop[0]]].placeName_sub], 'name'), \" \", maps.TIME_MAP[stop[1]]]\n                })\n              }, stop))\n            }), stops.map((stop, index) => /*#__PURE__*/_jsx(FishPanel, {\n              tab: tab,\n              index: index,\n              stop: stop\n            }, stop))]\n          });\n      }\n    })()\n  });\n};\n\nexport default RouteInformation;","map":null,"metadata":{},"sourceType":"module"}