{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction choose2(arr) {\n  if (arr.length === 2) {\n    return [arr[0] + arr[1]];\n  }\n\n  var slice = arr.slice(1);\n  return slice.map(function (x) {\n    return x + arr[0];\n  }).concat(choose2(slice));\n}\n\nfunction calculateHighOrLow(tb1, tb2, me) {\n  var hiddenCards = [1, 2, 3, 4, 5, 6, 7, 8, 9].filter(function (card) {\n    return card !== tb1 && card !== tb2 && card !== me;\n  });\n  var tbPossibles = hiddenCards.map(function (card) {\n    return tb1 + tb2 + card;\n  });\n  var mePossibles = choose2(hiddenCards).map(function (sum) {\n    return me + sum;\n  });\n  var high = 0;\n  var low = 0;\n  var both = 0;\n\n  var _iterator = _createForOfIteratorHelper(mePossibles),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _me = _step.value;\n\n      var _iterator2 = _createForOfIteratorHelper(tbPossibles),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var tb = _step2.value;\n          _me > tb ? ++high : _me < tb ? ++low : ++both;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    high: high,\n    low: low,\n    both: both\n  };\n}\n\nexport default calculateHighOrLow;","map":null,"metadata":{},"sourceType":"module"}