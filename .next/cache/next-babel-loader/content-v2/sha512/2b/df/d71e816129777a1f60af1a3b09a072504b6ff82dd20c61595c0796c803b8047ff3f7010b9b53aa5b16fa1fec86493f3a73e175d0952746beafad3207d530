{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { translate } from './weather';\nimport Section from '../Section';\nimport Typography from '@material-ui/core/Typography';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport UpcomingWeatherTable from './UpcomingWeatherTable';\nimport { Region } from './weather/consts';\nimport PARTITION from './weather/regions-partition';\nimport { useTranslation } from '../i18n';\nconst REGIONS = [Region.LaNoscea, Region.TheBlackShroud, Region.Thanalan, Region.IshgardAndSurroundingAreas, Region.GyrAbania, Region.TheFarEast, Region.Norvrandt, Region.Others];\nconst useStyles = makeStyles(theme => ({\n  options: {\n    marginBottom: theme.spacing(2)\n  }\n}));\n\nconst UpcomingWeather = ({\n  now\n}) => {\n  const classes = useStyles();\n  const {\n    t,\n    i18n\n  } = useTranslation('skywatcher');\n  const router = useRouter();\n  const {\n    0: filter,\n    1: setFilter\n  } = useState(null);\n  const {\n    0: showLabels,\n    1: setShowLabels\n  } = useState(true);\n  const {\n    0: showLocalTime,\n    1: setShowLocalTime\n  } = useState(false);\n  const {\n    0: showWeatherChance,\n    1: setShowWeatherChance\n  } = useState(false);\n  const locale = i18n.language;\n  useEffect(() => {\n    const queryFilter = String(router.query.filter);\n    setFilter(Object.values(Region).includes(queryFilter) ? queryFilter : null);\n  }, [router.query.filter]);\n\n  const handleSelectFilter = event => {\n    const filter = event.target.value === 'none' ? null : event.target.value;\n    router.push({\n      pathname: router.pathname,\n      query: filter && {\n        filter\n      }\n    });\n  };\n\n  const handleToggleLabels = () => {\n    setShowLabels(!showLabels);\n  };\n\n  const handleToggleLocalTime = () => {\n    setShowLocalTime(!showLocalTime);\n  };\n\n  const handleToggleWeatherChance = () => {\n    setShowWeatherChance(!showWeatherChance);\n  };\n\n  return /*#__PURE__*/_jsxs(Section, {\n    title: t('upcomingWeather'),\n    children: [/*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 1,\n      className: classes.options,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxs(FormControl, {\n          variant: \"filled\",\n          fullWidth: true,\n          margin: \"dense\",\n          children: [/*#__PURE__*/_jsx(InputLabel, {\n            children: t('selectRegion')\n          }), /*#__PURE__*/_jsxs(Select, {\n            onChange: handleSelectFilter,\n            value: filter || 'none',\n            children: [/*#__PURE__*/_jsx(MenuItem, {\n              value: \"none\",\n              children: t('showAllRegions')\n            }), REGIONS.map(region => /*#__PURE__*/_jsx(MenuItem, {\n              value: region,\n              children: translate('region', region, locale)\n            }, region))]\n          })]\n        })\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsx(FormControlLabel, {\n          control: /*#__PURE__*/_jsx(Checkbox, {\n            checked: showLabels,\n            onChange: handleToggleLabels,\n            color: \"primary\"\n          }),\n          label: t('showLabels')\n        }), /*#__PURE__*/_jsx(FormControlLabel, {\n          control: /*#__PURE__*/_jsx(Checkbox, {\n            checked: showLocalTime,\n            onChange: handleToggleLocalTime,\n            color: \"primary\"\n          }),\n          label: t('showLocalTimes')\n        }), /*#__PURE__*/_jsx(FormControlLabel, {\n          control: /*#__PURE__*/_jsx(Checkbox, {\n            checked: showWeatherChance,\n            onChange: handleToggleWeatherChance,\n            color: \"primary\"\n          }),\n          label: /*#__PURE__*/_jsxs(_Fragment, {\n            children: [\"Show \", /*#__PURE__*/_jsx(\"code\", {\n              children: \"weatherChance\"\n            })]\n          })\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(NoSsr, {\n      children: (() => {\n        if (!now) return null;\n        const sections = (filter ? [filter] : REGIONS).map(region => ({\n          region,\n          zones: PARTITION[region]\n        }));\n        return sections.map(({\n          region,\n          zones\n        }) => /*#__PURE__*/_jsxs(Section, {\n          children: [/*#__PURE__*/_jsx(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: translate('region', region, locale)\n          }), /*#__PURE__*/_jsx(UpcomingWeatherTable, {\n            now: now,\n            zones: zones,\n            showLabels: showLabels,\n            showLocalTime: showLocalTime,\n            showWeatherChance: showWeatherChance\n          })]\n        }, region));\n      })()\n    })]\n  });\n};\n\nexport default UpcomingWeather;","map":null,"metadata":{},"sourceType":"module"}