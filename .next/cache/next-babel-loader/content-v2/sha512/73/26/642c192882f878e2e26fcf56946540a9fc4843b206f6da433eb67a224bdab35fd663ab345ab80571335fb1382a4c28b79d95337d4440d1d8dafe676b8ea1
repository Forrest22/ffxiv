{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { LINES, validateGrid, getSuggestion } from './calculate-mini-cactpot';\nimport Section from '../Section';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Button from '@material-ui/core/Button';\nimport CalculatorCell from './CalculatorCell';\nimport CalculatorLineIndicator from './CalculatorLineIndicator';\nimport { useTranslation } from '../i18n';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    gridShrink: _defineProperty({\n      textAlign: 'center'\n    }, theme.breakpoints.up('md'), {\n      flex: '0 0 auto'\n    }),\n    gridGrow: _defineProperty({}, theme.breakpoints.up('md'), {\n      flex: '1 1 0px'\n    }),\n    cellsContainer: {\n      display: 'inline-block',\n      border: theme.palette.type === 'dark' ? '1px solid gray' : '1px solid black',\n      whiteSpace: 'nowrap'\n    },\n    suggestion: _defineProperty({}, theme.breakpoints.up('md'), {\n      paddingTop: theme.spacing(8)\n    })\n  };\n});\n\nvar Calculator = function Calculator() {\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation('mini-cactpot'),\n      t = _useTranslation.t;\n\n  var _useState = useState(Array(9).fill(null)),\n      grid = _useState[0],\n      setGrid = _useState[1];\n\n  var handleInputDigit = function handleInputDigit(cellIndex, digit) {\n    var newGrid = grid.slice();\n    newGrid[cellIndex] = digit;\n    setGrid(newGrid);\n  };\n\n  var handleClickReset = function handleClickReset() {\n    setGrid(Array(9).fill(null));\n  };\n\n  var errorCells = {};\n  var suggestedCells = {};\n  var error = validateGrid(grid);\n  var suggestion;\n\n  if (error) {\n    switch (error.type) {\n      case 'TOO MANY':\n      case 'DUPLICATES':\n        var _iterator = _createForOfIteratorHelper(error.cells),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var cellIndex = _step.value;\n            errorCells[cellIndex] = true;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        break;\n    }\n  } else {\n    suggestion = getSuggestion(grid);\n\n    switch (suggestion.type) {\n      case 'CELL':\n        var _iterator2 = _createForOfIteratorHelper(suggestion.maxCellLocations),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _cellIndex = _step2.value;\n            suggestedCells[_cellIndex] = true;\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        break;\n\n      case 'LINE':\n        var _iterator3 = _createForOfIteratorHelper(suggestion.maxLineIds),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var lineId = _step3.value;\n\n            var _iterator4 = _createForOfIteratorHelper(LINES[lineId]),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var _cellIndex2 = _step4.value;\n                suggestedCells[_cellIndex2] = true;\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n    }\n  }\n\n  function isLineSuggested(lineId) {\n    return suggestion && suggestion.type === 'LINE' && suggestion.maxLineIds.includes(lineId);\n  }\n\n  return /*#__PURE__*/_jsx(Section, {\n    children: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 4,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.gridShrink,\n        children: /*#__PURE__*/_jsx(TableContainer, {\n          children: /*#__PURE__*/_jsx(\"table\", {\n            children: /*#__PURE__*/_jsxs(\"tbody\", {\n              children: [/*#__PURE__*/_jsxs(\"tr\", {\n                children: [/*#__PURE__*/_jsx(\"td\", {\n                  children: /*#__PURE__*/_jsx(CalculatorLineIndicator, {\n                    rotate: 45,\n                    suggested: isLineSuggested(3)\n                  })\n                }), /*#__PURE__*/_jsx(\"td\", {\n                  children: /*#__PURE__*/_jsx(CalculatorLineIndicator, {\n                    rotate: 90,\n                    suggested: isLineSuggested(4)\n                  })\n                }), /*#__PURE__*/_jsx(\"td\", {\n                  children: /*#__PURE__*/_jsx(CalculatorLineIndicator, {\n                    rotate: 90,\n                    suggested: isLineSuggested(5)\n                  })\n                }), /*#__PURE__*/_jsx(\"td\", {\n                  children: /*#__PURE__*/_jsx(CalculatorLineIndicator, {\n                    rotate: 90,\n                    suggested: isLineSuggested(6)\n                  })\n                }), /*#__PURE__*/_jsx(\"td\", {\n                  children: /*#__PURE__*/_jsx(CalculatorLineIndicator, {\n                    rotate: 135,\n                    suggested: isLineSuggested(7)\n                  })\n                })]\n              }), /*#__PURE__*/_jsxs(\"tr\", {\n                children: [/*#__PURE__*/_jsx(\"td\", {\n                  children: /*#__PURE__*/_jsx(CalculatorLineIndicator, {\n                    rotate: 0,\n                    suggested: isLineSuggested(2)\n                  })\n                }), /*#__PURE__*/_jsx(\"td\", {\n                  rowSpan: 3,\n                  colSpan: 3,\n                  children: /*#__PURE__*/_jsxs(\"div\", {\n                    className: classes.cellsContainer,\n                    children: [/*#__PURE__*/_jsx(CalculatorCell, {\n                      value: grid[0],\n                      suggested: suggestedCells[0],\n                      error: errorCells[0],\n                      onInputDigit: handleInputDigit.bind(null, 0)\n                    }), /*#__PURE__*/_jsx(CalculatorCell, {\n                      value: grid[1],\n                      suggested: suggestedCells[1],\n                      error: errorCells[1],\n                      onInputDigit: handleInputDigit.bind(null, 1)\n                    }), /*#__PURE__*/_jsx(CalculatorCell, {\n                      value: grid[2],\n                      suggested: suggestedCells[2],\n                      error: errorCells[2],\n                      onInputDigit: handleInputDigit.bind(null, 2)\n                    }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(CalculatorCell, {\n                      value: grid[3],\n                      suggested: suggestedCells[3],\n                      error: errorCells[3],\n                      onInputDigit: handleInputDigit.bind(null, 3)\n                    }), /*#__PURE__*/_jsx(CalculatorCell, {\n                      value: grid[4],\n                      suggested: suggestedCells[4],\n                      error: errorCells[4],\n                      onInputDigit: handleInputDigit.bind(null, 4)\n                    }), /*#__PURE__*/_jsx(CalculatorCell, {\n                      value: grid[5],\n                      suggested: suggestedCells[5],\n                      error: errorCells[5],\n                      onInputDigit: handleInputDigit.bind(null, 5)\n                    }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(CalculatorCell, {\n                      value: grid[6],\n                      suggested: suggestedCells[6],\n                      error: errorCells[6],\n                      onInputDigit: handleInputDigit.bind(null, 6)\n                    }), /*#__PURE__*/_jsx(CalculatorCell, {\n                      value: grid[7],\n                      suggested: suggestedCells[7],\n                      error: errorCells[7],\n                      onInputDigit: handleInputDigit.bind(null, 7)\n                    }), /*#__PURE__*/_jsx(CalculatorCell, {\n                      value: grid[8],\n                      suggested: suggestedCells[8],\n                      error: errorCells[8],\n                      onInputDigit: handleInputDigit.bind(null, 8)\n                    })]\n                  })\n                })]\n              }), /*#__PURE__*/_jsx(\"tr\", {\n                children: /*#__PURE__*/_jsx(\"td\", {\n                  children: /*#__PURE__*/_jsx(CalculatorLineIndicator, {\n                    rotate: 0,\n                    suggested: isLineSuggested(1)\n                  })\n                })\n              }), /*#__PURE__*/_jsx(\"tr\", {\n                children: /*#__PURE__*/_jsx(\"td\", {\n                  children: /*#__PURE__*/_jsx(CalculatorLineIndicator, {\n                    rotate: 0,\n                    suggested: isLineSuggested(0)\n                  })\n                })\n              })]\n            })\n          })\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.gridGrow,\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: classes.suggestion,\n          children: [function () {\n            if (error) {\n              switch (error.type) {\n                case 'EMPTY':\n                  return /*#__PURE__*/_jsx(Typography, {\n                    paragraph: true,\n                    children: t('state.selectFirstCell')\n                  });\n\n                case 'TOO MANY':\n                  return /*#__PURE__*/_jsx(Typography, {\n                    paragraph: true,\n                    children: t('state.tooManyDigits')\n                  });\n\n                case 'DUPLICATES':\n                  return /*#__PURE__*/_jsx(Typography, {\n                    paragraph: true,\n                    children: t('state.duplicateDigits')\n                  });\n              }\n            } else {\n              switch (suggestion.type) {\n                case 'CELL':\n                  return /*#__PURE__*/_jsxs(_Fragment, {\n                    children: [/*#__PURE__*/_jsx(Typography, {\n                      children: t('expectedValue', {\n                        ev: Math.floor(suggestion.maxCellEV)\n                      })\n                    }), /*#__PURE__*/_jsx(Typography, {\n                      paragraph: true,\n                      children: t('state.selectHighlightedCell')\n                    })]\n                  });\n\n                case 'LINE':\n                  return /*#__PURE__*/_jsxs(_Fragment, {\n                    children: [/*#__PURE__*/_jsx(Typography, {\n                      children: t('expectedValue', {\n                        ev: Math.floor(suggestion.maxLineEV)\n                      })\n                    }), /*#__PURE__*/_jsx(Typography, {\n                      paragraph: true,\n                      children: t('state.selectHighlightedLine')\n                    })]\n                  });\n              }\n            }\n          }(), /*#__PURE__*/_jsx(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: handleClickReset,\n            children: t('reset')\n          })]\n        })\n      })]\n    })\n  });\n};\n\nexport default Calculator;","map":null,"metadata":{},"sourceType":"module"}