{"ast":null,"code":"var __jsx = React.createElement;\n\n/* global MathJax */\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport AirbnbPropTypes from 'airbnb-prop-types';\nimport Highlight from './Highlight';\nvar setImmediatePolyfill = typeof setImmediate !== 'undefined' ? setImmediate : function (action) {\n  return setTimeout(action, 1);\n};\nvar calledRender = false;\n\nfunction queueRenderMath() {\n  if (typeof MathJax !== 'undefined' && !calledRender) {\n    MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\n    calledRender = true;\n    setImmediatePolyfill(function () {\n      calledRender = false;\n    });\n  }\n}\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    noMathJaxBlock: {\n      marginBottom: theme.spacing(2)\n    },\n    noMathJaxInline: {\n      fontFamily: 'monospace',\n      whiteSpace: 'normal',\n      wordWrap: 'break-word'\n    },\n    mathJaxBlock: {\n      fontSize: '1.125em'\n    },\n    mathJaxInline: {}\n  };\n}); // TODO: SSR still not happy\n\nexport default function MathJaxComponent(props) {\n  var $ = props.$,\n      $$ = props.$$;\n\n  var _useState = useState(false),\n      isMounted = _useState[0],\n      setIsMounted = _useState[1];\n\n  var classes = useStyles();\n  useEffect(function () {\n    isMounted && queueRenderMath();\n  }, [isMounted, $, $$]);\n  useEffect(function () {\n    setIsMounted(true);\n  }, []);\n  return !isMounted || typeof MathJax === 'undefined' ? $$ ? __jsx(Highlight, {\n    language: \"latex\",\n    className: classes.noMathJaxBlock\n  }, \"\\\\[\".concat($$, \"\\\\]\")) : __jsx(\"span\", {\n    className: classes.noMathJaxInline\n  }, \"\\\\(\".concat($, \"\\\\)\")) : $$ ? __jsx(\"div\", {\n    className: classes.mathJaxBlock\n  }, \"\\\\[\".concat($$, \"\\\\]\")) : __jsx(\"span\", {\n    className: classes.mathJaxInline\n  }, \"\\\\(\".concat($, \"\\\\)\"));\n}\nvar exclusivePropTypes = {\n  $: PropTypes.string,\n  $$: PropTypes.string\n};\nvar exclusiveProps = Object.keys(exclusivePropTypes);","map":null,"metadata":{},"sourceType":"module"}