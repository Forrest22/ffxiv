{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport Page from '../src/Page';\nimport Section from '../src/Section';\nimport generateHyur from '../src/name-generator/generate-hyur';\nimport generateElezen from '../src/name-generator/generate-elezen';\nimport generateLalafell from '../src/name-generator/generate-lalafell';\nimport generateMiqote from '../src/name-generator/generate-miqote';\nimport generateRoegadyn from '../src/name-generator/generate-roegadyn';\nimport { randomElement, translate } from '../src/name-generator/utils';\nimport { Race, Clan, Gender } from '../src/name-generator/types';\nimport i18n from '../src/i18n';\nconst RACES = [Race.Hyur, Race.Elezen, Race.Lalafell, Race.Miqote, Race.Roegadyn];\nconst CLANS = {\n  [Race.Hyur]: [Clan.Midlander, Clan.Highlander],\n  [Race.Elezen]: [Clan.Wildwood, Clan.Duskwight],\n  [Race.Lalafell]: [Clan.Plainsfolk, Clan.Dunesfolk],\n  [Race.Miqote]: [Clan.SeekersOfTheSun, Clan.KeepersOfTheMoon],\n  [Race.Roegadyn]: [Clan.SeaWolves, Clan.Hellsguard]\n};\nconst GENDERS = [Gender.Male, Gender.Female];\nconst GENERATORS = {\n  [Race.Hyur]: generateHyur,\n  [Race.Elezen]: generateElezen,\n  [Race.Lalafell]: generateLalafell,\n  [Race.Miqote]: generateMiqote,\n  [Race.Roegadyn]: generateRoegadyn\n};\nconst useStyles = makeStyles(theme => ({\n  results: {\n    padding: theme.spacing(4, 2),\n    fontSize: '1.75em',\n    '& > span': {\n      display: 'block',\n      margin: theme.spacing(1),\n      textAlign: 'center',\n      whiteSpace: 'nowrap'\n    }\n  }\n}));\n\nconst NameGenerator = ({\n  t,\n  i18n\n}) => {\n  const classes = useStyles();\n  const {\n    0: race,\n    1: setRace\n  } = useState(null);\n  const {\n    0: clan,\n    1: setClan\n  } = useState(null);\n  const {\n    0: gender,\n    1: setGender\n  } = useState(null);\n  const {\n    0: results,\n    1: setResults\n  } = useState(null);\n  const locale = i18n.language;\n\n  const handleSelectRace = event => {\n    const race = event.target.value;\n    setRace(race === 'none' ? null : race);\n    setClan(null);\n  };\n\n  const handleSelectClan = event => {\n    const clan = event.target.value;\n    setClan(clan === 'none' ? null : clan);\n  };\n\n  const handleSelectGender = event => {\n    const gender = event.target.value;\n    setGender(gender === 'none' ? null : gender);\n  };\n\n  const handleClickGenerate = () => {\n    const newResults = [];\n\n    for (let i = 0; i < 10; ++i) {\n      const genRace = race || randomElement(RACES);\n      const genClan = clan || randomElement(CLANS[genRace]);\n      const genGender = gender || randomElement(GENDERS);\n      newResults.push(GENERATORS[genRace](genClan, genGender));\n    }\n\n    setResults(newResults);\n  };\n\n  return /*#__PURE__*/_jsx(Page, {\n    title: t('name-generator'),\n    children: /*#__PURE__*/_jsxs(Section, {\n      children: [/*#__PURE__*/_jsxs(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          md: 3,\n          children: /*#__PURE__*/_jsxs(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsx(InputLabel, {\n              children: t('race')\n            }), /*#__PURE__*/_jsxs(Select, {\n              value: race || 'none',\n              onChange: handleSelectRace,\n              children: [/*#__PURE__*/_jsx(MenuItem, {\n                value: \"none\",\n                children: t('any-race')\n              }), RACES.map(race => /*#__PURE__*/_jsx(MenuItem, {\n                value: race,\n                children: translate('race', race, locale)\n              }, race))]\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          md: 3,\n          children: /*#__PURE__*/_jsxs(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsx(InputLabel, {\n              children: t('clan')\n            }), /*#__PURE__*/_jsxs(Select, {\n              value: clan || 'none',\n              onChange: handleSelectClan,\n              children: [/*#__PURE__*/_jsx(MenuItem, {\n                value: \"none\",\n                children: t('any-clan')\n              }), race && CLANS[race].map(clan => /*#__PURE__*/_jsx(MenuItem, {\n                value: clan,\n                children: translate('clan', clan, locale)\n              }, clan))]\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          md: 3,\n          children: /*#__PURE__*/_jsxs(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsx(InputLabel, {\n              children: t('gender')\n            }), /*#__PURE__*/_jsxs(Select, {\n              value: gender || 'none',\n              onChange: handleSelectGender,\n              children: [/*#__PURE__*/_jsx(MenuItem, {\n                value: \"none\",\n                children: t('any-gender')\n              }), GENDERS.map(gender => /*#__PURE__*/_jsx(MenuItem, {\n                value: gender,\n                children: translate('gender', gender, locale)\n              }, gender))]\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          md: 3,\n          children: /*#__PURE__*/_jsx(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            fullWidth: true,\n            onClick: handleClickGenerate,\n            children: \"Generate\"\n          })\n        })]\n      }), results && /*#__PURE__*/_jsx(\"div\", {\n        className: classes.results,\n        children: results.map((result, index) => /*#__PURE__*/_jsx(\"span\", {\n          children: result\n        }, index))\n      })]\n    })\n  });\n};\n\nNameGenerator.getInitialProps = async () => ({\n  namespacesRequired: ['common', 'name-generator']\n});\n\nexport default i18n.withTranslation('name-generator')(NameGenerator);","map":null,"metadata":{},"sourceType":"module"}