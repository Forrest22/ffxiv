{"ast":null,"code":"import _toConsumableArray from \"/root/ffxiv/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { timeUntil as genericTimeUntil } from '../utils';\nimport { fishingSpots, fishes } from './gists/data';\nimport * as maps from './maps';\n\nfunction memoize(func) {\n  var cache = {};\n  return function (arg) {\n    var key = String(arg);\n    return cache[key] !== undefined ? cache[key] : cache[key] = func(arg);\n  };\n}\n\nexport function timeUntil(now, then, options) {\n  var diff = then.getTime() - now.getTime();\n\n  if (diff < -900000) {\n    return options.t('en-route');\n  } else if (diff < 0) {\n    return options.t('boarding-now');\n  } else {\n    return genericTimeUntil(now, then, {\n      full: options.full,\n      locale: options.locale\n    });\n  }\n}\nexport function getStops(destinationCode) {\n  var stops = maps.STOPS_SEQUENCE[destinationCode[0]];\n  var times = maps.TIMES_SEQUENCE[destinationCode[1]];\n  return [stops[0] + times[0], stops[1] + times[1], stops[2] + times[2]];\n}\nexport function getTimeSensitiveFish(destinationCode) {\n  var stopTimes = getStops(destinationCode);\n  return stopTimes.map(function (destinationStopTime, index) {\n    var fishingSpotId = maps.STOP_MAP[destinationStopTime[0]];\n    var time = stopTimes[index][1];\n    return fishingSpots[fishingSpotId + 1].fishes.filter(function (fishId) {\n      var fishInfo = fishes[fishId].spreadsheet_data;\n      return fishInfo.time && fishInfo.time !== 'DSN' && fishInfo.time.indexOf(time) > -1;\n    });\n  });\n}\nexport function getPointsFish(destinationCode) {\n  var stopTimes = getStops(destinationCode);\n  return stopTimes.map(function (destinationStopTime, index) {\n    var fishingSpotId = maps.STOP_MAP[destinationStopTime[0]];\n    var time = stopTimes[index][1];\n    var highestPointsFish = [];\n    var pointsFish = fishingSpots[fishingSpotId + 1].fishes.filter(function (fishId) {\n      var fishInfo = fishes[fishId].spreadsheet_data;\n\n      if (fishInfo.time && fishInfo.time.indexOf(time) === -1) {\n        return false;\n      } else if (fishInfo.intuition) {\n        return false;\n      } else if (!fishInfo.points || !fishInfo.double_hook) {\n        return false;\n      } else {\n        var points = (Array.isArray(fishInfo.double_hook) ? fishInfo.double_hook[1] : fishInfo.double_hook) * fishInfo.points;\n\n        if (highestPointsFish.length === 0) {\n          highestPointsFish.push({\n            fishId: fishId,\n            points: points\n          });\n        } else if (points === highestPointsFish[0].points) {\n          highestPointsFish.push({\n            fishId: fishId,\n            points: points\n          });\n        } else if (points > highestPointsFish[0].points) {\n          highestPointsFish = [{\n            fishId: fishId,\n            points: points\n          }];\n        }\n\n        return points >= 400;\n      }\n    });\n    return pointsFish.length > 0 ? pointsFish : highestPointsFish.map(function (_ref) {\n      var fishId = _ref.fishId;\n      return fishId;\n    });\n  });\n}\nexport function getBlueFish(destinationCode) {\n  var stopTimes = getStops(destinationCode);\n  return stopTimes.map(function (destinationStopTime) {\n    return maps.BLUE_FISH_MAP[destinationStopTime[0]];\n  }).map(function (fishId, index) {\n    var time = stopTimes[index][1];\n    var fishInfo = fishes[fishId].spreadsheet_data;\n    return fishInfo.time && fishInfo.time.indexOf(time) > -1 ? fishId : null;\n  });\n}\nexport var getBaitChain = memoize(function _getBaitChain(fishId) {\n  var fishInfo = fishes[fishId].spreadsheet_data;\n  console.log(fishInfo);\n  return fishInfo.bait ? [{\n    id: fishInfo.bait\n  }, {\n    id: fishId,\n    tug: fishInfo.tug\n  }] : [].concat(_toConsumableArray(_getBaitChain(fishInfo.mooch)), [{\n    id: fishId,\n    tug: fishInfo.tug\n  }]);\n});\nexport var getBaitGroup = memoize(function (fishId) {\n  var fishInfo = fishes[fishId].spreadsheet_data;\n  return {\n    baits: getBaitChain(fishId),\n    intuitionFishes: fishInfo.intuition && fishInfo.intuition.map(function (_ref2) {\n      var id = _ref2.id,\n          count = _ref2.count;\n      return {\n        baits: getBaitChain(id),\n        count: count\n      };\n    })\n  };\n});\nexport function subtextDH(fishId) {\n  var doubleHook = fishes[fishId].spreadsheet_data.double_hook;\n  return doubleHook ? \"DH: \".concat(Array.isArray(doubleHook) ? doubleHook.join('-') : doubleHook) : 'DH: ?';\n}\nexport function subtextBiteTime(fishId) {\n  var biteTime = fishes[fishId].spreadsheet_data.bite_time;\n  return biteTime ? \"\".concat(biteTime.all[0] === biteTime.all[1] ? biteTime.all[0] : biteTime.all.join('-'), \" s\") : '? s';\n}\nexport function translate() {\n  var locale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'en';\n  var obj = arguments.length > 1 ? arguments[1] : undefined;\n\n  for (var _len = arguments.length, keys = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    keys[_key - 2] = arguments[_key];\n  }\n\n  for (var i = keys.length; i > 0; --i) {\n    var _key2 = \"\".concat(keys.slice(0, i).join('_'), \"_\").concat(locale);\n\n    if (obj[_key2]) return obj[_key2];\n  }\n\n  return \"{\".concat(obj.name || obj.id, \".\").concat(keys.join('_'), \"}\");\n}\nexport function upperFirst(str) {\n  return str[0].toUpperCase() + str.slice(1);\n}","map":null,"metadata":{},"sourceType":"module"}