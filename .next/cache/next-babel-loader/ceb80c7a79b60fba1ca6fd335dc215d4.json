{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Section from '../Section';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Button from '@material-ui/core/Button';\nimport CalculatorCell from './CalculatorCell';\nimport calculateProbabilities from './calculate-probabilities';\nconst PROB_1_LINES = 6688 / 11440;\nconst PROB_2_LINES = 1208 / 11440;\nconst PROB_3_LINES = 24 / 11440;\nconst useStyles = makeStyles(theme => ({\n  gridShrink: {\n    textAlign: 'center',\n    [theme.breakpoints.up('md')]: {\n      flex: '0 0 auto'\n    }\n  },\n  gridGrow: {\n    [theme.breakpoints.up('md')]: {\n      flex: '1 1 0px'\n    }\n  },\n  cellsContainer: {\n    display: 'inline-block',\n    borderCollapse: 'collapse',\n    borderSpacing: 0,\n    border: theme.palette.type === 'dark' ? '1px solid gray' : '1px solid black',\n    '& td': {\n      padding: 0,\n      lineHeight: 0\n    }\n  },\n  probabilities: {\n    marginBottom: theme.spacing(2),\n    '& table': {\n      width: 'initial',\n      '& thead, & tbody': {\n        background: 'none'\n      },\n      '& th': {\n        padding: theme.spacing(1, 2)\n      },\n      '& td': {\n        padding: theme.spacing(1, 2),\n        border: 0\n      }\n    }\n  }\n}));\n\nfunction toPercent(val) {\n  return __jsx(Typography, null, (val * 100).toFixed(1) + '%');\n}\n\nfunction toDeviationPercent(val) {\n  const string = (val >= 0 ? '+' : '') + (val * 100).toFixed(1) + '%';\n  const color = val > 0 ? 'green' : val < 0 ? 'red' : undefined;\n  return __jsx(Typography, {\n    style: {\n      color\n    }\n  }, string);\n}\n\nconst Calculator = () => {\n  const {\n    0: board,\n    1: setBoard\n  } = useState(Array(16).fill(false));\n  const classes = useStyles();\n  const {\n    lines1,\n    lines2,\n    lines3,\n    total\n  } = calculateProbabilities(board);\n  const filledCells = board.filter(x => x).length;\n\n  const toggleCell = index => {\n    const newBoard = board.slice();\n    newBoard[index] = !board[index];\n    setBoard(newBoard);\n  };\n\n  const handleClickReset = event => {\n    setBoard(Array(16).fill(false));\n  };\n\n  return __jsx(Section, null, __jsx(Grid, {\n    container: true,\n    spacing: 4\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.gridShrink\n  }, __jsx(TableContainer, null, __jsx(\"table\", {\n    className: classes.cellsContainer\n  }, __jsx(\"tbody\", null, [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]].map((row, rowIndex) => __jsx(\"tr\", {\n    key: rowIndex\n  }, row.map(cellIndex => __jsx(\"td\", {\n    key: cellIndex\n  }, __jsx(CalculatorCell, {\n    selected: board[cellIndex],\n    onSelect: toggleCell.bind(null, cellIndex)\n  }))))))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.gridGrow\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    paragraph: true\n  }, filledCells, \" / 9\"), filledCells <= 9 ? __jsx(Typography, {\n    paragraph: true\n  }, \"Select up to 9 stickers.\") : __jsx(Typography, {\n    paragraph: true\n  }, \"Too many cells have been filled!\"), __jsx(TableContainer, {\n    className: classes.probabilities\n  }, __jsx(Table, null, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null, \"Lines\"), __jsx(TableCell, null, \"Chance\"), __jsx(TableCell, null, \"Deviation\"))), __jsx(TableBody, null, __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, __jsx(Typography, null, \"1+\")), __jsx(TableCell, {\n    align: \"right\"\n  }, toPercent(lines1 / total)), __jsx(TableCell, {\n    align: \"right\"\n  }, toDeviationPercent(lines1 / total - PROB_1_LINES))), __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, __jsx(Typography, null, \"2+\")), __jsx(TableCell, {\n    align: \"right\"\n  }, toPercent(lines2 / total)), __jsx(TableCell, {\n    align: \"right\"\n  }, toDeviationPercent(lines2 / total - PROB_2_LINES))), __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, __jsx(Typography, null, \"3\")), __jsx(TableCell, {\n    align: \"right\"\n  }, toPercent(lines3 / total)), __jsx(TableCell, {\n    align: \"right\"\n  }, toDeviationPercent(lines3 / total - PROB_3_LINES)))))), __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: handleClickReset\n  }, \"Reset\"))));\n};\n\nexport default Calculator;","map":null,"metadata":{},"sourceType":"module"}