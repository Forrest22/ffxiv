{"ast":null,"code":"import _toConsumableArray from \"/root/ffxiv/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/root/ffxiv/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Section from '../Section';\nimport Grid from '@material-ui/core/Grid';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport RouteCardContainer from './RouteCardContainer';\nimport RouteCard from './RouteCard';\nimport FishPanel from './FishPanel';\nimport BaitList from './BaitList';\nimport calculateVoyages from './calculate-voyages';\nimport { fishingSpots, fishes } from './gists/data';\nimport * as maps from './maps';\nimport { timeUntil, getStops, getTimeSensitiveFish, getPointsFish, getBlueFish, getBaitGroup, translate, upperFirst } from './utils';\nimport i18n from '../../i18n';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    headerSub: _defineProperty({\n      marginLeft: theme.spacing(2)\n    }, theme.breakpoints.down('md'), {\n      marginLeft: 0,\n      display: 'block'\n    }),\n    headerTime: {\n      position: 'relative',\n      top: '-0.2em',\n      marginLeft: '0.25em'\n    },\n    fishViewSelect: _defineProperty({\n      display: 'block'\n    }, theme.breakpoints.up('md'), {\n      textAlign: 'right'\n    })\n  };\n});\nvar FishView;\n\n(function (FishView) {\n  FishView[FishView[\"Intuition\"] = 0] = \"Intuition\";\n  FishView[FishView[\"TimeSensitive\"] = 1] = \"TimeSensitive\";\n  FishView[FishView[\"Points\"] = 2] = \"Points\";\n  FishView[FishView[\"All\"] = 3] = \"All\";\n})(FishView || (FishView = {}));\n\nvar RouteInformation = function RouteInformation(_ref) {\n  var now = _ref.now,\n      selectedRoute = _ref.selectedRoute,\n      checklist = _ref.checklist,\n      setChecklist = _ref.setChecklist,\n      t = _ref.t,\n      i18n = _ref.i18n;\n  if (!now || !selectedRoute) return null;\n  var classes = useStyles();\n\n  var _useState = useState(FishView.Intuition),\n      fishView = _useState[0],\n      setFishView = _useState[1];\n\n  var _useState2 = useState(0),\n      tab = _useState2[0],\n      setTab = _useState2[1];\n\n  var stops = getStops(selectedRoute);\n  var next = calculateVoyages(now, 1, [selectedRoute])[0].time;\n  useEffect(function () {\n    setTab(0);\n  }, [selectedRoute]);\n\n  var handleSelectFishView = function handleSelectFishView(event) {\n    setFishView(event.target.value);\n  };\n\n  var handleChangeTab = function handleChangeTab(_, value) {\n    setTab(value);\n  };\n\n  return /*#__PURE__*/_jsx(Section, {\n    title: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      alignItems: \"flex-end\",\n      children: [/*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        md: 8,\n        children: [upperFirst(translate(i18n.language, fishingSpots[maps.STOP_MAP[selectedRoute[0]]], 'place_name_sub', 'no_article')), /*#__PURE__*/_jsx(\"span\", {\n          className: classes.headerTime,\n          children: maps.TIME_MAP[selectedRoute[1]]\n        }), /*#__PURE__*/_jsx(Typography, {\n          display: \"inline\",\n          className: classes.headerSub,\n          children: timeUntil(now, next, {\n            t: t,\n            full: true,\n            locale: i18n.language\n          })\n        })]\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: classes.fishViewSelect,\n          children: /*#__PURE__*/_jsxs(Select, {\n            value: fishView,\n            onChange: handleSelectFishView,\n            children: [/*#__PURE__*/_jsx(MenuItem, {\n              value: FishView.Intuition,\n              children: t('show-intuition-fish')\n            }), /*#__PURE__*/_jsx(MenuItem, {\n              value: FishView.TimeSensitive,\n              children: t('show-time-fish')\n            }), /*#__PURE__*/_jsx(MenuItem, {\n              value: FishView.Points,\n              children: t('show-points-fish')\n            }), /*#__PURE__*/_jsx(MenuItem, {\n              value: FishView.All,\n              children: t('show-all-fish')\n            })]\n          })\n        })\n      })]\n    }),\n    children: function () {\n      switch (fishView) {\n        case FishView.Intuition:\n          return /*#__PURE__*/_jsx(RouteCardContainer, {\n            children: stops.map(function (stop, index) {\n              return /*#__PURE__*/_jsx(RouteCard, {\n                index: index,\n                stop: stop,\n                children: /*#__PURE__*/_jsx(CardContent, {\n                  children: /*#__PURE__*/_jsx(BaitList, {\n                    baitGroups: [maps.SPECTRAL_FISH_MAP[stop[0]], maps.GREEN_FISH_MAP[stop[0]], getBlueFish(selectedRoute)[index]].filter(function (x) {\n                      return x;\n                    }).map(function (fishId) {\n                      return {\n                        header: translate(i18n.language, fishes[fishId], 'name'),\n                        baitGroupProps: getBaitGroup(fishId)\n                      };\n                    })\n                  })\n                })\n              }, stop);\n            })\n          });\n\n        case FishView.TimeSensitive:\n          return /*#__PURE__*/_jsx(RouteCardContainer, {\n            children: stops.map(function (stop, index) {\n              return /*#__PURE__*/_jsx(RouteCard, {\n                index: index,\n                stop: stop,\n                children: /*#__PURE__*/_jsx(CardContent, {\n                  children: /*#__PURE__*/_jsx(BaitList, {\n                    baitGroups: [maps.SPECTRAL_FISH_MAP[stop[0]]].concat(_toConsumableArray(getTimeSensitiveFish(selectedRoute)[index])).filter(function (x) {\n                      return x;\n                    }).map(function (fishId) {\n                      return {\n                        header: translate(i18n.language, fishes[fishId], 'name'),\n                        baitGroupProps: getBaitGroup(fishId)\n                      };\n                    })\n                  })\n                })\n              }, stop);\n            })\n          });\n\n        case FishView.Points:\n          return /*#__PURE__*/_jsx(RouteCardContainer, {\n            children: stops.map(function (stop, index) {\n              return /*#__PURE__*/_jsx(RouteCard, {\n                index: index,\n                stop: stop,\n                children: /*#__PURE__*/_jsx(CardContent, {\n                  children: /*#__PURE__*/_jsx(BaitList, {\n                    baitGroups: [maps.SPECTRAL_FISH_MAP[stop[0]], maps.GREEN_FISH_MAP[stop[0]]].concat(_toConsumableArray(getPointsFish(selectedRoute)[index]), [getBlueFish(selectedRoute)[index]]).filter(function (x) {\n                      return x;\n                    }).map(function (fishId, index) {\n                      var fishInfo = fishes[fishId].spreadsheet_data;\n                      return {\n                        header: translate(i18n.language, fishes[fishId], 'name'),\n                        baitGroupProps: _objectSpread(_objectSpread({}, getBaitGroup(fishId)), {}, {\n                          subtext: index === 0 ? '' : \"DH: \\xD7\".concat(Array.isArray(fishInfo.double_hook) ? fishInfo.double_hook.join('-') : fishInfo.double_hook) + \" = \".concat((Array.isArray(fishInfo.double_hook) ? fishInfo.double_hook[1] : fishInfo.double_hook) * fishInfo.points),\n                          mainOnly: true\n                        })\n                      };\n                    })\n                  })\n                })\n              }, stop);\n            })\n          });\n\n        case FishView.All:\n          return /*#__PURE__*/_jsxs(Card, {\n            variant: \"outlined\",\n            children: [/*#__PURE__*/_jsx(Tabs, {\n              variant: \"fullWidth\",\n              value: tab,\n              onChange: handleChangeTab,\n              children: stops.map(function (stop, index) {\n                return /*#__PURE__*/_jsx(Tab, {\n                  label: /*#__PURE__*/_jsxs(_Fragment, {\n                    children: [index + 1, \". \", translate(i18n.language, fishingSpots[maps.STOP_MAP[stop[0]]], 'place_name_sub'), \" \", maps.TIME_MAP[stop[1]]]\n                  })\n                }, stop);\n              })\n            }), stops.map(function (stop, index) {\n              return /*#__PURE__*/_jsx(FishPanel, {\n                tab: tab,\n                index: index,\n                stop: stop,\n                checklist: checklist,\n                setChecklist: setChecklist\n              }, stop);\n            })]\n          });\n      }\n    }()\n  });\n};\n\nexport default i18n.withTranslation('ocean-fishing')(RouteInformation);","map":null,"metadata":{},"sourceType":"module"}