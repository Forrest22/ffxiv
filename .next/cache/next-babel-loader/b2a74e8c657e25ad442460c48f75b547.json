{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useRouter } from 'next/router';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport cn from 'classnames';\nimport EorzeaWeather from '@pillowfication/eorzea-weather';\nimport REGIONS from './regions';\nimport { getEorzeanTime, getLocalTime } from './get-eorzean-time';\nimport calculateWeathers from './calculate-weathers';\nimport { paddedZero } from '../utils';\nimport Section from '../Section';\nimport Typography from '@material-ui/core/Typography';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport WeatherIcon from './WeatherIcon';\nvar ZONES = REGIONS.map(function (region) {\n  return region.zones;\n}).flat();\nvar WEATHER_CELL_WIDTH = 75;\nvar BELL = 8 * 3600000 / (1440 / 70);\nvar eorzeaWeather = new EorzeaWeather({\n  locale: 'en'\n});\n\nfunction displayDate(date) {\n  return paddedZero(date.getHours()) + ':' + paddedZero(date.getMinutes());\n}\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    options: {\n      marginBottom: theme.spacing(2)\n    },\n    weatherTable: {\n      '& thead th': {\n        fontWeight: 'normal',\n        '&$current': {\n          fontWeight: 'bold'\n        }\n      },\n      ':not(:last-child) > &': {\n        marginBottom: theme.spacing(4)\n      }\n    },\n    weatherTime: {\n      textAlign: 'center',\n      paddingLeft: theme.spacing(0.5),\n      paddingRight: theme.spacing(0.5),\n      '&:last-child': {\n        paddingRight: theme.spacing(1),\n        width: WEATHER_CELL_WIDTH + theme.spacing(1.5)\n      }\n    },\n    regionCell: {\n      minWidth: 200\n    },\n    weatherCell: {\n      width: WEATHER_CELL_WIDTH + theme.spacing(1),\n      paddingLeft: theme.spacing(0.5),\n      paddingRight: theme.spacing(0.5),\n      textAlign: 'center',\n      verticalAlign: 'top',\n      lineHeight: 1,\n      '& span': {\n        display: 'inline-block',\n        width: WEATHER_CELL_WIDTH,\n        lineHeight: 1.1\n      },\n      '&:last-child': {\n        paddingRight: theme.spacing(1),\n        width: WEATHER_CELL_WIDTH + theme.spacing(1.5)\n      }\n    },\n    current: {\n      position: 'relative',\n      backgroundColor: theme.palette.action.hover\n    },\n    timeLine: {\n      position: 'absolute',\n      display: 'block',\n      top: 0,\n      left: 0,\n      bottom: -1,\n      width: function width(_ref) {\n        var now = _ref.now;\n        if (!now) return 0;\n        var eorzeanTime = getEorzeanTime(now);\n        var hours = eorzeanTime.getUTCHours() % 8;\n        var minutes = hours * 60 + eorzeanTime.getUTCMinutes();\n        return \"\".concat(minutes / 480 * 100, \"%\");\n      },\n      borderRight: \"2px solid \".concat(fade(theme.palette.action.hover, 0.2))\n    }\n  };\n});\n\nvar UpcomingWeather = function UpcomingWeather(props) {\n  var now = props.now;\n\n  var _useState = useState('none'),\n      filter = _useState[0],\n      setFilter = _useState[1];\n\n  var _useState2 = useState(true),\n      showLabels = _useState2[0],\n      setShowLabels = _useState2[1];\n\n  var _useState3 = useState(false),\n      showLocalTime = _useState3[0],\n      setShowLocalTime = _useState3[1];\n\n  var _useState4 = useState(false),\n      showWeatherChance = _useState4[0],\n      setShowWeatherChance = _useState4[1];\n\n  var classes = useStyles(props);\n  var router = useRouter();\n  var firstRender = useRef(false);\n  var cachedForecast = useRef(null);\n  var theme = useTheme();\n  var sm = useMediaQuery(theme.breakpoints.up('sm'));\n  var md = useMediaQuery(theme.breakpoints.up('md'));\n  var lg = useMediaQuery(theme.breakpoints.up('lg'));\n  useEffect(function () {\n    var queryFilter = REGIONS.find(function (region) {\n      return region.query === router.query.filter;\n    }) ? router.query.filter : 'none';\n\n    if (!firstRender.current && now || filter !== queryFilter) {\n      firstRender.current = true;\n      cachedForecast.current = null;\n      setFilter(queryFilter);\n    }\n\n    if (!now || getEorzeanTime(now).getUTCMinutes() === 0) {\n      cachedForecast.current = null;\n    }\n  });\n\n  var handleSelectFilter = function handleSelectFilter(event) {\n    var filter = event.target.value;\n    router.push({\n      pathname: router.pathname,\n      query: filter === 'none' ? null : {\n        filter: filter\n      }\n    });\n  };\n\n  var handleToggleLabels = function handleToggleLabels() {\n    setShowLabels(!showLabels);\n  };\n\n  var handleToggleLocalTime = function handleToggleLocalTime() {\n    setShowLocalTime(!showLocalTime);\n  };\n\n  var handleToggleWeatherChance = function handleToggleWeatherChance() {\n    setShowWeatherChance(!showWeatherChance);\n  };\n\n  return __jsx(Section, {\n    title: \"Upcoming Weather\"\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    className: classes.options\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(FormControl, {\n    variant: \"filled\",\n    fullWidth: true,\n    margin: \"dense\"\n  }, __jsx(InputLabel, null, \"Select a region\"), __jsx(Select, {\n    onChange: handleSelectFilter,\n    value: filter\n  }, __jsx(MenuItem, {\n    value: \"none\"\n  }, \"Show all regions\"), REGIONS.map(function (_ref2) {\n    var regionId = _ref2.regionId,\n        query = _ref2.query;\n    return __jsx(MenuItem, {\n      key: query,\n      value: query\n    }, eorzeaWeather.translateRegion(regionId));\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: showLabels,\n      onChange: handleToggleLabels,\n      color: \"primary\"\n    }),\n    label: \"Show Labels\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: showLocalTime,\n      onChange: handleToggleLocalTime,\n      color: \"primary\"\n    }),\n    label: \"Show local times\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: showWeatherChance,\n      onChange: handleToggleWeatherChance,\n      color: \"primary\"\n    }),\n    label: __jsx(React.Fragment, null, \"Show \", __jsx(\"code\", null, \"weatherChance\"))\n  }))), __jsx(NoSsr, null, function () {\n    if (!now) return null;\n    var weathersCount = lg ? 9 : md ? 7 : sm ? 6 : 3;\n\n    var _ref3 = cachedForecast.current || (cachedForecast.current = calculateWeathers(ZONES, 9, now)),\n        weathers = _ref3.weathers,\n        weatherChances = _ref3.weatherChances;\n\n    var eorzeanTime = getEorzeanTime(now);\n    var timeChunk = Math.floor(eorzeanTime.getUTCHours() / 8) * 8;\n    var filteredRegion = filter !== 'none' && REGIONS.find(function (region) {\n      return region.query === filter;\n    });\n    var currentBell = new Date(eorzeanTime.getTime());\n    currentBell.setUTCHours(timeChunk);\n    currentBell.setUTCMinutes(0);\n    currentBell.setUTCSeconds(0);\n    currentBell.setUTCMilliseconds(0);\n    currentBell = getLocalTime(currentBell);\n    return (filteredRegion ? [filteredRegion] : REGIONS).map(function (_ref4) {\n      var regionId = _ref4.regionId,\n          zones = _ref4.zones;\n      return __jsx(React.Fragment, {\n        key: regionId\n      }, __jsx(Typography, {\n        variant: \"h6\",\n        gutterBottom: true\n      }, eorzeaWeather.translateRegion(regionId)), __jsx(TableContainer, null, __jsx(Table, {\n        size: \"small\",\n        className: classes.weatherTable\n      }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null), Array(weathersCount + 1).fill().map(function (_, index) {\n        return __jsx(TableCell, {\n          key: index,\n          className: cn(classes.weatherTime, index === 1 && classes.current)\n        }, showLocalTime ? index === 1 ? __jsx(React.Fragment, null, eorzeanTime.toString(), \" ET\", __jsx(\"br\", null), displayDate(now), \" LT\") : __jsx(React.Fragment, null, paddedZero((24 + timeChunk + 8 * (index - 1)) % 24) + ':00', \" ET\", __jsx(\"br\", null), displayDate(new Date(currentBell.getTime() + BELL * (index - 1))), \" LT\") : index === 1 ? eorzeanTime.toString() : paddedZero((24 + timeChunk + 8 * (index - 1)) % 24) + ':00', showWeatherChance && __jsx(React.Fragment, null, __jsx(\"br\", null), paddedZero(weatherChances[index])));\n      }))), __jsx(TableBody, null, zones.map(function (zoneId) {\n        return __jsx(TableRow, {\n          key: zoneId,\n          hover: true\n        }, __jsx(TableCell, {\n          component: \"th\",\n          scope: \"row\",\n          className: classes.regionCell\n        }, __jsx(Typography, null, eorzeaWeather.translateZone(zoneId))), weathers[zoneId].slice(0, weathersCount + 1).map(function (weatherId, index) {\n          var _cn;\n\n          return __jsx(TableCell, {\n            key: index,\n            className: cn(classes.weatherCell, (_cn = {}, _defineProperty(_cn, classes.previous, index === 0), _defineProperty(_cn, classes.current, index === 1), _cn))\n          }, index === 1 && __jsx(\"div\", {\n            className: classes.timeLine\n          }), __jsx(WeatherIcon, {\n            weatherId: weatherId,\n            showLabel: showLabels\n          }));\n        }));\n      })))));\n    });\n  }()));\n};\n\nexport default UpcomingWeather;","map":null,"metadata":{},"sourceType":"module"}