{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { timeUntil as genericTimeUntil } from '../utils';\nimport { ROUTE_MAP } from './maps';\nimport FISH from './gists/data/fish.json';\nvar FISH_MAP = {};\n\nfor (var key in FISH) {\n  var _iterator = _createForOfIteratorHelper(FISH[key]),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var fish = _step.value;\n      FISH_MAP[fish.name] = fish;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nexport function timeUntil(now, then, full) {\n  var diff = then.getTime() - now.getTime();\n\n  if (diff < -900000) {\n    return 'en route';\n  } else if (diff < 0) {\n    return 'boarding now';\n  } else {\n    return genericTimeUntil(now, then, full);\n  }\n}\nexport function getStops(destinationCode) {\n  var stops = ROUTE_MAP[destinationCode[0]];\n  var timeIndex = 'DSN'.indexOf(destinationCode[1]);\n  return stops.map(function (stop, index) {\n    return stop + 'DSN'.charAt((index + timeIndex + 1) % 3);\n  });\n}\nexport function getBaitChain(fishName) {\n  var fish = FISH_MAP[fishName];\n  var currBait = fish;\n  var bait = [currBait];\n\n  while (currBait) {\n    if (currBait.bait) {\n      bait.unshift({\n        name: currBait.bait\n      });\n      currBait = null;\n    } else if (currBait.mooch) {\n      currBait = FISH_MAP[currBait.mooch];\n      bait.unshift(currBait);\n    } else {\n      console.error(\"Incomplete chain for \".concat(fishName));\n      currBait = null;\n    }\n  }\n\n  var intuitionFishes = fish.intuition && fish.intuition.map(function (intuitionFish) {\n    return {\n      count: intuitionFish.count,\n      bait: getBaitChain(intuitionFish.name).bait\n    };\n  });\n  return {\n    bait: bait,\n    intuitionFishes: intuitionFishes\n  };\n}","map":null,"metadata":{},"sourceType":"module"}