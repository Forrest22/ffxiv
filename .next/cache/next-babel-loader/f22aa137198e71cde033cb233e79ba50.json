{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Section from '../Section';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Highlight from '../Highlight';\nconst useStyles = makeStyles(theme => ({\n  anemosTable: {\n    width: 'initial',\n    '& th, & td': {\n      paddingLeft: theme.spacing(4),\n      paddingRight: theme.spacing(4)\n    }\n  }\n}));\n\nconst About = () => {\n  const classes = useStyles();\n  return __jsx(Section, {\n    title: \"About\"\n  }, __jsx(Typography, {\n    paragraph: true\n  }, \"The weather in Eorzea can be predicted. First, the number of Eorzean hours and days since the \", __jsx(Link, {\n    href: \"https://en.wikipedia.org/wiki/Unix_time\"\n  }, \"Unix epoch\"), \" is calculated.\"), __jsx(Highlight, {\n    language: \"javascript\"\n  }, `\n// Get seconds since Jan 1st 1970\nconst unixSeconds = Date.now() / 1000\n\n// Get Eorzean hours/days since (1 Eorzean hour = 175 seconds)\nconst eorzeanHours = Math.floor(unixSeconds / 175)\nconst eorzeanDays = Math.floor(eorzeanHours / 24)\n        `.trim()), __jsx(Typography, {\n    paragraph: true\n  }, \"Next, compute which of the 3 time chunks the hour falls in.\"), __jsx(Highlight, {\n    language: \"javascript\"\n  }, `\nlet timeChunk = (eorzeanHours % 24) - (eorzeanHours % 8)\n\n// Adjust time chunk so that\n//   16:00 is 00,\n//   00:00 is 08,\n//   08:00 is 16\ntimeChunk = (timeChunk + 8) % 24\n        `.trim()), __jsx(Typography, {\n    paragraph: true\n  }, \"The number of Eorzean days and the time chunk form the seed that is hashed.\"), __jsx(Highlight, {\n    language: \"javascript\"\n  }, `\nconst seed = eorzeanDays * 100 + timeChunk\n\n// Do a little hashing\nconst step1 = (seed << 11) ^ seed\nconst step2 = (step1 >>> 8) ^ step1\n\n// Return a number between 0-99 inclusive\nconst weatherChance = step2 % 100\n        `.trim()), __jsx(Typography, {\n    paragraph: true\n  }, \"With \", __jsx(\"code\", null, \"weatherChance\"), \" computed as a number from 0 to 99, each zone can determine its weather. For example, the weather in Eureka Anemos is Gales if \", __jsx(\"code\", null, \"weatherChance\"), \" is between 30 and 59. Its full table of weathers is\"), __jsx(Table, {\n    className: classes.anemosTable\n  }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, __jsx(\"code\", null, \"weatherChance\")), __jsx(TableCell, {\n    align: \"center\"\n  }, \"Weather\"))), __jsx(TableBody, null, __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, \"00-29\"), __jsx(TableCell, null, \"Fair Skies\")), __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, \"30-59\"), __jsx(TableCell, null, \"Gales\")), __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, \"60-89\"), __jsx(TableCell, null, \"Showers\")), __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\"\n  }, \"90-99\"), __jsx(TableCell, null, \"Snow\")))));\n};\n\nexport default About;","map":null,"metadata":{},"sourceType":"module"}